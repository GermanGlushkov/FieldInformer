//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace FI.Common.Data.Auto {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class OlapCellsetData : DataSet {
        
        private ErrorDataTable tableError;
        
        private ClDataTable tableCl;
        
        private Ax0MemDataTable tableAx0Mem;
        
        private Ax1MemDataTable tableAx1Mem;
        
        private CellsetMetaDataDataTable tableCellsetMetaData;
        
        public OlapCellsetData() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected OlapCellsetData(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Error"] != null)) {
                    this.Tables.Add(new ErrorDataTable(ds.Tables["Error"]));
                }
                if ((ds.Tables["Cl"] != null)) {
                    this.Tables.Add(new ClDataTable(ds.Tables["Cl"]));
                }
                if ((ds.Tables["Ax0Mem"] != null)) {
                    this.Tables.Add(new Ax0MemDataTable(ds.Tables["Ax0Mem"]));
                }
                if ((ds.Tables["Ax1Mem"] != null)) {
                    this.Tables.Add(new Ax1MemDataTable(ds.Tables["Ax1Mem"]));
                }
                if ((ds.Tables["CellsetMetaData"] != null)) {
                    this.Tables.Add(new CellsetMetaDataDataTable(ds.Tables["CellsetMetaData"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ErrorDataTable Error {
            get {
                return this.tableError;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ClDataTable Cl {
            get {
                return this.tableCl;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Ax0MemDataTable Ax0Mem {
            get {
                return this.tableAx0Mem;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Ax1MemDataTable Ax1Mem {
            get {
                return this.tableAx1Mem;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CellsetMetaDataDataTable CellsetMetaData {
            get {
                return this.tableCellsetMetaData;
            }
        }
        
        public override DataSet Clone() {
            OlapCellsetData cln = ((OlapCellsetData)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["Error"] != null)) {
                this.Tables.Add(new ErrorDataTable(ds.Tables["Error"]));
            }
            if ((ds.Tables["Cl"] != null)) {
                this.Tables.Add(new ClDataTable(ds.Tables["Cl"]));
            }
            if ((ds.Tables["Ax0Mem"] != null)) {
                this.Tables.Add(new Ax0MemDataTable(ds.Tables["Ax0Mem"]));
            }
            if ((ds.Tables["Ax1Mem"] != null)) {
                this.Tables.Add(new Ax1MemDataTable(ds.Tables["Ax1Mem"]));
            }
            if ((ds.Tables["CellsetMetaData"] != null)) {
                this.Tables.Add(new CellsetMetaDataDataTable(ds.Tables["CellsetMetaData"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableError = ((ErrorDataTable)(this.Tables["Error"]));
            if ((this.tableError != null)) {
                this.tableError.InitVars();
            }
            this.tableCl = ((ClDataTable)(this.Tables["Cl"]));
            if ((this.tableCl != null)) {
                this.tableCl.InitVars();
            }
            this.tableAx0Mem = ((Ax0MemDataTable)(this.Tables["Ax0Mem"]));
            if ((this.tableAx0Mem != null)) {
                this.tableAx0Mem.InitVars();
            }
            this.tableAx1Mem = ((Ax1MemDataTable)(this.Tables["Ax1Mem"]));
            if ((this.tableAx1Mem != null)) {
                this.tableAx1Mem.InitVars();
            }
            this.tableCellsetMetaData = ((CellsetMetaDataDataTable)(this.Tables["CellsetMetaData"]));
            if ((this.tableCellsetMetaData != null)) {
                this.tableCellsetMetaData.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "OlapCellsetData";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/OlapCellsetData.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableError = new ErrorDataTable();
            this.Tables.Add(this.tableError);
            this.tableCl = new ClDataTable();
            this.Tables.Add(this.tableCl);
            this.tableAx0Mem = new Ax0MemDataTable();
            this.Tables.Add(this.tableAx0Mem);
            this.tableAx1Mem = new Ax1MemDataTable();
            this.Tables.Add(this.tableAx1Mem);
            this.tableCellsetMetaData = new CellsetMetaDataDataTable();
            this.Tables.Add(this.tableCellsetMetaData);
        }
        
        private bool ShouldSerializeError() {
            return false;
        }
        
        private bool ShouldSerializeCl() {
            return false;
        }
        
        private bool ShouldSerializeAx0Mem() {
            return false;
        }
        
        private bool ShouldSerializeAx1Mem() {
            return false;
        }
        
        private bool ShouldSerializeCellsetMetaData() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void ErrorRowChangeEventHandler(object sender, ErrorRowChangeEvent e);
        
        public delegate void ClRowChangeEventHandler(object sender, ClRowChangeEvent e);
        
        public delegate void Ax0MemRowChangeEventHandler(object sender, Ax0MemRowChangeEvent e);
        
        public delegate void Ax1MemRowChangeEventHandler(object sender, Ax1MemRowChangeEvent e);
        
        public delegate void CellsetMetaDataRowChangeEventHandler(object sender, CellsetMetaDataRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ErrorDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnNumber;
            
            private DataColumn columnDescription;
            
            internal ErrorDataTable() : 
                    base("Error") {
                this.InitClass();
            }
            
            internal ErrorDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn NumberColumn {
                get {
                    return this.columnNumber;
                }
            }
            
            internal DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            public ErrorRow this[int index] {
                get {
                    return ((ErrorRow)(this.Rows[index]));
                }
            }
            
            public event ErrorRowChangeEventHandler ErrorRowChanged;
            
            public event ErrorRowChangeEventHandler ErrorRowChanging;
            
            public event ErrorRowChangeEventHandler ErrorRowDeleted;
            
            public event ErrorRowChangeEventHandler ErrorRowDeleting;
            
            public void AddErrorRow(ErrorRow row) {
                this.Rows.Add(row);
            }
            
            public ErrorRow AddErrorRow(string Number, string Description) {
                ErrorRow rowErrorRow = ((ErrorRow)(this.NewRow()));
                rowErrorRow.ItemArray = new object[] {
                        Number,
                        Description};
                this.Rows.Add(rowErrorRow);
                return rowErrorRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ErrorDataTable cln = ((ErrorDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ErrorDataTable();
            }
            
            internal void InitVars() {
                this.columnNumber = this.Columns["Number"];
                this.columnDescription = this.Columns["Description"];
            }
            
            private void InitClass() {
                this.columnNumber = new DataColumn("Number", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnNumber);
                this.columnDescription = new DataColumn("Description", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDescription);
            }
            
            public ErrorRow NewErrorRow() {
                return ((ErrorRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new ErrorRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ErrorRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ErrorRowChanged != null)) {
                    this.ErrorRowChanged(this, new ErrorRowChangeEvent(((ErrorRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ErrorRowChanging != null)) {
                    this.ErrorRowChanging(this, new ErrorRowChangeEvent(((ErrorRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ErrorRowDeleted != null)) {
                    this.ErrorRowDeleted(this, new ErrorRowChangeEvent(((ErrorRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ErrorRowDeleting != null)) {
                    this.ErrorRowDeleting(this, new ErrorRowChangeEvent(((ErrorRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveErrorRow(ErrorRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ErrorRow : DataRow {
            
            private ErrorDataTable tableError;
            
            internal ErrorRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableError = ((ErrorDataTable)(this.Table));
            }
            
            public string Number {
                get {
                    try {
                        return ((string)(this[this.tableError.NumberColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableError.NumberColumn] = value;
                }
            }
            
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableError.DescriptionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableError.DescriptionColumn] = value;
                }
            }
            
            public bool IsNumberNull() {
                return this.IsNull(this.tableError.NumberColumn);
            }
            
            public void SetNumberNull() {
                this[this.tableError.NumberColumn] = System.Convert.DBNull;
            }
            
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableError.DescriptionColumn);
            }
            
            public void SetDescriptionNull() {
                this[this.tableError.DescriptionColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ErrorRowChangeEvent : EventArgs {
            
            private ErrorRow eventRow;
            
            private DataRowAction eventAction;
            
            public ErrorRowChangeEvent(ErrorRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ErrorRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ClDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnAx0;
            
            private DataColumn columnAx1;
            
            private DataColumn columnVal;
            
            private DataColumn columnFVal;
            
            internal ClDataTable() : 
                    base("Cl") {
                this.InitClass();
            }
            
            internal ClDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn Ax0Column {
                get {
                    return this.columnAx0;
                }
            }
            
            internal DataColumn Ax1Column {
                get {
                    return this.columnAx1;
                }
            }
            
            internal DataColumn ValColumn {
                get {
                    return this.columnVal;
                }
            }
            
            internal DataColumn FValColumn {
                get {
                    return this.columnFVal;
                }
            }
            
            public ClRow this[int index] {
                get {
                    return ((ClRow)(this.Rows[index]));
                }
            }
            
            public event ClRowChangeEventHandler ClRowChanged;
            
            public event ClRowChangeEventHandler ClRowChanging;
            
            public event ClRowChangeEventHandler ClRowDeleted;
            
            public event ClRowChangeEventHandler ClRowDeleting;
            
            public void AddClRow(ClRow row) {
                this.Rows.Add(row);
            }
            
            public ClRow AddClRow(int Ax0, int Ax1, string Val, string FVal) {
                ClRow rowClRow = ((ClRow)(this.NewRow()));
                rowClRow.ItemArray = new object[] {
                        Ax0,
                        Ax1,
                        Val,
                        FVal};
                this.Rows.Add(rowClRow);
                return rowClRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ClDataTable cln = ((ClDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ClDataTable();
            }
            
            internal void InitVars() {
                this.columnAx0 = this.Columns["Ax0"];
                this.columnAx1 = this.Columns["Ax1"];
                this.columnVal = this.Columns["Val"];
                this.columnFVal = this.Columns["FVal"];
            }
            
            private void InitClass() {
                this.columnAx0 = new DataColumn("Ax0", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAx0);
                this.columnAx1 = new DataColumn("Ax1", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAx1);
                this.columnVal = new DataColumn("Val", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnVal);
                this.columnFVal = new DataColumn("FVal", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFVal);
            }
            
            public ClRow NewClRow() {
                return ((ClRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new ClRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ClRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ClRowChanged != null)) {
                    this.ClRowChanged(this, new ClRowChangeEvent(((ClRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ClRowChanging != null)) {
                    this.ClRowChanging(this, new ClRowChangeEvent(((ClRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ClRowDeleted != null)) {
                    this.ClRowDeleted(this, new ClRowChangeEvent(((ClRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ClRowDeleting != null)) {
                    this.ClRowDeleting(this, new ClRowChangeEvent(((ClRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveClRow(ClRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ClRow : DataRow {
            
            private ClDataTable tableCl;
            
            internal ClRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableCl = ((ClDataTable)(this.Table));
            }
            
            public int Ax0 {
                get {
                    try {
                        return ((int)(this[this.tableCl.Ax0Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCl.Ax0Column] = value;
                }
            }
            
            public int Ax1 {
                get {
                    try {
                        return ((int)(this[this.tableCl.Ax1Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCl.Ax1Column] = value;
                }
            }
            
            public string Val {
                get {
                    try {
                        return ((string)(this[this.tableCl.ValColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCl.ValColumn] = value;
                }
            }
            
            public string FVal {
                get {
                    try {
                        return ((string)(this[this.tableCl.FValColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCl.FValColumn] = value;
                }
            }
            
            public bool IsAx0Null() {
                return this.IsNull(this.tableCl.Ax0Column);
            }
            
            public void SetAx0Null() {
                this[this.tableCl.Ax0Column] = System.Convert.DBNull;
            }
            
            public bool IsAx1Null() {
                return this.IsNull(this.tableCl.Ax1Column);
            }
            
            public void SetAx1Null() {
                this[this.tableCl.Ax1Column] = System.Convert.DBNull;
            }
            
            public bool IsValNull() {
                return this.IsNull(this.tableCl.ValColumn);
            }
            
            public void SetValNull() {
                this[this.tableCl.ValColumn] = System.Convert.DBNull;
            }
            
            public bool IsFValNull() {
                return this.IsNull(this.tableCl.FValColumn);
            }
            
            public void SetFValNull() {
                this[this.tableCl.FValColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ClRowChangeEvent : EventArgs {
            
            private ClRow eventRow;
            
            private DataRowAction eventAction;
            
            public ClRowChangeEvent(ClRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ClRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class Ax0MemDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnPos;
            
            private DataColumn columnMPos;
            
            private DataColumn columnUName;
            
            private DataColumn columnName;
            
            private DataColumn columnCCnt;
            
            private DataColumn columnLvl;
            
            internal Ax0MemDataTable() : 
                    base("Ax0Mem") {
                this.InitClass();
            }
            
            internal Ax0MemDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn PosColumn {
                get {
                    return this.columnPos;
                }
            }
            
            internal DataColumn MPosColumn {
                get {
                    return this.columnMPos;
                }
            }
            
            internal DataColumn UNameColumn {
                get {
                    return this.columnUName;
                }
            }
            
            internal DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            internal DataColumn CCntColumn {
                get {
                    return this.columnCCnt;
                }
            }
            
            internal DataColumn LvlColumn {
                get {
                    return this.columnLvl;
                }
            }
            
            public Ax0MemRow this[int index] {
                get {
                    return ((Ax0MemRow)(this.Rows[index]));
                }
            }
            
            public event Ax0MemRowChangeEventHandler Ax0MemRowChanged;
            
            public event Ax0MemRowChangeEventHandler Ax0MemRowChanging;
            
            public event Ax0MemRowChangeEventHandler Ax0MemRowDeleted;
            
            public event Ax0MemRowChangeEventHandler Ax0MemRowDeleting;
            
            public void AddAx0MemRow(Ax0MemRow row) {
                this.Rows.Add(row);
            }
            
            public Ax0MemRow AddAx0MemRow(int Pos, int MPos, string UName, string Name, short CCnt, System.Byte Lvl) {
                Ax0MemRow rowAx0MemRow = ((Ax0MemRow)(this.NewRow()));
                rowAx0MemRow.ItemArray = new object[] {
                        Pos,
                        MPos,
                        UName,
                        Name,
                        CCnt,
                        Lvl};
                this.Rows.Add(rowAx0MemRow);
                return rowAx0MemRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                Ax0MemDataTable cln = ((Ax0MemDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new Ax0MemDataTable();
            }
            
            internal void InitVars() {
                this.columnPos = this.Columns["Pos"];
                this.columnMPos = this.Columns["MPos"];
                this.columnUName = this.Columns["UName"];
                this.columnName = this.Columns["Name"];
                this.columnCCnt = this.Columns["CCnt"];
                this.columnLvl = this.Columns["Lvl"];
            }
            
            private void InitClass() {
                this.columnPos = new DataColumn("Pos", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPos);
                this.columnMPos = new DataColumn("MPos", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMPos);
                this.columnUName = new DataColumn("UName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUName);
                this.columnName = new DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnName);
                this.columnCCnt = new DataColumn("CCnt", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCCnt);
                this.columnLvl = new DataColumn("Lvl", typeof(System.Byte), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLvl);
            }
            
            public Ax0MemRow NewAx0MemRow() {
                return ((Ax0MemRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new Ax0MemRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(Ax0MemRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Ax0MemRowChanged != null)) {
                    this.Ax0MemRowChanged(this, new Ax0MemRowChangeEvent(((Ax0MemRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Ax0MemRowChanging != null)) {
                    this.Ax0MemRowChanging(this, new Ax0MemRowChangeEvent(((Ax0MemRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Ax0MemRowDeleted != null)) {
                    this.Ax0MemRowDeleted(this, new Ax0MemRowChangeEvent(((Ax0MemRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Ax0MemRowDeleting != null)) {
                    this.Ax0MemRowDeleting(this, new Ax0MemRowChangeEvent(((Ax0MemRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveAx0MemRow(Ax0MemRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class Ax0MemRow : DataRow {
            
            private Ax0MemDataTable tableAx0Mem;
            
            internal Ax0MemRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableAx0Mem = ((Ax0MemDataTable)(this.Table));
            }
            
            public int Pos {
                get {
                    try {
                        return ((int)(this[this.tableAx0Mem.PosColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAx0Mem.PosColumn] = value;
                }
            }
            
            public int MPos {
                get {
                    try {
                        return ((int)(this[this.tableAx0Mem.MPosColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAx0Mem.MPosColumn] = value;
                }
            }
            
            public string UName {
                get {
                    try {
                        return ((string)(this[this.tableAx0Mem.UNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAx0Mem.UNameColumn] = value;
                }
            }
            
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableAx0Mem.NameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAx0Mem.NameColumn] = value;
                }
            }
            
            public short CCnt {
                get {
                    try {
                        return ((short)(this[this.tableAx0Mem.CCntColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAx0Mem.CCntColumn] = value;
                }
            }
            
            public System.Byte Lvl {
                get {
                    try {
                        return ((System.Byte)(this[this.tableAx0Mem.LvlColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAx0Mem.LvlColumn] = value;
                }
            }
            
            public bool IsPosNull() {
                return this.IsNull(this.tableAx0Mem.PosColumn);
            }
            
            public void SetPosNull() {
                this[this.tableAx0Mem.PosColumn] = System.Convert.DBNull;
            }
            
            public bool IsMPosNull() {
                return this.IsNull(this.tableAx0Mem.MPosColumn);
            }
            
            public void SetMPosNull() {
                this[this.tableAx0Mem.MPosColumn] = System.Convert.DBNull;
            }
            
            public bool IsUNameNull() {
                return this.IsNull(this.tableAx0Mem.UNameColumn);
            }
            
            public void SetUNameNull() {
                this[this.tableAx0Mem.UNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsNameNull() {
                return this.IsNull(this.tableAx0Mem.NameColumn);
            }
            
            public void SetNameNull() {
                this[this.tableAx0Mem.NameColumn] = System.Convert.DBNull;
            }
            
            public bool IsCCntNull() {
                return this.IsNull(this.tableAx0Mem.CCntColumn);
            }
            
            public void SetCCntNull() {
                this[this.tableAx0Mem.CCntColumn] = System.Convert.DBNull;
            }
            
            public bool IsLvlNull() {
                return this.IsNull(this.tableAx0Mem.LvlColumn);
            }
            
            public void SetLvlNull() {
                this[this.tableAx0Mem.LvlColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class Ax0MemRowChangeEvent : EventArgs {
            
            private Ax0MemRow eventRow;
            
            private DataRowAction eventAction;
            
            public Ax0MemRowChangeEvent(Ax0MemRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public Ax0MemRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class Ax1MemDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnPos;
            
            private DataColumn columnMPos;
            
            private DataColumn columnUName;
            
            private DataColumn columnName;
            
            private DataColumn columnCCnt;
            
            private DataColumn columnLvl;
            
            internal Ax1MemDataTable() : 
                    base("Ax1Mem") {
                this.InitClass();
            }
            
            internal Ax1MemDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn PosColumn {
                get {
                    return this.columnPos;
                }
            }
            
            internal DataColumn MPosColumn {
                get {
                    return this.columnMPos;
                }
            }
            
            internal DataColumn UNameColumn {
                get {
                    return this.columnUName;
                }
            }
            
            internal DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            internal DataColumn CCntColumn {
                get {
                    return this.columnCCnt;
                }
            }
            
            internal DataColumn LvlColumn {
                get {
                    return this.columnLvl;
                }
            }
            
            public Ax1MemRow this[int index] {
                get {
                    return ((Ax1MemRow)(this.Rows[index]));
                }
            }
            
            public event Ax1MemRowChangeEventHandler Ax1MemRowChanged;
            
            public event Ax1MemRowChangeEventHandler Ax1MemRowChanging;
            
            public event Ax1MemRowChangeEventHandler Ax1MemRowDeleted;
            
            public event Ax1MemRowChangeEventHandler Ax1MemRowDeleting;
            
            public void AddAx1MemRow(Ax1MemRow row) {
                this.Rows.Add(row);
            }
            
            public Ax1MemRow AddAx1MemRow(int Pos, int MPos, string UName, string Name, short CCnt, System.Byte Lvl) {
                Ax1MemRow rowAx1MemRow = ((Ax1MemRow)(this.NewRow()));
                rowAx1MemRow.ItemArray = new object[] {
                        Pos,
                        MPos,
                        UName,
                        Name,
                        CCnt,
                        Lvl};
                this.Rows.Add(rowAx1MemRow);
                return rowAx1MemRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                Ax1MemDataTable cln = ((Ax1MemDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new Ax1MemDataTable();
            }
            
            internal void InitVars() {
                this.columnPos = this.Columns["Pos"];
                this.columnMPos = this.Columns["MPos"];
                this.columnUName = this.Columns["UName"];
                this.columnName = this.Columns["Name"];
                this.columnCCnt = this.Columns["CCnt"];
                this.columnLvl = this.Columns["Lvl"];
            }
            
            private void InitClass() {
                this.columnPos = new DataColumn("Pos", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPos);
                this.columnMPos = new DataColumn("MPos", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMPos);
                this.columnUName = new DataColumn("UName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUName);
                this.columnName = new DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnName);
                this.columnCCnt = new DataColumn("CCnt", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCCnt);
                this.columnLvl = new DataColumn("Lvl", typeof(System.Byte), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLvl);
            }
            
            public Ax1MemRow NewAx1MemRow() {
                return ((Ax1MemRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new Ax1MemRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(Ax1MemRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Ax1MemRowChanged != null)) {
                    this.Ax1MemRowChanged(this, new Ax1MemRowChangeEvent(((Ax1MemRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Ax1MemRowChanging != null)) {
                    this.Ax1MemRowChanging(this, new Ax1MemRowChangeEvent(((Ax1MemRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Ax1MemRowDeleted != null)) {
                    this.Ax1MemRowDeleted(this, new Ax1MemRowChangeEvent(((Ax1MemRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Ax1MemRowDeleting != null)) {
                    this.Ax1MemRowDeleting(this, new Ax1MemRowChangeEvent(((Ax1MemRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveAx1MemRow(Ax1MemRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class Ax1MemRow : DataRow {
            
            private Ax1MemDataTable tableAx1Mem;
            
            internal Ax1MemRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableAx1Mem = ((Ax1MemDataTable)(this.Table));
            }
            
            public int Pos {
                get {
                    try {
                        return ((int)(this[this.tableAx1Mem.PosColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAx1Mem.PosColumn] = value;
                }
            }
            
            public int MPos {
                get {
                    try {
                        return ((int)(this[this.tableAx1Mem.MPosColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAx1Mem.MPosColumn] = value;
                }
            }
            
            public string UName {
                get {
                    try {
                        return ((string)(this[this.tableAx1Mem.UNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAx1Mem.UNameColumn] = value;
                }
            }
            
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableAx1Mem.NameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAx1Mem.NameColumn] = value;
                }
            }
            
            public short CCnt {
                get {
                    try {
                        return ((short)(this[this.tableAx1Mem.CCntColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAx1Mem.CCntColumn] = value;
                }
            }
            
            public System.Byte Lvl {
                get {
                    try {
                        return ((System.Byte)(this[this.tableAx1Mem.LvlColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAx1Mem.LvlColumn] = value;
                }
            }
            
            public bool IsPosNull() {
                return this.IsNull(this.tableAx1Mem.PosColumn);
            }
            
            public void SetPosNull() {
                this[this.tableAx1Mem.PosColumn] = System.Convert.DBNull;
            }
            
            public bool IsMPosNull() {
                return this.IsNull(this.tableAx1Mem.MPosColumn);
            }
            
            public void SetMPosNull() {
                this[this.tableAx1Mem.MPosColumn] = System.Convert.DBNull;
            }
            
            public bool IsUNameNull() {
                return this.IsNull(this.tableAx1Mem.UNameColumn);
            }
            
            public void SetUNameNull() {
                this[this.tableAx1Mem.UNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsNameNull() {
                return this.IsNull(this.tableAx1Mem.NameColumn);
            }
            
            public void SetNameNull() {
                this[this.tableAx1Mem.NameColumn] = System.Convert.DBNull;
            }
            
            public bool IsCCntNull() {
                return this.IsNull(this.tableAx1Mem.CCntColumn);
            }
            
            public void SetCCntNull() {
                this[this.tableAx1Mem.CCntColumn] = System.Convert.DBNull;
            }
            
            public bool IsLvlNull() {
                return this.IsNull(this.tableAx1Mem.LvlColumn);
            }
            
            public void SetLvlNull() {
                this[this.tableAx1Mem.LvlColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class Ax1MemRowChangeEvent : EventArgs {
            
            private Ax1MemRow eventRow;
            
            private DataRowAction eventAction;
            
            public Ax1MemRowChangeEvent(Ax1MemRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public Ax1MemRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CellsetMetaDataDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnAx0PosCount;
            
            private DataColumn columnAx0MemCount;
            
            private DataColumn columnAx1PosCount;
            
            private DataColumn columnAx1MemCount;
            
            internal CellsetMetaDataDataTable() : 
                    base("CellsetMetaData") {
                this.InitClass();
            }
            
            internal CellsetMetaDataDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn Ax0PosCountColumn {
                get {
                    return this.columnAx0PosCount;
                }
            }
            
            internal DataColumn Ax0MemCountColumn {
                get {
                    return this.columnAx0MemCount;
                }
            }
            
            internal DataColumn Ax1PosCountColumn {
                get {
                    return this.columnAx1PosCount;
                }
            }
            
            internal DataColumn Ax1MemCountColumn {
                get {
                    return this.columnAx1MemCount;
                }
            }
            
            public CellsetMetaDataRow this[int index] {
                get {
                    return ((CellsetMetaDataRow)(this.Rows[index]));
                }
            }
            
            public event CellsetMetaDataRowChangeEventHandler CellsetMetaDataRowChanged;
            
            public event CellsetMetaDataRowChangeEventHandler CellsetMetaDataRowChanging;
            
            public event CellsetMetaDataRowChangeEventHandler CellsetMetaDataRowDeleted;
            
            public event CellsetMetaDataRowChangeEventHandler CellsetMetaDataRowDeleting;
            
            public void AddCellsetMetaDataRow(CellsetMetaDataRow row) {
                this.Rows.Add(row);
            }
            
            public CellsetMetaDataRow AddCellsetMetaDataRow(int Ax0PosCount, short Ax0MemCount, int Ax1PosCount, short Ax1MemCount) {
                CellsetMetaDataRow rowCellsetMetaDataRow = ((CellsetMetaDataRow)(this.NewRow()));
                rowCellsetMetaDataRow.ItemArray = new object[] {
                        Ax0PosCount,
                        Ax0MemCount,
                        Ax1PosCount,
                        Ax1MemCount};
                this.Rows.Add(rowCellsetMetaDataRow);
                return rowCellsetMetaDataRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                CellsetMetaDataDataTable cln = ((CellsetMetaDataDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new CellsetMetaDataDataTable();
            }
            
            internal void InitVars() {
                this.columnAx0PosCount = this.Columns["Ax0PosCount"];
                this.columnAx0MemCount = this.Columns["Ax0MemCount"];
                this.columnAx1PosCount = this.Columns["Ax1PosCount"];
                this.columnAx1MemCount = this.Columns["Ax1MemCount"];
            }
            
            private void InitClass() {
                this.columnAx0PosCount = new DataColumn("Ax0PosCount", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAx0PosCount);
                this.columnAx0MemCount = new DataColumn("Ax0MemCount", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAx0MemCount);
                this.columnAx1PosCount = new DataColumn("Ax1PosCount", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAx1PosCount);
                this.columnAx1MemCount = new DataColumn("Ax1MemCount", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAx1MemCount);
            }
            
            public CellsetMetaDataRow NewCellsetMetaDataRow() {
                return ((CellsetMetaDataRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new CellsetMetaDataRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(CellsetMetaDataRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CellsetMetaDataRowChanged != null)) {
                    this.CellsetMetaDataRowChanged(this, new CellsetMetaDataRowChangeEvent(((CellsetMetaDataRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CellsetMetaDataRowChanging != null)) {
                    this.CellsetMetaDataRowChanging(this, new CellsetMetaDataRowChangeEvent(((CellsetMetaDataRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CellsetMetaDataRowDeleted != null)) {
                    this.CellsetMetaDataRowDeleted(this, new CellsetMetaDataRowChangeEvent(((CellsetMetaDataRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CellsetMetaDataRowDeleting != null)) {
                    this.CellsetMetaDataRowDeleting(this, new CellsetMetaDataRowChangeEvent(((CellsetMetaDataRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveCellsetMetaDataRow(CellsetMetaDataRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CellsetMetaDataRow : DataRow {
            
            private CellsetMetaDataDataTable tableCellsetMetaData;
            
            internal CellsetMetaDataRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableCellsetMetaData = ((CellsetMetaDataDataTable)(this.Table));
            }
            
            public int Ax0PosCount {
                get {
                    try {
                        return ((int)(this[this.tableCellsetMetaData.Ax0PosCountColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCellsetMetaData.Ax0PosCountColumn] = value;
                }
            }
            
            public short Ax0MemCount {
                get {
                    try {
                        return ((short)(this[this.tableCellsetMetaData.Ax0MemCountColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCellsetMetaData.Ax0MemCountColumn] = value;
                }
            }
            
            public int Ax1PosCount {
                get {
                    try {
                        return ((int)(this[this.tableCellsetMetaData.Ax1PosCountColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCellsetMetaData.Ax1PosCountColumn] = value;
                }
            }
            
            public short Ax1MemCount {
                get {
                    try {
                        return ((short)(this[this.tableCellsetMetaData.Ax1MemCountColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCellsetMetaData.Ax1MemCountColumn] = value;
                }
            }
            
            public bool IsAx0PosCountNull() {
                return this.IsNull(this.tableCellsetMetaData.Ax0PosCountColumn);
            }
            
            public void SetAx0PosCountNull() {
                this[this.tableCellsetMetaData.Ax0PosCountColumn] = System.Convert.DBNull;
            }
            
            public bool IsAx0MemCountNull() {
                return this.IsNull(this.tableCellsetMetaData.Ax0MemCountColumn);
            }
            
            public void SetAx0MemCountNull() {
                this[this.tableCellsetMetaData.Ax0MemCountColumn] = System.Convert.DBNull;
            }
            
            public bool IsAx1PosCountNull() {
                return this.IsNull(this.tableCellsetMetaData.Ax1PosCountColumn);
            }
            
            public void SetAx1PosCountNull() {
                this[this.tableCellsetMetaData.Ax1PosCountColumn] = System.Convert.DBNull;
            }
            
            public bool IsAx1MemCountNull() {
                return this.IsNull(this.tableCellsetMetaData.Ax1MemCountColumn);
            }
            
            public void SetAx1MemCountNull() {
                this[this.tableCellsetMetaData.Ax1MemCountColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CellsetMetaDataRowChangeEvent : EventArgs {
            
            private CellsetMetaDataRow eventRow;
            
            private DataRowAction eventAction;
            
            public CellsetMetaDataRowChangeEvent(CellsetMetaDataRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public CellsetMetaDataRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
