//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace FI.Common.Data.Auto {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("OlapReportData")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class OlapReportData : global::System.Data.DataSet {
        
        private HeaderDataTable tableHeader;
        
        private DimensionsDataTable tableDimensions;
        
        private HierarchiesDataTable tableHierarchies;
        
        private LevelsDataTable tableLevels;
        
        private MembersDataTable tableMembers;
        
        private CalculatedMembersDataTable tableCalculatedMembers;
        
        private OrderTupleDataTable tableOrderTuple;
        
        private Link_Mem_HierDataTable tableLink_Mem_Hier;
        
        private Link_Mem_LevelDataTable tableLink_Mem_Level;
        
        private Link_Mem_MemDataTable tableLink_Mem_Mem;
        
        private OpenNodesDataTable tableOpenNodes;
        
        private global::System.Data.DataRelation relationDimensionsHierarchies;
        
        private global::System.Data.DataRelation relationHierarchiesLevels;
        
        private global::System.Data.DataRelation relationHierarchiesMembers;
        
        private global::System.Data.DataRelation relationMembersCalculatedMembers;
        
        private global::System.Data.DataRelation relationMembersLink_Mem_Hier;
        
        private global::System.Data.DataRelation relationMembersLink_Mem_Level;
        
        private global::System.Data.DataRelation relationMembersLink_Mem_Mem;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public OlapReportData() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected OlapReportData(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["Header"] != null)) {
                    base.Tables.Add(new HeaderDataTable(ds.Tables["Header"]));
                }
                if ((ds.Tables["Dimensions"] != null)) {
                    base.Tables.Add(new DimensionsDataTable(ds.Tables["Dimensions"]));
                }
                if ((ds.Tables["Hierarchies"] != null)) {
                    base.Tables.Add(new HierarchiesDataTable(ds.Tables["Hierarchies"]));
                }
                if ((ds.Tables["Levels"] != null)) {
                    base.Tables.Add(new LevelsDataTable(ds.Tables["Levels"]));
                }
                if ((ds.Tables["Members"] != null)) {
                    base.Tables.Add(new MembersDataTable(ds.Tables["Members"]));
                }
                if ((ds.Tables["CalculatedMembers"] != null)) {
                    base.Tables.Add(new CalculatedMembersDataTable(ds.Tables["CalculatedMembers"]));
                }
                if ((ds.Tables["OrderTuple"] != null)) {
                    base.Tables.Add(new OrderTupleDataTable(ds.Tables["OrderTuple"]));
                }
                if ((ds.Tables["Link_Mem_Hier"] != null)) {
                    base.Tables.Add(new Link_Mem_HierDataTable(ds.Tables["Link_Mem_Hier"]));
                }
                if ((ds.Tables["Link_Mem_Level"] != null)) {
                    base.Tables.Add(new Link_Mem_LevelDataTable(ds.Tables["Link_Mem_Level"]));
                }
                if ((ds.Tables["Link_Mem_Mem"] != null)) {
                    base.Tables.Add(new Link_Mem_MemDataTable(ds.Tables["Link_Mem_Mem"]));
                }
                if ((ds.Tables["OpenNodes"] != null)) {
                    base.Tables.Add(new OpenNodesDataTable(ds.Tables["OpenNodes"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public HeaderDataTable Header {
            get {
                return this.tableHeader;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DimensionsDataTable Dimensions {
            get {
                return this.tableDimensions;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public HierarchiesDataTable Hierarchies {
            get {
                return this.tableHierarchies;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LevelsDataTable Levels {
            get {
                return this.tableLevels;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MembersDataTable Members {
            get {
                return this.tableMembers;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CalculatedMembersDataTable CalculatedMembers {
            get {
                return this.tableCalculatedMembers;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public OrderTupleDataTable OrderTuple {
            get {
                return this.tableOrderTuple;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Link_Mem_HierDataTable Link_Mem_Hier {
            get {
                return this.tableLink_Mem_Hier;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Link_Mem_LevelDataTable Link_Mem_Level {
            get {
                return this.tableLink_Mem_Level;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Link_Mem_MemDataTable Link_Mem_Mem {
            get {
                return this.tableLink_Mem_Mem;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public OpenNodesDataTable OpenNodes {
            get {
                return this.tableOpenNodes;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            OlapReportData cln = ((OlapReportData)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Header"] != null)) {
                    base.Tables.Add(new HeaderDataTable(ds.Tables["Header"]));
                }
                if ((ds.Tables["Dimensions"] != null)) {
                    base.Tables.Add(new DimensionsDataTable(ds.Tables["Dimensions"]));
                }
                if ((ds.Tables["Hierarchies"] != null)) {
                    base.Tables.Add(new HierarchiesDataTable(ds.Tables["Hierarchies"]));
                }
                if ((ds.Tables["Levels"] != null)) {
                    base.Tables.Add(new LevelsDataTable(ds.Tables["Levels"]));
                }
                if ((ds.Tables["Members"] != null)) {
                    base.Tables.Add(new MembersDataTable(ds.Tables["Members"]));
                }
                if ((ds.Tables["CalculatedMembers"] != null)) {
                    base.Tables.Add(new CalculatedMembersDataTable(ds.Tables["CalculatedMembers"]));
                }
                if ((ds.Tables["OrderTuple"] != null)) {
                    base.Tables.Add(new OrderTupleDataTable(ds.Tables["OrderTuple"]));
                }
                if ((ds.Tables["Link_Mem_Hier"] != null)) {
                    base.Tables.Add(new Link_Mem_HierDataTable(ds.Tables["Link_Mem_Hier"]));
                }
                if ((ds.Tables["Link_Mem_Level"] != null)) {
                    base.Tables.Add(new Link_Mem_LevelDataTable(ds.Tables["Link_Mem_Level"]));
                }
                if ((ds.Tables["Link_Mem_Mem"] != null)) {
                    base.Tables.Add(new Link_Mem_MemDataTable(ds.Tables["Link_Mem_Mem"]));
                }
                if ((ds.Tables["OpenNodes"] != null)) {
                    base.Tables.Add(new OpenNodesDataTable(ds.Tables["OpenNodes"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableHeader = ((HeaderDataTable)(base.Tables["Header"]));
            if ((initTable == true)) {
                if ((this.tableHeader != null)) {
                    this.tableHeader.InitVars();
                }
            }
            this.tableDimensions = ((DimensionsDataTable)(base.Tables["Dimensions"]));
            if ((initTable == true)) {
                if ((this.tableDimensions != null)) {
                    this.tableDimensions.InitVars();
                }
            }
            this.tableHierarchies = ((HierarchiesDataTable)(base.Tables["Hierarchies"]));
            if ((initTable == true)) {
                if ((this.tableHierarchies != null)) {
                    this.tableHierarchies.InitVars();
                }
            }
            this.tableLevels = ((LevelsDataTable)(base.Tables["Levels"]));
            if ((initTable == true)) {
                if ((this.tableLevels != null)) {
                    this.tableLevels.InitVars();
                }
            }
            this.tableMembers = ((MembersDataTable)(base.Tables["Members"]));
            if ((initTable == true)) {
                if ((this.tableMembers != null)) {
                    this.tableMembers.InitVars();
                }
            }
            this.tableCalculatedMembers = ((CalculatedMembersDataTable)(base.Tables["CalculatedMembers"]));
            if ((initTable == true)) {
                if ((this.tableCalculatedMembers != null)) {
                    this.tableCalculatedMembers.InitVars();
                }
            }
            this.tableOrderTuple = ((OrderTupleDataTable)(base.Tables["OrderTuple"]));
            if ((initTable == true)) {
                if ((this.tableOrderTuple != null)) {
                    this.tableOrderTuple.InitVars();
                }
            }
            this.tableLink_Mem_Hier = ((Link_Mem_HierDataTable)(base.Tables["Link_Mem_Hier"]));
            if ((initTable == true)) {
                if ((this.tableLink_Mem_Hier != null)) {
                    this.tableLink_Mem_Hier.InitVars();
                }
            }
            this.tableLink_Mem_Level = ((Link_Mem_LevelDataTable)(base.Tables["Link_Mem_Level"]));
            if ((initTable == true)) {
                if ((this.tableLink_Mem_Level != null)) {
                    this.tableLink_Mem_Level.InitVars();
                }
            }
            this.tableLink_Mem_Mem = ((Link_Mem_MemDataTable)(base.Tables["Link_Mem_Mem"]));
            if ((initTable == true)) {
                if ((this.tableLink_Mem_Mem != null)) {
                    this.tableLink_Mem_Mem.InitVars();
                }
            }
            this.tableOpenNodes = ((OpenNodesDataTable)(base.Tables["OpenNodes"]));
            if ((initTable == true)) {
                if ((this.tableOpenNodes != null)) {
                    this.tableOpenNodes.InitVars();
                }
            }
            this.relationDimensionsHierarchies = this.Relations["DimensionsHierarchies"];
            this.relationHierarchiesLevels = this.Relations["HierarchiesLevels"];
            this.relationHierarchiesMembers = this.Relations["HierarchiesMembers"];
            this.relationMembersCalculatedMembers = this.Relations["MembersCalculatedMembers"];
            this.relationMembersLink_Mem_Hier = this.Relations["MembersLink_Mem_Hier"];
            this.relationMembersLink_Mem_Level = this.Relations["MembersLink_Mem_Level"];
            this.relationMembersLink_Mem_Mem = this.Relations["MembersLink_Mem_Mem"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "OlapReportData";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/OlapReportData.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableHeader = new HeaderDataTable();
            base.Tables.Add(this.tableHeader);
            this.tableDimensions = new DimensionsDataTable();
            base.Tables.Add(this.tableDimensions);
            this.tableHierarchies = new HierarchiesDataTable();
            base.Tables.Add(this.tableHierarchies);
            this.tableLevels = new LevelsDataTable();
            base.Tables.Add(this.tableLevels);
            this.tableMembers = new MembersDataTable();
            base.Tables.Add(this.tableMembers);
            this.tableCalculatedMembers = new CalculatedMembersDataTable();
            base.Tables.Add(this.tableCalculatedMembers);
            this.tableOrderTuple = new OrderTupleDataTable();
            base.Tables.Add(this.tableOrderTuple);
            this.tableLink_Mem_Hier = new Link_Mem_HierDataTable();
            base.Tables.Add(this.tableLink_Mem_Hier);
            this.tableLink_Mem_Level = new Link_Mem_LevelDataTable();
            base.Tables.Add(this.tableLink_Mem_Level);
            this.tableLink_Mem_Mem = new Link_Mem_MemDataTable();
            base.Tables.Add(this.tableLink_Mem_Mem);
            this.tableOpenNodes = new OpenNodesDataTable();
            base.Tables.Add(this.tableOpenNodes);
            global::System.Data.ForeignKeyConstraint fkc;
            fkc = new global::System.Data.ForeignKeyConstraint("DimensionsHierarchies", new global::System.Data.DataColumn[] {
                        this.tableDimensions.IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableHierarchies.DimIdColumn});
            this.tableHierarchies.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("HierarchiesLevels", new global::System.Data.DataColumn[] {
                        this.tableHierarchies.IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableLevels.HierIdColumn});
            this.tableLevels.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("HierarchiesMembers", new global::System.Data.DataColumn[] {
                        this.tableHierarchies.IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableMembers.HierIdColumn});
            this.tableMembers.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("MembersCalculatedMembers", new global::System.Data.DataColumn[] {
                        this.tableMembers.IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableCalculatedMembers.MemberIdColumn});
            this.tableCalculatedMembers.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("MembersLink_Mem_Hier", new global::System.Data.DataColumn[] {
                        this.tableMembers.IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableLink_Mem_Hier.MemIdColumn});
            this.tableLink_Mem_Hier.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("MembersLink_Mem_Level", new global::System.Data.DataColumn[] {
                        this.tableMembers.IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableLink_Mem_Level.MemIdColumn});
            this.tableLink_Mem_Level.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("MembersLink_Mem_Mem", new global::System.Data.DataColumn[] {
                        this.tableMembers.IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableLink_Mem_Mem.ParentMemIdColumn});
            this.tableLink_Mem_Mem.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            this.relationDimensionsHierarchies = new global::System.Data.DataRelation("DimensionsHierarchies", new global::System.Data.DataColumn[] {
                        this.tableDimensions.IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableHierarchies.DimIdColumn}, false);
            this.Relations.Add(this.relationDimensionsHierarchies);
            this.relationHierarchiesLevels = new global::System.Data.DataRelation("HierarchiesLevels", new global::System.Data.DataColumn[] {
                        this.tableHierarchies.IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableLevels.HierIdColumn}, false);
            this.Relations.Add(this.relationHierarchiesLevels);
            this.relationHierarchiesMembers = new global::System.Data.DataRelation("HierarchiesMembers", new global::System.Data.DataColumn[] {
                        this.tableHierarchies.IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableMembers.HierIdColumn}, false);
            this.Relations.Add(this.relationHierarchiesMembers);
            this.relationMembersCalculatedMembers = new global::System.Data.DataRelation("MembersCalculatedMembers", new global::System.Data.DataColumn[] {
                        this.tableMembers.IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableCalculatedMembers.MemberIdColumn}, false);
            this.Relations.Add(this.relationMembersCalculatedMembers);
            this.relationMembersLink_Mem_Hier = new global::System.Data.DataRelation("MembersLink_Mem_Hier", new global::System.Data.DataColumn[] {
                        this.tableMembers.IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableLink_Mem_Hier.MemIdColumn}, false);
            this.Relations.Add(this.relationMembersLink_Mem_Hier);
            this.relationMembersLink_Mem_Level = new global::System.Data.DataRelation("MembersLink_Mem_Level", new global::System.Data.DataColumn[] {
                        this.tableMembers.IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableLink_Mem_Level.MemIdColumn}, false);
            this.Relations.Add(this.relationMembersLink_Mem_Level);
            this.relationMembersLink_Mem_Mem = new global::System.Data.DataRelation("MembersLink_Mem_Mem", new global::System.Data.DataColumn[] {
                        this.tableMembers.IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableLink_Mem_Mem.ParentMemIdColumn}, false);
            this.Relations.Add(this.relationMembersLink_Mem_Mem);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeHeader() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDimensions() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeHierarchies() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLevels() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeMembers() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCalculatedMembers() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeOrderTuple() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLink_Mem_Hier() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLink_Mem_Level() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLink_Mem_Mem() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeOpenNodes() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            OlapReportData ds = new OlapReportData();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void HeaderRowChangeEventHandler(object sender, HeaderRowChangeEvent e);
        
        public delegate void DimensionsRowChangeEventHandler(object sender, DimensionsRowChangeEvent e);
        
        public delegate void HierarchiesRowChangeEventHandler(object sender, HierarchiesRowChangeEvent e);
        
        public delegate void LevelsRowChangeEventHandler(object sender, LevelsRowChangeEvent e);
        
        public delegate void MembersRowChangeEventHandler(object sender, MembersRowChangeEvent e);
        
        public delegate void CalculatedMembersRowChangeEventHandler(object sender, CalculatedMembersRowChangeEvent e);
        
        public delegate void OrderTupleRowChangeEventHandler(object sender, OrderTupleRowChangeEvent e);
        
        public delegate void Link_Mem_HierRowChangeEventHandler(object sender, Link_Mem_HierRowChangeEvent e);
        
        public delegate void Link_Mem_LevelRowChangeEventHandler(object sender, Link_Mem_LevelRowChangeEvent e);
        
        public delegate void Link_Mem_MemRowChangeEventHandler(object sender, Link_Mem_MemRowChangeEvent e);
        
        public delegate void OpenNodesRowChangeEventHandler(object sender, OpenNodesRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class HeaderDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnRptId;
            
            private global::System.Data.DataColumn columnRptOwnerId;
            
            private global::System.Data.DataColumn columnParentRptId;
            
            private global::System.Data.DataColumn columnRptName;
            
            private global::System.Data.DataColumn columnRptDescription;
            
            private global::System.Data.DataColumn columnRptSchemaId;
            
            private global::System.Data.DataColumn columnRptSchemaName;
            
            private global::System.Data.DataColumn columnRptSchemaServer;
            
            private global::System.Data.DataColumn columnRptSchemaDatabase;
            
            private global::System.Data.DataColumn columnRptOrder;
            
            private global::System.Data.DataColumn columnRptTimeRangeEnabled;
            
            private global::System.Data.DataColumn columnRptTimeRangePrompt;
            
            private global::System.Data.DataColumn columnRptTimeRangeStart;
            
            private global::System.Data.DataColumn columnRptTimeRangeEnd;
            
            private global::System.Data.DataColumn columnRptTimeRangeLevel;
            
            private global::System.Data.DataColumn columnRptPercentageType;
            
            private global::System.Data.DataColumn columnRptPercentageDim;
            
            private global::System.Data.DataColumn columnRptPercentageMeasure;
            
            private global::System.Data.DataColumn columnRptShowRowsOption;
            
            private global::System.Data.DataColumn columnRptShowColumnsOption;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HeaderDataTable() {
                this.TableName = "Header";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal HeaderDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected HeaderDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RptIdColumn {
                get {
                    return this.columnRptId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RptOwnerIdColumn {
                get {
                    return this.columnRptOwnerId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParentRptIdColumn {
                get {
                    return this.columnParentRptId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RptNameColumn {
                get {
                    return this.columnRptName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RptDescriptionColumn {
                get {
                    return this.columnRptDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RptSchemaIdColumn {
                get {
                    return this.columnRptSchemaId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RptSchemaNameColumn {
                get {
                    return this.columnRptSchemaName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RptSchemaServerColumn {
                get {
                    return this.columnRptSchemaServer;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RptSchemaDatabaseColumn {
                get {
                    return this.columnRptSchemaDatabase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RptOrderColumn {
                get {
                    return this.columnRptOrder;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RptTimeRangeEnabledColumn {
                get {
                    return this.columnRptTimeRangeEnabled;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RptTimeRangePromptColumn {
                get {
                    return this.columnRptTimeRangePrompt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RptTimeRangeStartColumn {
                get {
                    return this.columnRptTimeRangeStart;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RptTimeRangeEndColumn {
                get {
                    return this.columnRptTimeRangeEnd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RptTimeRangeLevelColumn {
                get {
                    return this.columnRptTimeRangeLevel;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RptPercentageTypeColumn {
                get {
                    return this.columnRptPercentageType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RptPercentageDimColumn {
                get {
                    return this.columnRptPercentageDim;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RptPercentageMeasureColumn {
                get {
                    return this.columnRptPercentageMeasure;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RptShowRowsOptionColumn {
                get {
                    return this.columnRptShowRowsOption;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RptShowColumnsOptionColumn {
                get {
                    return this.columnRptShowColumnsOption;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HeaderRow this[int index] {
                get {
                    return ((HeaderRow)(this.Rows[index]));
                }
            }
            
            public event HeaderRowChangeEventHandler HeaderRowChanging;
            
            public event HeaderRowChangeEventHandler HeaderRowChanged;
            
            public event HeaderRowChangeEventHandler HeaderRowDeleting;
            
            public event HeaderRowChangeEventHandler HeaderRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddHeaderRow(HeaderRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HeaderRow AddHeaderRow(
                        int RptId, 
                        int RptOwnerId, 
                        int ParentRptId, 
                        string RptName, 
                        string RptDescription, 
                        int RptSchemaId, 
                        string RptSchemaName, 
                        string RptSchemaServer, 
                        string RptSchemaDatabase, 
                        string RptOrder, 
                        bool RptTimeRangeEnabled, 
                        bool RptTimeRangePrompt, 
                        string RptTimeRangeStart, 
                        string RptTimeRangeEnd, 
                        string RptTimeRangeLevel, 
                        byte RptPercentageType, 
                        string RptPercentageDim, 
                        string RptPercentageMeasure, 
                        byte RptShowRowsOption, 
                        byte RptShowColumnsOption) {
                HeaderRow rowHeaderRow = ((HeaderRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        RptId,
                        RptOwnerId,
                        ParentRptId,
                        RptName,
                        RptDescription,
                        RptSchemaId,
                        RptSchemaName,
                        RptSchemaServer,
                        RptSchemaDatabase,
                        RptOrder,
                        RptTimeRangeEnabled,
                        RptTimeRangePrompt,
                        RptTimeRangeStart,
                        RptTimeRangeEnd,
                        RptTimeRangeLevel,
                        RptPercentageType,
                        RptPercentageDim,
                        RptPercentageMeasure,
                        RptShowRowsOption,
                        RptShowColumnsOption};
                rowHeaderRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowHeaderRow);
                return rowHeaderRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                HeaderDataTable cln = ((HeaderDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new HeaderDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnRptId = base.Columns["RptId"];
                this.columnRptOwnerId = base.Columns["RptOwnerId"];
                this.columnParentRptId = base.Columns["ParentRptId"];
                this.columnRptName = base.Columns["RptName"];
                this.columnRptDescription = base.Columns["RptDescription"];
                this.columnRptSchemaId = base.Columns["RptSchemaId"];
                this.columnRptSchemaName = base.Columns["RptSchemaName"];
                this.columnRptSchemaServer = base.Columns["RptSchemaServer"];
                this.columnRptSchemaDatabase = base.Columns["RptSchemaDatabase"];
                this.columnRptOrder = base.Columns["RptOrder"];
                this.columnRptTimeRangeEnabled = base.Columns["RptTimeRangeEnabled"];
                this.columnRptTimeRangePrompt = base.Columns["RptTimeRangePrompt"];
                this.columnRptTimeRangeStart = base.Columns["RptTimeRangeStart"];
                this.columnRptTimeRangeEnd = base.Columns["RptTimeRangeEnd"];
                this.columnRptTimeRangeLevel = base.Columns["RptTimeRangeLevel"];
                this.columnRptPercentageType = base.Columns["RptPercentageType"];
                this.columnRptPercentageDim = base.Columns["RptPercentageDim"];
                this.columnRptPercentageMeasure = base.Columns["RptPercentageMeasure"];
                this.columnRptShowRowsOption = base.Columns["RptShowRowsOption"];
                this.columnRptShowColumnsOption = base.Columns["RptShowColumnsOption"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnRptId = new global::System.Data.DataColumn("RptId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRptId);
                this.columnRptOwnerId = new global::System.Data.DataColumn("RptOwnerId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRptOwnerId);
                this.columnParentRptId = new global::System.Data.DataColumn("ParentRptId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParentRptId);
                this.columnRptName = new global::System.Data.DataColumn("RptName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRptName);
                this.columnRptDescription = new global::System.Data.DataColumn("RptDescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRptDescription);
                this.columnRptSchemaId = new global::System.Data.DataColumn("RptSchemaId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRptSchemaId);
                this.columnRptSchemaName = new global::System.Data.DataColumn("RptSchemaName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRptSchemaName);
                this.columnRptSchemaServer = new global::System.Data.DataColumn("RptSchemaServer", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRptSchemaServer);
                this.columnRptSchemaDatabase = new global::System.Data.DataColumn("RptSchemaDatabase", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRptSchemaDatabase);
                this.columnRptOrder = new global::System.Data.DataColumn("RptOrder", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRptOrder);
                this.columnRptTimeRangeEnabled = new global::System.Data.DataColumn("RptTimeRangeEnabled", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRptTimeRangeEnabled);
                this.columnRptTimeRangePrompt = new global::System.Data.DataColumn("RptTimeRangePrompt", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRptTimeRangePrompt);
                this.columnRptTimeRangeStart = new global::System.Data.DataColumn("RptTimeRangeStart", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRptTimeRangeStart);
                this.columnRptTimeRangeEnd = new global::System.Data.DataColumn("RptTimeRangeEnd", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRptTimeRangeEnd);
                this.columnRptTimeRangeLevel = new global::System.Data.DataColumn("RptTimeRangeLevel", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRptTimeRangeLevel);
                this.columnRptPercentageType = new global::System.Data.DataColumn("RptPercentageType", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRptPercentageType);
                this.columnRptPercentageDim = new global::System.Data.DataColumn("RptPercentageDim", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRptPercentageDim);
                this.columnRptPercentageMeasure = new global::System.Data.DataColumn("RptPercentageMeasure", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRptPercentageMeasure);
                this.columnRptShowRowsOption = new global::System.Data.DataColumn("RptShowRowsOption", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRptShowRowsOption);
                this.columnRptShowColumnsOption = new global::System.Data.DataColumn("RptShowColumnsOption", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRptShowColumnsOption);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HeaderRow NewHeaderRow() {
                return ((HeaderRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new HeaderRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(HeaderRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.HeaderRowChanged != null)) {
                    this.HeaderRowChanged(this, new HeaderRowChangeEvent(((HeaderRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.HeaderRowChanging != null)) {
                    this.HeaderRowChanging(this, new HeaderRowChangeEvent(((HeaderRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.HeaderRowDeleted != null)) {
                    this.HeaderRowDeleted(this, new HeaderRowChangeEvent(((HeaderRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.HeaderRowDeleting != null)) {
                    this.HeaderRowDeleting(this, new HeaderRowChangeEvent(((HeaderRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveHeaderRow(HeaderRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                OlapReportData ds = new OlapReportData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "HeaderDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DimensionsDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnId;
            
            private global::System.Data.DataColumn columnUniqueName;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnIsOpen;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DimensionsDataTable() {
                this.TableName = "Dimensions";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DimensionsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DimensionsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IdColumn {
                get {
                    return this.columnId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UniqueNameColumn {
                get {
                    return this.columnUniqueName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsOpenColumn {
                get {
                    return this.columnIsOpen;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DimensionsRow this[int index] {
                get {
                    return ((DimensionsRow)(this.Rows[index]));
                }
            }
            
            public event DimensionsRowChangeEventHandler DimensionsRowChanging;
            
            public event DimensionsRowChangeEventHandler DimensionsRowChanged;
            
            public event DimensionsRowChangeEventHandler DimensionsRowDeleting;
            
            public event DimensionsRowChangeEventHandler DimensionsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDimensionsRow(DimensionsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DimensionsRow AddDimensionsRow(string UniqueName, string Name, bool IsOpen) {
                DimensionsRow rowDimensionsRow = ((DimensionsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        UniqueName,
                        Name,
                        IsOpen};
                rowDimensionsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowDimensionsRow);
                return rowDimensionsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DimensionsRow FindByUniqueName(string UniqueName) {
                return ((DimensionsRow)(this.Rows.Find(new object[] {
                            UniqueName})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                DimensionsDataTable cln = ((DimensionsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new DimensionsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnId = base.Columns["Id"];
                this.columnUniqueName = base.Columns["UniqueName"];
                this.columnName = base.Columns["Name"];
                this.columnIsOpen = base.Columns["IsOpen"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnId = new global::System.Data.DataColumn("Id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnId);
                this.columnUniqueName = new global::System.Data.DataColumn("UniqueName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUniqueName);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnIsOpen = new global::System.Data.DataColumn("IsOpen", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsOpen);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("PK_Dimensions", new global::System.Data.DataColumn[] {
                                this.columnId}, false));
                this.Constraints.Add(new global::System.Data.UniqueConstraint("IX_Dimensions_UN", new global::System.Data.DataColumn[] {
                                this.columnUniqueName}, true));
                this.columnId.AutoIncrement = true;
                this.columnId.AllowDBNull = false;
                this.columnId.Unique = true;
                this.columnUniqueName.AllowDBNull = false;
                this.columnUniqueName.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DimensionsRow NewDimensionsRow() {
                return ((DimensionsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new DimensionsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(DimensionsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DimensionsRowChanged != null)) {
                    this.DimensionsRowChanged(this, new DimensionsRowChangeEvent(((DimensionsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DimensionsRowChanging != null)) {
                    this.DimensionsRowChanging(this, new DimensionsRowChangeEvent(((DimensionsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DimensionsRowDeleted != null)) {
                    this.DimensionsRowDeleted(this, new DimensionsRowChangeEvent(((DimensionsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DimensionsRowDeleting != null)) {
                    this.DimensionsRowDeleting(this, new DimensionsRowChangeEvent(((DimensionsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDimensionsRow(DimensionsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                OlapReportData ds = new OlapReportData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DimensionsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class HierarchiesDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnId;
            
            private global::System.Data.DataColumn columnDimId;
            
            private global::System.Data.DataColumn columnUniqueName;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnIsOpen;
            
            private global::System.Data.DataColumn columnAxis;
            
            private global::System.Data.DataColumn columnAxisPositionOrdinal;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HierarchiesDataTable() {
                this.TableName = "Hierarchies";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal HierarchiesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected HierarchiesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IdColumn {
                get {
                    return this.columnId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DimIdColumn {
                get {
                    return this.columnDimId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UniqueNameColumn {
                get {
                    return this.columnUniqueName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsOpenColumn {
                get {
                    return this.columnIsOpen;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AxisColumn {
                get {
                    return this.columnAxis;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AxisPositionOrdinalColumn {
                get {
                    return this.columnAxisPositionOrdinal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HierarchiesRow this[int index] {
                get {
                    return ((HierarchiesRow)(this.Rows[index]));
                }
            }
            
            public event HierarchiesRowChangeEventHandler HierarchiesRowChanging;
            
            public event HierarchiesRowChangeEventHandler HierarchiesRowChanged;
            
            public event HierarchiesRowChangeEventHandler HierarchiesRowDeleting;
            
            public event HierarchiesRowChangeEventHandler HierarchiesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddHierarchiesRow(HierarchiesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HierarchiesRow AddHierarchiesRow(DimensionsRow parentDimensionsRowByDimensionsHierarchies, string UniqueName, string Name, bool IsOpen, short Axis, short AxisPositionOrdinal) {
                HierarchiesRow rowHierarchiesRow = ((HierarchiesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        UniqueName,
                        Name,
                        IsOpen,
                        Axis,
                        AxisPositionOrdinal};
                if ((parentDimensionsRowByDimensionsHierarchies != null)) {
                    columnValuesArray[1] = parentDimensionsRowByDimensionsHierarchies[0];
                }
                rowHierarchiesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowHierarchiesRow);
                return rowHierarchiesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HierarchiesRow FindByUniqueName(string UniqueName) {
                return ((HierarchiesRow)(this.Rows.Find(new object[] {
                            UniqueName})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                HierarchiesDataTable cln = ((HierarchiesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new HierarchiesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnId = base.Columns["Id"];
                this.columnDimId = base.Columns["DimId"];
                this.columnUniqueName = base.Columns["UniqueName"];
                this.columnName = base.Columns["Name"];
                this.columnIsOpen = base.Columns["IsOpen"];
                this.columnAxis = base.Columns["Axis"];
                this.columnAxisPositionOrdinal = base.Columns["AxisPositionOrdinal"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnId = new global::System.Data.DataColumn("Id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnId);
                this.columnDimId = new global::System.Data.DataColumn("DimId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDimId);
                this.columnUniqueName = new global::System.Data.DataColumn("UniqueName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUniqueName);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnIsOpen = new global::System.Data.DataColumn("IsOpen", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsOpen);
                this.columnAxis = new global::System.Data.DataColumn("Axis", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAxis);
                this.columnAxisPositionOrdinal = new global::System.Data.DataColumn("AxisPositionOrdinal", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAxisPositionOrdinal);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("IX_Hierarchies_UN", new global::System.Data.DataColumn[] {
                                this.columnUniqueName}, true));
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnId}, false));
                this.columnId.AutoIncrement = true;
                this.columnId.AllowDBNull = false;
                this.columnId.Unique = true;
                this.columnUniqueName.AllowDBNull = false;
                this.columnUniqueName.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HierarchiesRow NewHierarchiesRow() {
                return ((HierarchiesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new HierarchiesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(HierarchiesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.HierarchiesRowChanged != null)) {
                    this.HierarchiesRowChanged(this, new HierarchiesRowChangeEvent(((HierarchiesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.HierarchiesRowChanging != null)) {
                    this.HierarchiesRowChanging(this, new HierarchiesRowChangeEvent(((HierarchiesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.HierarchiesRowDeleted != null)) {
                    this.HierarchiesRowDeleted(this, new HierarchiesRowChangeEvent(((HierarchiesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.HierarchiesRowDeleting != null)) {
                    this.HierarchiesRowDeleting(this, new HierarchiesRowChangeEvent(((HierarchiesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveHierarchiesRow(HierarchiesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                OlapReportData ds = new OlapReportData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "HierarchiesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LevelsDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnId;
            
            private global::System.Data.DataColumn columnHierId;
            
            private global::System.Data.DataColumn columnUniqueName;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnDepth;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LevelsDataTable() {
                this.TableName = "Levels";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LevelsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LevelsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IdColumn {
                get {
                    return this.columnId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HierIdColumn {
                get {
                    return this.columnHierId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UniqueNameColumn {
                get {
                    return this.columnUniqueName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DepthColumn {
                get {
                    return this.columnDepth;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LevelsRow this[int index] {
                get {
                    return ((LevelsRow)(this.Rows[index]));
                }
            }
            
            public event LevelsRowChangeEventHandler LevelsRowChanging;
            
            public event LevelsRowChangeEventHandler LevelsRowChanged;
            
            public event LevelsRowChangeEventHandler LevelsRowDeleting;
            
            public event LevelsRowChangeEventHandler LevelsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLevelsRow(LevelsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LevelsRow AddLevelsRow(HierarchiesRow parentHierarchiesRowByHierarchiesLevels, string UniqueName, string Name, short Depth) {
                LevelsRow rowLevelsRow = ((LevelsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        UniqueName,
                        Name,
                        Depth};
                if ((parentHierarchiesRowByHierarchiesLevels != null)) {
                    columnValuesArray[1] = parentHierarchiesRowByHierarchiesLevels[0];
                }
                rowLevelsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLevelsRow);
                return rowLevelsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LevelsRow FindByUniqueName(string UniqueName) {
                return ((LevelsRow)(this.Rows.Find(new object[] {
                            UniqueName})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                LevelsDataTable cln = ((LevelsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new LevelsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnId = base.Columns["Id"];
                this.columnHierId = base.Columns["HierId"];
                this.columnUniqueName = base.Columns["UniqueName"];
                this.columnName = base.Columns["Name"];
                this.columnDepth = base.Columns["Depth"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnId = new global::System.Data.DataColumn("Id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnId);
                this.columnHierId = new global::System.Data.DataColumn("HierId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHierId);
                this.columnUniqueName = new global::System.Data.DataColumn("UniqueName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUniqueName);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnDepth = new global::System.Data.DataColumn("Depth", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDepth);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("PK_Levels", new global::System.Data.DataColumn[] {
                                this.columnId}, false));
                this.Constraints.Add(new global::System.Data.UniqueConstraint("IX_levels_UN", new global::System.Data.DataColumn[] {
                                this.columnUniqueName}, true));
                this.columnId.AutoIncrement = true;
                this.columnId.AllowDBNull = false;
                this.columnId.Unique = true;
                this.columnUniqueName.AllowDBNull = false;
                this.columnUniqueName.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LevelsRow NewLevelsRow() {
                return ((LevelsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new LevelsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(LevelsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LevelsRowChanged != null)) {
                    this.LevelsRowChanged(this, new LevelsRowChangeEvent(((LevelsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LevelsRowChanging != null)) {
                    this.LevelsRowChanging(this, new LevelsRowChangeEvent(((LevelsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LevelsRowDeleted != null)) {
                    this.LevelsRowDeleted(this, new LevelsRowChangeEvent(((LevelsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LevelsRowDeleting != null)) {
                    this.LevelsRowDeleting(this, new LevelsRowChangeEvent(((LevelsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLevelsRow(LevelsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                OlapReportData ds = new OlapReportData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LevelsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class MembersDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnId;
            
            private global::System.Data.DataColumn columnHierId;
            
            private global::System.Data.DataColumn columnParentMemberId;
            
            private global::System.Data.DataColumn columnLevelId;
            
            private global::System.Data.DataColumn columnUniqueName;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnChildCount;
            
            private global::System.Data.DataColumn columnLevelDepth;
            
            private global::System.Data.DataColumn columnIsCalculated;
            
            private global::System.Data.DataColumn columnIsOpen;
            
            private global::System.Data.DataColumn columnIsPlaceholder;
            
            private global::System.Data.DataColumn columnIsInMDX;
            
            private global::System.Data.DataColumn columnIsVisible;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MembersDataTable() {
                this.TableName = "Members";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MembersDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected MembersDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IdColumn {
                get {
                    return this.columnId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HierIdColumn {
                get {
                    return this.columnHierId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParentMemberIdColumn {
                get {
                    return this.columnParentMemberId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LevelIdColumn {
                get {
                    return this.columnLevelId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UniqueNameColumn {
                get {
                    return this.columnUniqueName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ChildCountColumn {
                get {
                    return this.columnChildCount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LevelDepthColumn {
                get {
                    return this.columnLevelDepth;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsCalculatedColumn {
                get {
                    return this.columnIsCalculated;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsOpenColumn {
                get {
                    return this.columnIsOpen;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsPlaceholderColumn {
                get {
                    return this.columnIsPlaceholder;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsInMDXColumn {
                get {
                    return this.columnIsInMDX;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsVisibleColumn {
                get {
                    return this.columnIsVisible;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MembersRow this[int index] {
                get {
                    return ((MembersRow)(this.Rows[index]));
                }
            }
            
            public event MembersRowChangeEventHandler MembersRowChanging;
            
            public event MembersRowChangeEventHandler MembersRowChanged;
            
            public event MembersRowChangeEventHandler MembersRowDeleting;
            
            public event MembersRowChangeEventHandler MembersRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddMembersRow(MembersRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MembersRow AddMembersRow(HierarchiesRow parentHierarchiesRowByHierarchiesMembers, int ParentMemberId, int LevelId, string UniqueName, string Name, short ChildCount, short LevelDepth, bool IsCalculated, bool IsOpen, bool IsPlaceholder, bool IsInMDX, bool IsVisible) {
                MembersRow rowMembersRow = ((MembersRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        ParentMemberId,
                        LevelId,
                        UniqueName,
                        Name,
                        ChildCount,
                        LevelDepth,
                        IsCalculated,
                        IsOpen,
                        IsPlaceholder,
                        IsInMDX,
                        IsVisible};
                if ((parentHierarchiesRowByHierarchiesMembers != null)) {
                    columnValuesArray[1] = parentHierarchiesRowByHierarchiesMembers[0];
                }
                rowMembersRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowMembersRow);
                return rowMembersRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MembersRow FindByUniqueName(string UniqueName) {
                return ((MembersRow)(this.Rows.Find(new object[] {
                            UniqueName})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                MembersDataTable cln = ((MembersDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new MembersDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnId = base.Columns["Id"];
                this.columnHierId = base.Columns["HierId"];
                this.columnParentMemberId = base.Columns["ParentMemberId"];
                this.columnLevelId = base.Columns["LevelId"];
                this.columnUniqueName = base.Columns["UniqueName"];
                this.columnName = base.Columns["Name"];
                this.columnChildCount = base.Columns["ChildCount"];
                this.columnLevelDepth = base.Columns["LevelDepth"];
                this.columnIsCalculated = base.Columns["IsCalculated"];
                this.columnIsOpen = base.Columns["IsOpen"];
                this.columnIsPlaceholder = base.Columns["IsPlaceholder"];
                this.columnIsInMDX = base.Columns["IsInMDX"];
                this.columnIsVisible = base.Columns["IsVisible"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnId = new global::System.Data.DataColumn("Id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnId);
                this.columnHierId = new global::System.Data.DataColumn("HierId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHierId);
                this.columnParentMemberId = new global::System.Data.DataColumn("ParentMemberId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParentMemberId);
                this.columnLevelId = new global::System.Data.DataColumn("LevelId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLevelId);
                this.columnUniqueName = new global::System.Data.DataColumn("UniqueName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUniqueName);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnChildCount = new global::System.Data.DataColumn("ChildCount", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnChildCount);
                this.columnLevelDepth = new global::System.Data.DataColumn("LevelDepth", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLevelDepth);
                this.columnIsCalculated = new global::System.Data.DataColumn("IsCalculated", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsCalculated);
                this.columnIsOpen = new global::System.Data.DataColumn("IsOpen", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsOpen);
                this.columnIsPlaceholder = new global::System.Data.DataColumn("IsPlaceholder", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsPlaceholder);
                this.columnIsInMDX = new global::System.Data.DataColumn("IsInMDX", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsInMDX);
                this.columnIsVisible = new global::System.Data.DataColumn("IsVisible", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsVisible);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("IX_Members_UN", new global::System.Data.DataColumn[] {
                                this.columnUniqueName}, true));
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnId}, false));
                this.columnId.AutoIncrement = true;
                this.columnId.AllowDBNull = false;
                this.columnId.Unique = true;
                this.columnUniqueName.AllowDBNull = false;
                this.columnUniqueName.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MembersRow NewMembersRow() {
                return ((MembersRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new MembersRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(MembersRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MembersRowChanged != null)) {
                    this.MembersRowChanged(this, new MembersRowChangeEvent(((MembersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MembersRowChanging != null)) {
                    this.MembersRowChanging(this, new MembersRowChangeEvent(((MembersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MembersRowDeleted != null)) {
                    this.MembersRowDeleted(this, new MembersRowChangeEvent(((MembersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MembersRowDeleting != null)) {
                    this.MembersRowDeleting(this, new MembersRowChangeEvent(((MembersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveMembersRow(MembersRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                OlapReportData ds = new OlapReportData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MembersDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CalculatedMembersDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnMemberId;
            
            private global::System.Data.DataColumn columnExpression;
            
            private global::System.Data.DataColumn columnSolveOrder;
            
            private global::System.Data.DataColumn columnFormatString;
            
            private global::System.Data.DataColumn columnIsWithMembers;
            
            private global::System.Data.DataColumn columnIsWithLevels;
            
            private global::System.Data.DataColumn columnIsWithHierarchies;
            
            private global::System.Data.DataColumn columnIsWithDimensions;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CalculatedMembersDataTable() {
                this.TableName = "CalculatedMembers";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CalculatedMembersDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CalculatedMembersDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MemberIdColumn {
                get {
                    return this.columnMemberId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExpressionColumn {
                get {
                    return this.columnExpression;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SolveOrderColumn {
                get {
                    return this.columnSolveOrder;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FormatStringColumn {
                get {
                    return this.columnFormatString;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsWithMembersColumn {
                get {
                    return this.columnIsWithMembers;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsWithLevelsColumn {
                get {
                    return this.columnIsWithLevels;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsWithHierarchiesColumn {
                get {
                    return this.columnIsWithHierarchies;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsWithDimensionsColumn {
                get {
                    return this.columnIsWithDimensions;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CalculatedMembersRow this[int index] {
                get {
                    return ((CalculatedMembersRow)(this.Rows[index]));
                }
            }
            
            public event CalculatedMembersRowChangeEventHandler CalculatedMembersRowChanging;
            
            public event CalculatedMembersRowChangeEventHandler CalculatedMembersRowChanged;
            
            public event CalculatedMembersRowChangeEventHandler CalculatedMembersRowDeleting;
            
            public event CalculatedMembersRowChangeEventHandler CalculatedMembersRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCalculatedMembersRow(CalculatedMembersRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CalculatedMembersRow AddCalculatedMembersRow(MembersRow parentMembersRowByMembersCalculatedMembers, string Expression, int SolveOrder, string FormatString, bool IsWithMembers, bool IsWithLevels, bool IsWithHierarchies, bool IsWithDimensions) {
                CalculatedMembersRow rowCalculatedMembersRow = ((CalculatedMembersRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        Expression,
                        SolveOrder,
                        FormatString,
                        IsWithMembers,
                        IsWithLevels,
                        IsWithHierarchies,
                        IsWithDimensions};
                if ((parentMembersRowByMembersCalculatedMembers != null)) {
                    columnValuesArray[0] = parentMembersRowByMembersCalculatedMembers[0];
                }
                rowCalculatedMembersRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCalculatedMembersRow);
                return rowCalculatedMembersRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CalculatedMembersRow FindByMemberId(int MemberId) {
                return ((CalculatedMembersRow)(this.Rows.Find(new object[] {
                            MemberId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                CalculatedMembersDataTable cln = ((CalculatedMembersDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new CalculatedMembersDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMemberId = base.Columns["MemberId"];
                this.columnExpression = base.Columns["Expression"];
                this.columnSolveOrder = base.Columns["SolveOrder"];
                this.columnFormatString = base.Columns["FormatString"];
                this.columnIsWithMembers = base.Columns["IsWithMembers"];
                this.columnIsWithLevels = base.Columns["IsWithLevels"];
                this.columnIsWithHierarchies = base.Columns["IsWithHierarchies"];
                this.columnIsWithDimensions = base.Columns["IsWithDimensions"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMemberId = new global::System.Data.DataColumn("MemberId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMemberId);
                this.columnExpression = new global::System.Data.DataColumn("Expression", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExpression);
                this.columnSolveOrder = new global::System.Data.DataColumn("SolveOrder", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSolveOrder);
                this.columnFormatString = new global::System.Data.DataColumn("FormatString", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFormatString);
                this.columnIsWithMembers = new global::System.Data.DataColumn("IsWithMembers", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsWithMembers);
                this.columnIsWithLevels = new global::System.Data.DataColumn("IsWithLevels", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsWithLevels);
                this.columnIsWithHierarchies = new global::System.Data.DataColumn("IsWithHierarchies", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsWithHierarchies);
                this.columnIsWithDimensions = new global::System.Data.DataColumn("IsWithDimensions", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsWithDimensions);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("PK_CalculatedMembers", new global::System.Data.DataColumn[] {
                                this.columnMemberId}, true));
                this.columnMemberId.AllowDBNull = false;
                this.columnMemberId.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CalculatedMembersRow NewCalculatedMembersRow() {
                return ((CalculatedMembersRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new CalculatedMembersRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(CalculatedMembersRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CalculatedMembersRowChanged != null)) {
                    this.CalculatedMembersRowChanged(this, new CalculatedMembersRowChangeEvent(((CalculatedMembersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CalculatedMembersRowChanging != null)) {
                    this.CalculatedMembersRowChanging(this, new CalculatedMembersRowChangeEvent(((CalculatedMembersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CalculatedMembersRowDeleted != null)) {
                    this.CalculatedMembersRowDeleted(this, new CalculatedMembersRowChangeEvent(((CalculatedMembersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CalculatedMembersRowDeleting != null)) {
                    this.CalculatedMembersRowDeleting(this, new CalculatedMembersRowChangeEvent(((CalculatedMembersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCalculatedMembersRow(CalculatedMembersRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                OlapReportData ds = new OlapReportData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CalculatedMembersDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class OrderTupleDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnUniqueName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OrderTupleDataTable() {
                this.TableName = "OrderTuple";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OrderTupleDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected OrderTupleDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UniqueNameColumn {
                get {
                    return this.columnUniqueName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OrderTupleRow this[int index] {
                get {
                    return ((OrderTupleRow)(this.Rows[index]));
                }
            }
            
            public event OrderTupleRowChangeEventHandler OrderTupleRowChanging;
            
            public event OrderTupleRowChangeEventHandler OrderTupleRowChanged;
            
            public event OrderTupleRowChangeEventHandler OrderTupleRowDeleting;
            
            public event OrderTupleRowChangeEventHandler OrderTupleRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddOrderTupleRow(OrderTupleRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OrderTupleRow AddOrderTupleRow(string UniqueName) {
                OrderTupleRow rowOrderTupleRow = ((OrderTupleRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        UniqueName};
                rowOrderTupleRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowOrderTupleRow);
                return rowOrderTupleRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                OrderTupleDataTable cln = ((OrderTupleDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new OrderTupleDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnUniqueName = base.Columns["UniqueName"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnUniqueName = new global::System.Data.DataColumn("UniqueName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUniqueName);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OrderTupleRow NewOrderTupleRow() {
                return ((OrderTupleRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new OrderTupleRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(OrderTupleRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.OrderTupleRowChanged != null)) {
                    this.OrderTupleRowChanged(this, new OrderTupleRowChangeEvent(((OrderTupleRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.OrderTupleRowChanging != null)) {
                    this.OrderTupleRowChanging(this, new OrderTupleRowChangeEvent(((OrderTupleRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.OrderTupleRowDeleted != null)) {
                    this.OrderTupleRowDeleted(this, new OrderTupleRowChangeEvent(((OrderTupleRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.OrderTupleRowDeleting != null)) {
                    this.OrderTupleRowDeleting(this, new OrderTupleRowChangeEvent(((OrderTupleRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveOrderTupleRow(OrderTupleRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                OlapReportData ds = new OlapReportData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "OrderTupleDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Link_Mem_HierDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnMemId;
            
            private global::System.Data.DataColumn columnHierId;
            
            private global::System.Data.DataColumn columnIsVital;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Link_Mem_HierDataTable() {
                this.TableName = "Link_Mem_Hier";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Link_Mem_HierDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Link_Mem_HierDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MemIdColumn {
                get {
                    return this.columnMemId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HierIdColumn {
                get {
                    return this.columnHierId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsVitalColumn {
                get {
                    return this.columnIsVital;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Link_Mem_HierRow this[int index] {
                get {
                    return ((Link_Mem_HierRow)(this.Rows[index]));
                }
            }
            
            public event Link_Mem_HierRowChangeEventHandler Link_Mem_HierRowChanging;
            
            public event Link_Mem_HierRowChangeEventHandler Link_Mem_HierRowChanged;
            
            public event Link_Mem_HierRowChangeEventHandler Link_Mem_HierRowDeleting;
            
            public event Link_Mem_HierRowChangeEventHandler Link_Mem_HierRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLink_Mem_HierRow(Link_Mem_HierRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Link_Mem_HierRow AddLink_Mem_HierRow(MembersRow parentMembersRowByMembersLink_Mem_Hier, int HierId, bool IsVital) {
                Link_Mem_HierRow rowLink_Mem_HierRow = ((Link_Mem_HierRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        HierId,
                        IsVital};
                if ((parentMembersRowByMembersLink_Mem_Hier != null)) {
                    columnValuesArray[0] = parentMembersRowByMembersLink_Mem_Hier[0];
                }
                rowLink_Mem_HierRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLink_Mem_HierRow);
                return rowLink_Mem_HierRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                Link_Mem_HierDataTable cln = ((Link_Mem_HierDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Link_Mem_HierDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMemId = base.Columns["MemId"];
                this.columnHierId = base.Columns["HierId"];
                this.columnIsVital = base.Columns["IsVital"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMemId = new global::System.Data.DataColumn("MemId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMemId);
                this.columnHierId = new global::System.Data.DataColumn("HierId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHierId);
                this.columnIsVital = new global::System.Data.DataColumn("IsVital", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsVital);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Link_Mem_HierRow NewLink_Mem_HierRow() {
                return ((Link_Mem_HierRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Link_Mem_HierRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(Link_Mem_HierRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Link_Mem_HierRowChanged != null)) {
                    this.Link_Mem_HierRowChanged(this, new Link_Mem_HierRowChangeEvent(((Link_Mem_HierRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Link_Mem_HierRowChanging != null)) {
                    this.Link_Mem_HierRowChanging(this, new Link_Mem_HierRowChangeEvent(((Link_Mem_HierRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Link_Mem_HierRowDeleted != null)) {
                    this.Link_Mem_HierRowDeleted(this, new Link_Mem_HierRowChangeEvent(((Link_Mem_HierRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Link_Mem_HierRowDeleting != null)) {
                    this.Link_Mem_HierRowDeleting(this, new Link_Mem_HierRowChangeEvent(((Link_Mem_HierRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLink_Mem_HierRow(Link_Mem_HierRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                OlapReportData ds = new OlapReportData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Link_Mem_HierDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Link_Mem_LevelDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnMemId;
            
            private global::System.Data.DataColumn columnLevelId;
            
            private global::System.Data.DataColumn columnIsVital;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Link_Mem_LevelDataTable() {
                this.TableName = "Link_Mem_Level";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Link_Mem_LevelDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Link_Mem_LevelDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MemIdColumn {
                get {
                    return this.columnMemId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LevelIdColumn {
                get {
                    return this.columnLevelId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsVitalColumn {
                get {
                    return this.columnIsVital;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Link_Mem_LevelRow this[int index] {
                get {
                    return ((Link_Mem_LevelRow)(this.Rows[index]));
                }
            }
            
            public event Link_Mem_LevelRowChangeEventHandler Link_Mem_LevelRowChanging;
            
            public event Link_Mem_LevelRowChangeEventHandler Link_Mem_LevelRowChanged;
            
            public event Link_Mem_LevelRowChangeEventHandler Link_Mem_LevelRowDeleting;
            
            public event Link_Mem_LevelRowChangeEventHandler Link_Mem_LevelRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLink_Mem_LevelRow(Link_Mem_LevelRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Link_Mem_LevelRow AddLink_Mem_LevelRow(MembersRow parentMembersRowByMembersLink_Mem_Level, int LevelId, bool IsVital) {
                Link_Mem_LevelRow rowLink_Mem_LevelRow = ((Link_Mem_LevelRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        LevelId,
                        IsVital};
                if ((parentMembersRowByMembersLink_Mem_Level != null)) {
                    columnValuesArray[0] = parentMembersRowByMembersLink_Mem_Level[0];
                }
                rowLink_Mem_LevelRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLink_Mem_LevelRow);
                return rowLink_Mem_LevelRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                Link_Mem_LevelDataTable cln = ((Link_Mem_LevelDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Link_Mem_LevelDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMemId = base.Columns["MemId"];
                this.columnLevelId = base.Columns["LevelId"];
                this.columnIsVital = base.Columns["IsVital"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMemId = new global::System.Data.DataColumn("MemId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMemId);
                this.columnLevelId = new global::System.Data.DataColumn("LevelId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLevelId);
                this.columnIsVital = new global::System.Data.DataColumn("IsVital", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsVital);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Link_Mem_LevelRow NewLink_Mem_LevelRow() {
                return ((Link_Mem_LevelRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Link_Mem_LevelRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(Link_Mem_LevelRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Link_Mem_LevelRowChanged != null)) {
                    this.Link_Mem_LevelRowChanged(this, new Link_Mem_LevelRowChangeEvent(((Link_Mem_LevelRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Link_Mem_LevelRowChanging != null)) {
                    this.Link_Mem_LevelRowChanging(this, new Link_Mem_LevelRowChangeEvent(((Link_Mem_LevelRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Link_Mem_LevelRowDeleted != null)) {
                    this.Link_Mem_LevelRowDeleted(this, new Link_Mem_LevelRowChangeEvent(((Link_Mem_LevelRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Link_Mem_LevelRowDeleting != null)) {
                    this.Link_Mem_LevelRowDeleting(this, new Link_Mem_LevelRowChangeEvent(((Link_Mem_LevelRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLink_Mem_LevelRow(Link_Mem_LevelRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                OlapReportData ds = new OlapReportData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Link_Mem_LevelDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Link_Mem_MemDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnParentMemId;
            
            private global::System.Data.DataColumn columnChildMemId;
            
            private global::System.Data.DataColumn columnIsVital;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Link_Mem_MemDataTable() {
                this.TableName = "Link_Mem_Mem";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Link_Mem_MemDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Link_Mem_MemDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParentMemIdColumn {
                get {
                    return this.columnParentMemId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ChildMemIdColumn {
                get {
                    return this.columnChildMemId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsVitalColumn {
                get {
                    return this.columnIsVital;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Link_Mem_MemRow this[int index] {
                get {
                    return ((Link_Mem_MemRow)(this.Rows[index]));
                }
            }
            
            public event Link_Mem_MemRowChangeEventHandler Link_Mem_MemRowChanging;
            
            public event Link_Mem_MemRowChangeEventHandler Link_Mem_MemRowChanged;
            
            public event Link_Mem_MemRowChangeEventHandler Link_Mem_MemRowDeleting;
            
            public event Link_Mem_MemRowChangeEventHandler Link_Mem_MemRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLink_Mem_MemRow(Link_Mem_MemRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Link_Mem_MemRow AddLink_Mem_MemRow(MembersRow parentMembersRowByMembersLink_Mem_Mem, int ChildMemId, bool IsVital) {
                Link_Mem_MemRow rowLink_Mem_MemRow = ((Link_Mem_MemRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        ChildMemId,
                        IsVital};
                if ((parentMembersRowByMembersLink_Mem_Mem != null)) {
                    columnValuesArray[0] = parentMembersRowByMembersLink_Mem_Mem[0];
                }
                rowLink_Mem_MemRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLink_Mem_MemRow);
                return rowLink_Mem_MemRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                Link_Mem_MemDataTable cln = ((Link_Mem_MemDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Link_Mem_MemDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnParentMemId = base.Columns["ParentMemId"];
                this.columnChildMemId = base.Columns["ChildMemId"];
                this.columnIsVital = base.Columns["IsVital"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnParentMemId = new global::System.Data.DataColumn("ParentMemId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParentMemId);
                this.columnChildMemId = new global::System.Data.DataColumn("ChildMemId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnChildMemId);
                this.columnIsVital = new global::System.Data.DataColumn("IsVital", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsVital);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Link_Mem_MemRow NewLink_Mem_MemRow() {
                return ((Link_Mem_MemRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Link_Mem_MemRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(Link_Mem_MemRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Link_Mem_MemRowChanged != null)) {
                    this.Link_Mem_MemRowChanged(this, new Link_Mem_MemRowChangeEvent(((Link_Mem_MemRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Link_Mem_MemRowChanging != null)) {
                    this.Link_Mem_MemRowChanging(this, new Link_Mem_MemRowChangeEvent(((Link_Mem_MemRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Link_Mem_MemRowDeleted != null)) {
                    this.Link_Mem_MemRowDeleted(this, new Link_Mem_MemRowChangeEvent(((Link_Mem_MemRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Link_Mem_MemRowDeleting != null)) {
                    this.Link_Mem_MemRowDeleting(this, new Link_Mem_MemRowChangeEvent(((Link_Mem_MemRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLink_Mem_MemRow(Link_Mem_MemRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                OlapReportData ds = new OlapReportData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Link_Mem_MemDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class OpenNodesDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnUniqueName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OpenNodesDataTable() {
                this.TableName = "OpenNodes";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OpenNodesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected OpenNodesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UniqueNameColumn {
                get {
                    return this.columnUniqueName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OpenNodesRow this[int index] {
                get {
                    return ((OpenNodesRow)(this.Rows[index]));
                }
            }
            
            public event OpenNodesRowChangeEventHandler OpenNodesRowChanging;
            
            public event OpenNodesRowChangeEventHandler OpenNodesRowChanged;
            
            public event OpenNodesRowChangeEventHandler OpenNodesRowDeleting;
            
            public event OpenNodesRowChangeEventHandler OpenNodesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddOpenNodesRow(OpenNodesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OpenNodesRow AddOpenNodesRow(string UniqueName) {
                OpenNodesRow rowOpenNodesRow = ((OpenNodesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        UniqueName};
                rowOpenNodesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowOpenNodesRow);
                return rowOpenNodesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OpenNodesRow FindByUniqueName(string UniqueName) {
                return ((OpenNodesRow)(this.Rows.Find(new object[] {
                            UniqueName})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                OpenNodesDataTable cln = ((OpenNodesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new OpenNodesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnUniqueName = base.Columns["UniqueName"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnUniqueName = new global::System.Data.DataColumn("UniqueName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUniqueName);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("PK_OpenNodes", new global::System.Data.DataColumn[] {
                                this.columnUniqueName}, true));
                this.columnUniqueName.AllowDBNull = false;
                this.columnUniqueName.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OpenNodesRow NewOpenNodesRow() {
                return ((OpenNodesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new OpenNodesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(OpenNodesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.OpenNodesRowChanged != null)) {
                    this.OpenNodesRowChanged(this, new OpenNodesRowChangeEvent(((OpenNodesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.OpenNodesRowChanging != null)) {
                    this.OpenNodesRowChanging(this, new OpenNodesRowChangeEvent(((OpenNodesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.OpenNodesRowDeleted != null)) {
                    this.OpenNodesRowDeleted(this, new OpenNodesRowChangeEvent(((OpenNodesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.OpenNodesRowDeleting != null)) {
                    this.OpenNodesRowDeleting(this, new OpenNodesRowChangeEvent(((OpenNodesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveOpenNodesRow(OpenNodesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                OlapReportData ds = new OlapReportData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "OpenNodesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class HeaderRow : global::System.Data.DataRow {
            
            private HeaderDataTable tableHeader;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal HeaderRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableHeader = ((HeaderDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RptId {
                get {
                    try {
                        return ((int)(this[this.tableHeader.RptIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RptId\' in table \'Header\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHeader.RptIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RptOwnerId {
                get {
                    try {
                        return ((int)(this[this.tableHeader.RptOwnerIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RptOwnerId\' in table \'Header\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHeader.RptOwnerIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ParentRptId {
                get {
                    try {
                        return ((int)(this[this.tableHeader.ParentRptIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ParentRptId\' in table \'Header\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHeader.ParentRptIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RptName {
                get {
                    try {
                        return ((string)(this[this.tableHeader.RptNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RptName\' in table \'Header\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHeader.RptNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RptDescription {
                get {
                    try {
                        return ((string)(this[this.tableHeader.RptDescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RptDescription\' in table \'Header\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHeader.RptDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RptSchemaId {
                get {
                    try {
                        return ((int)(this[this.tableHeader.RptSchemaIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RptSchemaId\' in table \'Header\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHeader.RptSchemaIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RptSchemaName {
                get {
                    try {
                        return ((string)(this[this.tableHeader.RptSchemaNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RptSchemaName\' in table \'Header\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHeader.RptSchemaNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RptSchemaServer {
                get {
                    try {
                        return ((string)(this[this.tableHeader.RptSchemaServerColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RptSchemaServer\' in table \'Header\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHeader.RptSchemaServerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RptSchemaDatabase {
                get {
                    try {
                        return ((string)(this[this.tableHeader.RptSchemaDatabaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RptSchemaDatabase\' in table \'Header\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHeader.RptSchemaDatabaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RptOrder {
                get {
                    try {
                        return ((string)(this[this.tableHeader.RptOrderColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RptOrder\' in table \'Header\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHeader.RptOrderColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool RptTimeRangeEnabled {
                get {
                    try {
                        return ((bool)(this[this.tableHeader.RptTimeRangeEnabledColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RptTimeRangeEnabled\' in table \'Header\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHeader.RptTimeRangeEnabledColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool RptTimeRangePrompt {
                get {
                    try {
                        return ((bool)(this[this.tableHeader.RptTimeRangePromptColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RptTimeRangePrompt\' in table \'Header\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHeader.RptTimeRangePromptColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RptTimeRangeStart {
                get {
                    try {
                        return ((string)(this[this.tableHeader.RptTimeRangeStartColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RptTimeRangeStart\' in table \'Header\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHeader.RptTimeRangeStartColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RptTimeRangeEnd {
                get {
                    try {
                        return ((string)(this[this.tableHeader.RptTimeRangeEndColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RptTimeRangeEnd\' in table \'Header\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHeader.RptTimeRangeEndColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RptTimeRangeLevel {
                get {
                    try {
                        return ((string)(this[this.tableHeader.RptTimeRangeLevelColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RptTimeRangeLevel\' in table \'Header\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHeader.RptTimeRangeLevelColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte RptPercentageType {
                get {
                    try {
                        return ((byte)(this[this.tableHeader.RptPercentageTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RptPercentageType\' in table \'Header\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHeader.RptPercentageTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RptPercentageDim {
                get {
                    try {
                        return ((string)(this[this.tableHeader.RptPercentageDimColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RptPercentageDim\' in table \'Header\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHeader.RptPercentageDimColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RptPercentageMeasure {
                get {
                    try {
                        return ((string)(this[this.tableHeader.RptPercentageMeasureColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RptPercentageMeasure\' in table \'Header\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHeader.RptPercentageMeasureColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte RptShowRowsOption {
                get {
                    try {
                        return ((byte)(this[this.tableHeader.RptShowRowsOptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RptShowRowsOption\' in table \'Header\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHeader.RptShowRowsOptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte RptShowColumnsOption {
                get {
                    try {
                        return ((byte)(this[this.tableHeader.RptShowColumnsOptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RptShowColumnsOption\' in table \'Header\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHeader.RptShowColumnsOptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRptIdNull() {
                return this.IsNull(this.tableHeader.RptIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRptIdNull() {
                this[this.tableHeader.RptIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRptOwnerIdNull() {
                return this.IsNull(this.tableHeader.RptOwnerIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRptOwnerIdNull() {
                this[this.tableHeader.RptOwnerIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParentRptIdNull() {
                return this.IsNull(this.tableHeader.ParentRptIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParentRptIdNull() {
                this[this.tableHeader.ParentRptIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRptNameNull() {
                return this.IsNull(this.tableHeader.RptNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRptNameNull() {
                this[this.tableHeader.RptNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRptDescriptionNull() {
                return this.IsNull(this.tableHeader.RptDescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRptDescriptionNull() {
                this[this.tableHeader.RptDescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRptSchemaIdNull() {
                return this.IsNull(this.tableHeader.RptSchemaIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRptSchemaIdNull() {
                this[this.tableHeader.RptSchemaIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRptSchemaNameNull() {
                return this.IsNull(this.tableHeader.RptSchemaNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRptSchemaNameNull() {
                this[this.tableHeader.RptSchemaNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRptSchemaServerNull() {
                return this.IsNull(this.tableHeader.RptSchemaServerColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRptSchemaServerNull() {
                this[this.tableHeader.RptSchemaServerColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRptSchemaDatabaseNull() {
                return this.IsNull(this.tableHeader.RptSchemaDatabaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRptSchemaDatabaseNull() {
                this[this.tableHeader.RptSchemaDatabaseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRptOrderNull() {
                return this.IsNull(this.tableHeader.RptOrderColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRptOrderNull() {
                this[this.tableHeader.RptOrderColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRptTimeRangeEnabledNull() {
                return this.IsNull(this.tableHeader.RptTimeRangeEnabledColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRptTimeRangeEnabledNull() {
                this[this.tableHeader.RptTimeRangeEnabledColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRptTimeRangePromptNull() {
                return this.IsNull(this.tableHeader.RptTimeRangePromptColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRptTimeRangePromptNull() {
                this[this.tableHeader.RptTimeRangePromptColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRptTimeRangeStartNull() {
                return this.IsNull(this.tableHeader.RptTimeRangeStartColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRptTimeRangeStartNull() {
                this[this.tableHeader.RptTimeRangeStartColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRptTimeRangeEndNull() {
                return this.IsNull(this.tableHeader.RptTimeRangeEndColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRptTimeRangeEndNull() {
                this[this.tableHeader.RptTimeRangeEndColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRptTimeRangeLevelNull() {
                return this.IsNull(this.tableHeader.RptTimeRangeLevelColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRptTimeRangeLevelNull() {
                this[this.tableHeader.RptTimeRangeLevelColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRptPercentageTypeNull() {
                return this.IsNull(this.tableHeader.RptPercentageTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRptPercentageTypeNull() {
                this[this.tableHeader.RptPercentageTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRptPercentageDimNull() {
                return this.IsNull(this.tableHeader.RptPercentageDimColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRptPercentageDimNull() {
                this[this.tableHeader.RptPercentageDimColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRptPercentageMeasureNull() {
                return this.IsNull(this.tableHeader.RptPercentageMeasureColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRptPercentageMeasureNull() {
                this[this.tableHeader.RptPercentageMeasureColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRptShowRowsOptionNull() {
                return this.IsNull(this.tableHeader.RptShowRowsOptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRptShowRowsOptionNull() {
                this[this.tableHeader.RptShowRowsOptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRptShowColumnsOptionNull() {
                return this.IsNull(this.tableHeader.RptShowColumnsOptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRptShowColumnsOptionNull() {
                this[this.tableHeader.RptShowColumnsOptionColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DimensionsRow : global::System.Data.DataRow {
            
            private DimensionsDataTable tableDimensions;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DimensionsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDimensions = ((DimensionsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Id {
                get {
                    return ((int)(this[this.tableDimensions.IdColumn]));
                }
                set {
                    this[this.tableDimensions.IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UniqueName {
                get {
                    return ((string)(this[this.tableDimensions.UniqueNameColumn]));
                }
                set {
                    this[this.tableDimensions.UniqueNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableDimensions.NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Name\' in table \'Dimensions\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDimensions.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOpen {
                get {
                    try {
                        return ((bool)(this[this.tableDimensions.IsOpenColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsOpen\' in table \'Dimensions\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDimensions.IsOpenColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNameNull() {
                return this.IsNull(this.tableDimensions.NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNameNull() {
                this[this.tableDimensions.NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsOpenNull() {
                return this.IsNull(this.tableDimensions.IsOpenColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsOpenNull() {
                this[this.tableDimensions.IsOpenColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HierarchiesRow[] GetHierarchiesRows() {
                if ((this.Table.ChildRelations["DimensionsHierarchies"] == null)) {
                    return new HierarchiesRow[0];
                }
                else {
                    return ((HierarchiesRow[])(base.GetChildRows(this.Table.ChildRelations["DimensionsHierarchies"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class HierarchiesRow : global::System.Data.DataRow {
            
            private HierarchiesDataTable tableHierarchies;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal HierarchiesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableHierarchies = ((HierarchiesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Id {
                get {
                    return ((int)(this[this.tableHierarchies.IdColumn]));
                }
                set {
                    this[this.tableHierarchies.IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DimId {
                get {
                    try {
                        return ((int)(this[this.tableHierarchies.DimIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DimId\' in table \'Hierarchies\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHierarchies.DimIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UniqueName {
                get {
                    return ((string)(this[this.tableHierarchies.UniqueNameColumn]));
                }
                set {
                    this[this.tableHierarchies.UniqueNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableHierarchies.NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Name\' in table \'Hierarchies\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHierarchies.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOpen {
                get {
                    try {
                        return ((bool)(this[this.tableHierarchies.IsOpenColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsOpen\' in table \'Hierarchies\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHierarchies.IsOpenColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short Axis {
                get {
                    try {
                        return ((short)(this[this.tableHierarchies.AxisColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Axis\' in table \'Hierarchies\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHierarchies.AxisColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short AxisPositionOrdinal {
                get {
                    try {
                        return ((short)(this[this.tableHierarchies.AxisPositionOrdinalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AxisPositionOrdinal\' in table \'Hierarchies\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHierarchies.AxisPositionOrdinalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DimensionsRow DimensionsRow {
                get {
                    return ((DimensionsRow)(this.GetParentRow(this.Table.ParentRelations["DimensionsHierarchies"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["DimensionsHierarchies"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDimIdNull() {
                return this.IsNull(this.tableHierarchies.DimIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDimIdNull() {
                this[this.tableHierarchies.DimIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNameNull() {
                return this.IsNull(this.tableHierarchies.NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNameNull() {
                this[this.tableHierarchies.NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsOpenNull() {
                return this.IsNull(this.tableHierarchies.IsOpenColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsOpenNull() {
                this[this.tableHierarchies.IsOpenColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAxisNull() {
                return this.IsNull(this.tableHierarchies.AxisColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAxisNull() {
                this[this.tableHierarchies.AxisColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAxisPositionOrdinalNull() {
                return this.IsNull(this.tableHierarchies.AxisPositionOrdinalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAxisPositionOrdinalNull() {
                this[this.tableHierarchies.AxisPositionOrdinalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LevelsRow[] GetLevelsRows() {
                if ((this.Table.ChildRelations["HierarchiesLevels"] == null)) {
                    return new LevelsRow[0];
                }
                else {
                    return ((LevelsRow[])(base.GetChildRows(this.Table.ChildRelations["HierarchiesLevels"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MembersRow[] GetMembersRows() {
                if ((this.Table.ChildRelations["HierarchiesMembers"] == null)) {
                    return new MembersRow[0];
                }
                else {
                    return ((MembersRow[])(base.GetChildRows(this.Table.ChildRelations["HierarchiesMembers"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LevelsRow : global::System.Data.DataRow {
            
            private LevelsDataTable tableLevels;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LevelsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLevels = ((LevelsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Id {
                get {
                    return ((int)(this[this.tableLevels.IdColumn]));
                }
                set {
                    this[this.tableLevels.IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int HierId {
                get {
                    try {
                        return ((int)(this[this.tableLevels.HierIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HierId\' in table \'Levels\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLevels.HierIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UniqueName {
                get {
                    return ((string)(this[this.tableLevels.UniqueNameColumn]));
                }
                set {
                    this[this.tableLevels.UniqueNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableLevels.NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Name\' in table \'Levels\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLevels.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short Depth {
                get {
                    try {
                        return ((short)(this[this.tableLevels.DepthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Depth\' in table \'Levels\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLevels.DepthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HierarchiesRow HierarchiesRow {
                get {
                    return ((HierarchiesRow)(this.GetParentRow(this.Table.ParentRelations["HierarchiesLevels"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["HierarchiesLevels"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHierIdNull() {
                return this.IsNull(this.tableLevels.HierIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHierIdNull() {
                this[this.tableLevels.HierIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNameNull() {
                return this.IsNull(this.tableLevels.NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNameNull() {
                this[this.tableLevels.NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDepthNull() {
                return this.IsNull(this.tableLevels.DepthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDepthNull() {
                this[this.tableLevels.DepthColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class MembersRow : global::System.Data.DataRow {
            
            private MembersDataTable tableMembers;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MembersRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMembers = ((MembersDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Id {
                get {
                    return ((int)(this[this.tableMembers.IdColumn]));
                }
                set {
                    this[this.tableMembers.IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int HierId {
                get {
                    try {
                        return ((int)(this[this.tableMembers.HierIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HierId\' in table \'Members\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMembers.HierIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ParentMemberId {
                get {
                    try {
                        return ((int)(this[this.tableMembers.ParentMemberIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ParentMemberId\' in table \'Members\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMembers.ParentMemberIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LevelId {
                get {
                    try {
                        return ((int)(this[this.tableMembers.LevelIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LevelId\' in table \'Members\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMembers.LevelIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UniqueName {
                get {
                    return ((string)(this[this.tableMembers.UniqueNameColumn]));
                }
                set {
                    this[this.tableMembers.UniqueNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableMembers.NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Name\' in table \'Members\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMembers.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short ChildCount {
                get {
                    try {
                        return ((short)(this[this.tableMembers.ChildCountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ChildCount\' in table \'Members\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMembers.ChildCountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short LevelDepth {
                get {
                    try {
                        return ((short)(this[this.tableMembers.LevelDepthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LevelDepth\' in table \'Members\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMembers.LevelDepthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCalculated {
                get {
                    try {
                        return ((bool)(this[this.tableMembers.IsCalculatedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsCalculated\' in table \'Members\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMembers.IsCalculatedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOpen {
                get {
                    try {
                        return ((bool)(this[this.tableMembers.IsOpenColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsOpen\' in table \'Members\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMembers.IsOpenColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPlaceholder {
                get {
                    try {
                        return ((bool)(this[this.tableMembers.IsPlaceholderColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsPlaceholder\' in table \'Members\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMembers.IsPlaceholderColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInMDX {
                get {
                    try {
                        return ((bool)(this[this.tableMembers.IsInMDXColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsInMDX\' in table \'Members\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMembers.IsInMDXColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVisible {
                get {
                    try {
                        return ((bool)(this[this.tableMembers.IsVisibleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsVisible\' in table \'Members\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMembers.IsVisibleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HierarchiesRow HierarchiesRow {
                get {
                    return ((HierarchiesRow)(this.GetParentRow(this.Table.ParentRelations["HierarchiesMembers"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["HierarchiesMembers"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHierIdNull() {
                return this.IsNull(this.tableMembers.HierIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHierIdNull() {
                this[this.tableMembers.HierIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParentMemberIdNull() {
                return this.IsNull(this.tableMembers.ParentMemberIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParentMemberIdNull() {
                this[this.tableMembers.ParentMemberIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLevelIdNull() {
                return this.IsNull(this.tableMembers.LevelIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLevelIdNull() {
                this[this.tableMembers.LevelIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNameNull() {
                return this.IsNull(this.tableMembers.NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNameNull() {
                this[this.tableMembers.NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsChildCountNull() {
                return this.IsNull(this.tableMembers.ChildCountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetChildCountNull() {
                this[this.tableMembers.ChildCountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLevelDepthNull() {
                return this.IsNull(this.tableMembers.LevelDepthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLevelDepthNull() {
                this[this.tableMembers.LevelDepthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsCalculatedNull() {
                return this.IsNull(this.tableMembers.IsCalculatedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsCalculatedNull() {
                this[this.tableMembers.IsCalculatedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsOpenNull() {
                return this.IsNull(this.tableMembers.IsOpenColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsOpenNull() {
                this[this.tableMembers.IsOpenColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsPlaceholderNull() {
                return this.IsNull(this.tableMembers.IsPlaceholderColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsPlaceholderNull() {
                this[this.tableMembers.IsPlaceholderColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsInMDXNull() {
                return this.IsNull(this.tableMembers.IsInMDXColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsInMDXNull() {
                this[this.tableMembers.IsInMDXColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsVisibleNull() {
                return this.IsNull(this.tableMembers.IsVisibleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsVisibleNull() {
                this[this.tableMembers.IsVisibleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CalculatedMembersRow[] GetCalculatedMembersRows() {
                if ((this.Table.ChildRelations["MembersCalculatedMembers"] == null)) {
                    return new CalculatedMembersRow[0];
                }
                else {
                    return ((CalculatedMembersRow[])(base.GetChildRows(this.Table.ChildRelations["MembersCalculatedMembers"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Link_Mem_MemRow[] GetLink_Mem_MemRows() {
                if ((this.Table.ChildRelations["MembersLink_Mem_Mem"] == null)) {
                    return new Link_Mem_MemRow[0];
                }
                else {
                    return ((Link_Mem_MemRow[])(base.GetChildRows(this.Table.ChildRelations["MembersLink_Mem_Mem"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Link_Mem_LevelRow[] GetLink_Mem_LevelRows() {
                if ((this.Table.ChildRelations["MembersLink_Mem_Level"] == null)) {
                    return new Link_Mem_LevelRow[0];
                }
                else {
                    return ((Link_Mem_LevelRow[])(base.GetChildRows(this.Table.ChildRelations["MembersLink_Mem_Level"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Link_Mem_HierRow[] GetLink_Mem_HierRows() {
                if ((this.Table.ChildRelations["MembersLink_Mem_Hier"] == null)) {
                    return new Link_Mem_HierRow[0];
                }
                else {
                    return ((Link_Mem_HierRow[])(base.GetChildRows(this.Table.ChildRelations["MembersLink_Mem_Hier"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CalculatedMembersRow : global::System.Data.DataRow {
            
            private CalculatedMembersDataTable tableCalculatedMembers;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CalculatedMembersRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCalculatedMembers = ((CalculatedMembersDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MemberId {
                get {
                    return ((int)(this[this.tableCalculatedMembers.MemberIdColumn]));
                }
                set {
                    this[this.tableCalculatedMembers.MemberIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Expression {
                get {
                    try {
                        return ((string)(this[this.tableCalculatedMembers.ExpressionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Expression\' in table \'CalculatedMembers\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCalculatedMembers.ExpressionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SolveOrder {
                get {
                    try {
                        return ((int)(this[this.tableCalculatedMembers.SolveOrderColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SolveOrder\' in table \'CalculatedMembers\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCalculatedMembers.SolveOrderColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FormatString {
                get {
                    try {
                        return ((string)(this[this.tableCalculatedMembers.FormatStringColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FormatString\' in table \'CalculatedMembers\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCalculatedMembers.FormatStringColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWithMembers {
                get {
                    try {
                        return ((bool)(this[this.tableCalculatedMembers.IsWithMembersColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsWithMembers\' in table \'CalculatedMembers\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCalculatedMembers.IsWithMembersColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWithLevels {
                get {
                    try {
                        return ((bool)(this[this.tableCalculatedMembers.IsWithLevelsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsWithLevels\' in table \'CalculatedMembers\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCalculatedMembers.IsWithLevelsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWithHierarchies {
                get {
                    try {
                        return ((bool)(this[this.tableCalculatedMembers.IsWithHierarchiesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsWithHierarchies\' in table \'CalculatedMembers\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCalculatedMembers.IsWithHierarchiesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWithDimensions {
                get {
                    try {
                        return ((bool)(this[this.tableCalculatedMembers.IsWithDimensionsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsWithDimensions\' in table \'CalculatedMembers\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCalculatedMembers.IsWithDimensionsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MembersRow MembersRow {
                get {
                    return ((MembersRow)(this.GetParentRow(this.Table.ParentRelations["MembersCalculatedMembers"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["MembersCalculatedMembers"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExpressionNull() {
                return this.IsNull(this.tableCalculatedMembers.ExpressionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExpressionNull() {
                this[this.tableCalculatedMembers.ExpressionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSolveOrderNull() {
                return this.IsNull(this.tableCalculatedMembers.SolveOrderColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSolveOrderNull() {
                this[this.tableCalculatedMembers.SolveOrderColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFormatStringNull() {
                return this.IsNull(this.tableCalculatedMembers.FormatStringColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFormatStringNull() {
                this[this.tableCalculatedMembers.FormatStringColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsWithMembersNull() {
                return this.IsNull(this.tableCalculatedMembers.IsWithMembersColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsWithMembersNull() {
                this[this.tableCalculatedMembers.IsWithMembersColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsWithLevelsNull() {
                return this.IsNull(this.tableCalculatedMembers.IsWithLevelsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsWithLevelsNull() {
                this[this.tableCalculatedMembers.IsWithLevelsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsWithHierarchiesNull() {
                return this.IsNull(this.tableCalculatedMembers.IsWithHierarchiesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsWithHierarchiesNull() {
                this[this.tableCalculatedMembers.IsWithHierarchiesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsWithDimensionsNull() {
                return this.IsNull(this.tableCalculatedMembers.IsWithDimensionsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsWithDimensionsNull() {
                this[this.tableCalculatedMembers.IsWithDimensionsColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class OrderTupleRow : global::System.Data.DataRow {
            
            private OrderTupleDataTable tableOrderTuple;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OrderTupleRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableOrderTuple = ((OrderTupleDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UniqueName {
                get {
                    try {
                        return ((string)(this[this.tableOrderTuple.UniqueNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UniqueName\' in table \'OrderTuple\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrderTuple.UniqueNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUniqueNameNull() {
                return this.IsNull(this.tableOrderTuple.UniqueNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUniqueNameNull() {
                this[this.tableOrderTuple.UniqueNameColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Link_Mem_HierRow : global::System.Data.DataRow {
            
            private Link_Mem_HierDataTable tableLink_Mem_Hier;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Link_Mem_HierRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLink_Mem_Hier = ((Link_Mem_HierDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MemId {
                get {
                    try {
                        return ((int)(this[this.tableLink_Mem_Hier.MemIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MemId\' in table \'Link_Mem_Hier\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLink_Mem_Hier.MemIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int HierId {
                get {
                    try {
                        return ((int)(this[this.tableLink_Mem_Hier.HierIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HierId\' in table \'Link_Mem_Hier\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLink_Mem_Hier.HierIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVital {
                get {
                    try {
                        return ((bool)(this[this.tableLink_Mem_Hier.IsVitalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsVital\' in table \'Link_Mem_Hier\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLink_Mem_Hier.IsVitalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MembersRow MembersRow {
                get {
                    return ((MembersRow)(this.GetParentRow(this.Table.ParentRelations["MembersLink_Mem_Hier"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["MembersLink_Mem_Hier"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMemIdNull() {
                return this.IsNull(this.tableLink_Mem_Hier.MemIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMemIdNull() {
                this[this.tableLink_Mem_Hier.MemIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHierIdNull() {
                return this.IsNull(this.tableLink_Mem_Hier.HierIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHierIdNull() {
                this[this.tableLink_Mem_Hier.HierIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsVitalNull() {
                return this.IsNull(this.tableLink_Mem_Hier.IsVitalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsVitalNull() {
                this[this.tableLink_Mem_Hier.IsVitalColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Link_Mem_LevelRow : global::System.Data.DataRow {
            
            private Link_Mem_LevelDataTable tableLink_Mem_Level;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Link_Mem_LevelRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLink_Mem_Level = ((Link_Mem_LevelDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MemId {
                get {
                    try {
                        return ((int)(this[this.tableLink_Mem_Level.MemIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MemId\' in table \'Link_Mem_Level\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLink_Mem_Level.MemIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LevelId {
                get {
                    try {
                        return ((int)(this[this.tableLink_Mem_Level.LevelIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LevelId\' in table \'Link_Mem_Level\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLink_Mem_Level.LevelIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVital {
                get {
                    try {
                        return ((bool)(this[this.tableLink_Mem_Level.IsVitalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsVital\' in table \'Link_Mem_Level\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLink_Mem_Level.IsVitalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MembersRow MembersRow {
                get {
                    return ((MembersRow)(this.GetParentRow(this.Table.ParentRelations["MembersLink_Mem_Level"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["MembersLink_Mem_Level"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMemIdNull() {
                return this.IsNull(this.tableLink_Mem_Level.MemIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMemIdNull() {
                this[this.tableLink_Mem_Level.MemIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLevelIdNull() {
                return this.IsNull(this.tableLink_Mem_Level.LevelIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLevelIdNull() {
                this[this.tableLink_Mem_Level.LevelIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsVitalNull() {
                return this.IsNull(this.tableLink_Mem_Level.IsVitalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsVitalNull() {
                this[this.tableLink_Mem_Level.IsVitalColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Link_Mem_MemRow : global::System.Data.DataRow {
            
            private Link_Mem_MemDataTable tableLink_Mem_Mem;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Link_Mem_MemRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLink_Mem_Mem = ((Link_Mem_MemDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ParentMemId {
                get {
                    try {
                        return ((int)(this[this.tableLink_Mem_Mem.ParentMemIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ParentMemId\' in table \'Link_Mem_Mem\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLink_Mem_Mem.ParentMemIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ChildMemId {
                get {
                    try {
                        return ((int)(this[this.tableLink_Mem_Mem.ChildMemIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ChildMemId\' in table \'Link_Mem_Mem\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLink_Mem_Mem.ChildMemIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVital {
                get {
                    try {
                        return ((bool)(this[this.tableLink_Mem_Mem.IsVitalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsVital\' in table \'Link_Mem_Mem\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLink_Mem_Mem.IsVitalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MembersRow MembersRow {
                get {
                    return ((MembersRow)(this.GetParentRow(this.Table.ParentRelations["MembersLink_Mem_Mem"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["MembersLink_Mem_Mem"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParentMemIdNull() {
                return this.IsNull(this.tableLink_Mem_Mem.ParentMemIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParentMemIdNull() {
                this[this.tableLink_Mem_Mem.ParentMemIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsChildMemIdNull() {
                return this.IsNull(this.tableLink_Mem_Mem.ChildMemIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetChildMemIdNull() {
                this[this.tableLink_Mem_Mem.ChildMemIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsVitalNull() {
                return this.IsNull(this.tableLink_Mem_Mem.IsVitalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsVitalNull() {
                this[this.tableLink_Mem_Mem.IsVitalColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class OpenNodesRow : global::System.Data.DataRow {
            
            private OpenNodesDataTable tableOpenNodes;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OpenNodesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableOpenNodes = ((OpenNodesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UniqueName {
                get {
                    return ((string)(this[this.tableOpenNodes.UniqueNameColumn]));
                }
                set {
                    this[this.tableOpenNodes.UniqueNameColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class HeaderRowChangeEvent : global::System.EventArgs {
            
            private HeaderRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HeaderRowChangeEvent(HeaderRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HeaderRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DimensionsRowChangeEvent : global::System.EventArgs {
            
            private DimensionsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DimensionsRowChangeEvent(DimensionsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DimensionsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class HierarchiesRowChangeEvent : global::System.EventArgs {
            
            private HierarchiesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HierarchiesRowChangeEvent(HierarchiesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HierarchiesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LevelsRowChangeEvent : global::System.EventArgs {
            
            private LevelsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LevelsRowChangeEvent(LevelsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LevelsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class MembersRowChangeEvent : global::System.EventArgs {
            
            private MembersRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MembersRowChangeEvent(MembersRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MembersRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CalculatedMembersRowChangeEvent : global::System.EventArgs {
            
            private CalculatedMembersRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CalculatedMembersRowChangeEvent(CalculatedMembersRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CalculatedMembersRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class OrderTupleRowChangeEvent : global::System.EventArgs {
            
            private OrderTupleRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OrderTupleRowChangeEvent(OrderTupleRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OrderTupleRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Link_Mem_HierRowChangeEvent : global::System.EventArgs {
            
            private Link_Mem_HierRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Link_Mem_HierRowChangeEvent(Link_Mem_HierRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Link_Mem_HierRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Link_Mem_LevelRowChangeEvent : global::System.EventArgs {
            
            private Link_Mem_LevelRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Link_Mem_LevelRowChangeEvent(Link_Mem_LevelRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Link_Mem_LevelRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Link_Mem_MemRowChangeEvent : global::System.EventArgs {
            
            private Link_Mem_MemRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Link_Mem_MemRowChangeEvent(Link_Mem_MemRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Link_Mem_MemRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class OpenNodesRowChangeEvent : global::System.EventArgs {
            
            private OpenNodesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OpenNodesRowChangeEvent(OpenNodesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OpenNodesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591