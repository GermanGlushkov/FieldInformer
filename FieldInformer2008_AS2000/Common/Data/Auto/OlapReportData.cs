//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace FI.Common.Data.Auto {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class OlapReportData : DataSet {
        
        private HeaderDataTable tableHeader;
        
        private DimensionsDataTable tableDimensions;
        
        private HierarchiesDataTable tableHierarchies;
        
        private LevelsDataTable tableLevels;
        
        private MembersDataTable tableMembers;
        
        private CalculatedMembersDataTable tableCalculatedMembers;
        
        private OrderTupleDataTable tableOrderTuple;
        
        private Link_Mem_HierDataTable tableLink_Mem_Hier;
        
        private Link_Mem_LevelDataTable tableLink_Mem_Level;
        
        private Link_Mem_MemDataTable tableLink_Mem_Mem;
        
        private OpenNodesDataTable tableOpenNodes;
        
        private DataRelation relationDimensionsHierarchies;
        
        private DataRelation relationMembersCalculatedMembers;
        
        private DataRelation relationHierarchiesLevels;
        
        private DataRelation relationHierarchiesMembers;
        
        private DataRelation relationMembersLink_Mem_Mem;
        
        private DataRelation relationMembersLink_Mem_Level;
        
        private DataRelation relationMembersLink_Mem_Hier;
        
        public OlapReportData() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected OlapReportData(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Header"] != null)) {
                    this.Tables.Add(new HeaderDataTable(ds.Tables["Header"]));
                }
                if ((ds.Tables["Dimensions"] != null)) {
                    this.Tables.Add(new DimensionsDataTable(ds.Tables["Dimensions"]));
                }
                if ((ds.Tables["Hierarchies"] != null)) {
                    this.Tables.Add(new HierarchiesDataTable(ds.Tables["Hierarchies"]));
                }
                if ((ds.Tables["Levels"] != null)) {
                    this.Tables.Add(new LevelsDataTable(ds.Tables["Levels"]));
                }
                if ((ds.Tables["Members"] != null)) {
                    this.Tables.Add(new MembersDataTable(ds.Tables["Members"]));
                }
                if ((ds.Tables["CalculatedMembers"] != null)) {
                    this.Tables.Add(new CalculatedMembersDataTable(ds.Tables["CalculatedMembers"]));
                }
                if ((ds.Tables["OrderTuple"] != null)) {
                    this.Tables.Add(new OrderTupleDataTable(ds.Tables["OrderTuple"]));
                }
                if ((ds.Tables["Link_Mem_Hier"] != null)) {
                    this.Tables.Add(new Link_Mem_HierDataTable(ds.Tables["Link_Mem_Hier"]));
                }
                if ((ds.Tables["Link_Mem_Level"] != null)) {
                    this.Tables.Add(new Link_Mem_LevelDataTable(ds.Tables["Link_Mem_Level"]));
                }
                if ((ds.Tables["Link_Mem_Mem"] != null)) {
                    this.Tables.Add(new Link_Mem_MemDataTable(ds.Tables["Link_Mem_Mem"]));
                }
                if ((ds.Tables["OpenNodes"] != null)) {
                    this.Tables.Add(new OpenNodesDataTable(ds.Tables["OpenNodes"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public HeaderDataTable Header {
            get {
                return this.tableHeader;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DimensionsDataTable Dimensions {
            get {
                return this.tableDimensions;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public HierarchiesDataTable Hierarchies {
            get {
                return this.tableHierarchies;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LevelsDataTable Levels {
            get {
                return this.tableLevels;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MembersDataTable Members {
            get {
                return this.tableMembers;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CalculatedMembersDataTable CalculatedMembers {
            get {
                return this.tableCalculatedMembers;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public OrderTupleDataTable OrderTuple {
            get {
                return this.tableOrderTuple;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Link_Mem_HierDataTable Link_Mem_Hier {
            get {
                return this.tableLink_Mem_Hier;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Link_Mem_LevelDataTable Link_Mem_Level {
            get {
                return this.tableLink_Mem_Level;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Link_Mem_MemDataTable Link_Mem_Mem {
            get {
                return this.tableLink_Mem_Mem;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public OpenNodesDataTable OpenNodes {
            get {
                return this.tableOpenNodes;
            }
        }
        
        public override DataSet Clone() {
            OlapReportData cln = ((OlapReportData)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["Header"] != null)) {
                this.Tables.Add(new HeaderDataTable(ds.Tables["Header"]));
            }
            if ((ds.Tables["Dimensions"] != null)) {
                this.Tables.Add(new DimensionsDataTable(ds.Tables["Dimensions"]));
            }
            if ((ds.Tables["Hierarchies"] != null)) {
                this.Tables.Add(new HierarchiesDataTable(ds.Tables["Hierarchies"]));
            }
            if ((ds.Tables["Levels"] != null)) {
                this.Tables.Add(new LevelsDataTable(ds.Tables["Levels"]));
            }
            if ((ds.Tables["Members"] != null)) {
                this.Tables.Add(new MembersDataTable(ds.Tables["Members"]));
            }
            if ((ds.Tables["CalculatedMembers"] != null)) {
                this.Tables.Add(new CalculatedMembersDataTable(ds.Tables["CalculatedMembers"]));
            }
            if ((ds.Tables["OrderTuple"] != null)) {
                this.Tables.Add(new OrderTupleDataTable(ds.Tables["OrderTuple"]));
            }
            if ((ds.Tables["Link_Mem_Hier"] != null)) {
                this.Tables.Add(new Link_Mem_HierDataTable(ds.Tables["Link_Mem_Hier"]));
            }
            if ((ds.Tables["Link_Mem_Level"] != null)) {
                this.Tables.Add(new Link_Mem_LevelDataTable(ds.Tables["Link_Mem_Level"]));
            }
            if ((ds.Tables["Link_Mem_Mem"] != null)) {
                this.Tables.Add(new Link_Mem_MemDataTable(ds.Tables["Link_Mem_Mem"]));
            }
            if ((ds.Tables["OpenNodes"] != null)) {
                this.Tables.Add(new OpenNodesDataTable(ds.Tables["OpenNodes"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableHeader = ((HeaderDataTable)(this.Tables["Header"]));
            if ((this.tableHeader != null)) {
                this.tableHeader.InitVars();
            }
            this.tableDimensions = ((DimensionsDataTable)(this.Tables["Dimensions"]));
            if ((this.tableDimensions != null)) {
                this.tableDimensions.InitVars();
            }
            this.tableHierarchies = ((HierarchiesDataTable)(this.Tables["Hierarchies"]));
            if ((this.tableHierarchies != null)) {
                this.tableHierarchies.InitVars();
            }
            this.tableLevels = ((LevelsDataTable)(this.Tables["Levels"]));
            if ((this.tableLevels != null)) {
                this.tableLevels.InitVars();
            }
            this.tableMembers = ((MembersDataTable)(this.Tables["Members"]));
            if ((this.tableMembers != null)) {
                this.tableMembers.InitVars();
            }
            this.tableCalculatedMembers = ((CalculatedMembersDataTable)(this.Tables["CalculatedMembers"]));
            if ((this.tableCalculatedMembers != null)) {
                this.tableCalculatedMembers.InitVars();
            }
            this.tableOrderTuple = ((OrderTupleDataTable)(this.Tables["OrderTuple"]));
            if ((this.tableOrderTuple != null)) {
                this.tableOrderTuple.InitVars();
            }
            this.tableLink_Mem_Hier = ((Link_Mem_HierDataTable)(this.Tables["Link_Mem_Hier"]));
            if ((this.tableLink_Mem_Hier != null)) {
                this.tableLink_Mem_Hier.InitVars();
            }
            this.tableLink_Mem_Level = ((Link_Mem_LevelDataTable)(this.Tables["Link_Mem_Level"]));
            if ((this.tableLink_Mem_Level != null)) {
                this.tableLink_Mem_Level.InitVars();
            }
            this.tableLink_Mem_Mem = ((Link_Mem_MemDataTable)(this.Tables["Link_Mem_Mem"]));
            if ((this.tableLink_Mem_Mem != null)) {
                this.tableLink_Mem_Mem.InitVars();
            }
            this.tableOpenNodes = ((OpenNodesDataTable)(this.Tables["OpenNodes"]));
            if ((this.tableOpenNodes != null)) {
                this.tableOpenNodes.InitVars();
            }
            this.relationDimensionsHierarchies = this.Relations["DimensionsHierarchies"];
            this.relationMembersCalculatedMembers = this.Relations["MembersCalculatedMembers"];
            this.relationHierarchiesLevels = this.Relations["HierarchiesLevels"];
            this.relationHierarchiesMembers = this.Relations["HierarchiesMembers"];
            this.relationMembersLink_Mem_Mem = this.Relations["MembersLink_Mem_Mem"];
            this.relationMembersLink_Mem_Level = this.Relations["MembersLink_Mem_Level"];
            this.relationMembersLink_Mem_Hier = this.Relations["MembersLink_Mem_Hier"];
        }
        
        private void InitClass() {
            this.DataSetName = "OlapReportData";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/OlapReportData.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableHeader = new HeaderDataTable();
            this.Tables.Add(this.tableHeader);
            this.tableDimensions = new DimensionsDataTable();
            this.Tables.Add(this.tableDimensions);
            this.tableHierarchies = new HierarchiesDataTable();
            this.Tables.Add(this.tableHierarchies);
            this.tableLevels = new LevelsDataTable();
            this.Tables.Add(this.tableLevels);
            this.tableMembers = new MembersDataTable();
            this.Tables.Add(this.tableMembers);
            this.tableCalculatedMembers = new CalculatedMembersDataTable();
            this.Tables.Add(this.tableCalculatedMembers);
            this.tableOrderTuple = new OrderTupleDataTable();
            this.Tables.Add(this.tableOrderTuple);
            this.tableLink_Mem_Hier = new Link_Mem_HierDataTable();
            this.Tables.Add(this.tableLink_Mem_Hier);
            this.tableLink_Mem_Level = new Link_Mem_LevelDataTable();
            this.Tables.Add(this.tableLink_Mem_Level);
            this.tableLink_Mem_Mem = new Link_Mem_MemDataTable();
            this.Tables.Add(this.tableLink_Mem_Mem);
            this.tableOpenNodes = new OpenNodesDataTable();
            this.Tables.Add(this.tableOpenNodes);
            ForeignKeyConstraint fkc;
            fkc = new ForeignKeyConstraint("DimensionsHierarchies", new DataColumn[] {
                        this.tableDimensions.IdColumn}, new DataColumn[] {
                        this.tableHierarchies.DimIdColumn});
            this.tableHierarchies.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("HierarchiesLevels", new DataColumn[] {
                        this.tableHierarchies.IdColumn}, new DataColumn[] {
                        this.tableLevels.HierIdColumn});
            this.tableLevels.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("HierarchiesMembers", new DataColumn[] {
                        this.tableHierarchies.IdColumn}, new DataColumn[] {
                        this.tableMembers.HierIdColumn});
            this.tableMembers.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("MembersCalculatedMembers", new DataColumn[] {
                        this.tableMembers.IdColumn}, new DataColumn[] {
                        this.tableCalculatedMembers.MemberIdColumn});
            this.tableCalculatedMembers.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("MembersLink_Mem_Hier", new DataColumn[] {
                        this.tableMembers.IdColumn}, new DataColumn[] {
                        this.tableLink_Mem_Hier.MemIdColumn});
            this.tableLink_Mem_Hier.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("MembersLink_Mem_Level", new DataColumn[] {
                        this.tableMembers.IdColumn}, new DataColumn[] {
                        this.tableLink_Mem_Level.MemIdColumn});
            this.tableLink_Mem_Level.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("MembersLink_Mem_Mem", new DataColumn[] {
                        this.tableMembers.IdColumn}, new DataColumn[] {
                        this.tableLink_Mem_Mem.ParentMemIdColumn});
            this.tableLink_Mem_Mem.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            this.relationDimensionsHierarchies = new DataRelation("DimensionsHierarchies", new DataColumn[] {
                        this.tableDimensions.IdColumn}, new DataColumn[] {
                        this.tableHierarchies.DimIdColumn}, false);
            this.Relations.Add(this.relationDimensionsHierarchies);
            this.relationMembersCalculatedMembers = new DataRelation("MembersCalculatedMembers", new DataColumn[] {
                        this.tableMembers.IdColumn}, new DataColumn[] {
                        this.tableCalculatedMembers.MemberIdColumn}, false);
            this.Relations.Add(this.relationMembersCalculatedMembers);
            this.relationHierarchiesLevels = new DataRelation("HierarchiesLevels", new DataColumn[] {
                        this.tableHierarchies.IdColumn}, new DataColumn[] {
                        this.tableLevels.HierIdColumn}, false);
            this.Relations.Add(this.relationHierarchiesLevels);
            this.relationHierarchiesMembers = new DataRelation("HierarchiesMembers", new DataColumn[] {
                        this.tableHierarchies.IdColumn}, new DataColumn[] {
                        this.tableMembers.HierIdColumn}, false);
            this.Relations.Add(this.relationHierarchiesMembers);
            this.relationMembersLink_Mem_Mem = new DataRelation("MembersLink_Mem_Mem", new DataColumn[] {
                        this.tableMembers.IdColumn}, new DataColumn[] {
                        this.tableLink_Mem_Mem.ParentMemIdColumn}, false);
            this.Relations.Add(this.relationMembersLink_Mem_Mem);
            this.relationMembersLink_Mem_Level = new DataRelation("MembersLink_Mem_Level", new DataColumn[] {
                        this.tableMembers.IdColumn}, new DataColumn[] {
                        this.tableLink_Mem_Level.MemIdColumn}, false);
            this.Relations.Add(this.relationMembersLink_Mem_Level);
            this.relationMembersLink_Mem_Hier = new DataRelation("MembersLink_Mem_Hier", new DataColumn[] {
                        this.tableMembers.IdColumn}, new DataColumn[] {
                        this.tableLink_Mem_Hier.MemIdColumn}, false);
            this.Relations.Add(this.relationMembersLink_Mem_Hier);
        }
        
        private bool ShouldSerializeHeader() {
            return false;
        }
        
        private bool ShouldSerializeDimensions() {
            return false;
        }
        
        private bool ShouldSerializeHierarchies() {
            return false;
        }
        
        private bool ShouldSerializeLevels() {
            return false;
        }
        
        private bool ShouldSerializeMembers() {
            return false;
        }
        
        private bool ShouldSerializeCalculatedMembers() {
            return false;
        }
        
        private bool ShouldSerializeOrderTuple() {
            return false;
        }
        
        private bool ShouldSerializeLink_Mem_Hier() {
            return false;
        }
        
        private bool ShouldSerializeLink_Mem_Level() {
            return false;
        }
        
        private bool ShouldSerializeLink_Mem_Mem() {
            return false;
        }
        
        private bool ShouldSerializeOpenNodes() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void HeaderRowChangeEventHandler(object sender, HeaderRowChangeEvent e);
        
        public delegate void DimensionsRowChangeEventHandler(object sender, DimensionsRowChangeEvent e);
        
        public delegate void HierarchiesRowChangeEventHandler(object sender, HierarchiesRowChangeEvent e);
        
        public delegate void LevelsRowChangeEventHandler(object sender, LevelsRowChangeEvent e);
        
        public delegate void MembersRowChangeEventHandler(object sender, MembersRowChangeEvent e);
        
        public delegate void CalculatedMembersRowChangeEventHandler(object sender, CalculatedMembersRowChangeEvent e);
        
        public delegate void OrderTupleRowChangeEventHandler(object sender, OrderTupleRowChangeEvent e);
        
        public delegate void Link_Mem_HierRowChangeEventHandler(object sender, Link_Mem_HierRowChangeEvent e);
        
        public delegate void Link_Mem_LevelRowChangeEventHandler(object sender, Link_Mem_LevelRowChangeEvent e);
        
        public delegate void Link_Mem_MemRowChangeEventHandler(object sender, Link_Mem_MemRowChangeEvent e);
        
        public delegate void OpenNodesRowChangeEventHandler(object sender, OpenNodesRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class HeaderDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnRptId;
            
            private DataColumn columnRptOwnerId;
            
            private DataColumn columnParentRptId;
            
            private DataColumn columnRptName;
            
            private DataColumn columnRptDescription;
            
            private DataColumn columnRptSchemaId;
            
            private DataColumn columnRptSchemaName;
            
            private DataColumn columnRptSchemaServer;
            
            private DataColumn columnRptSchemaDatabase;
            
            private DataColumn columnRptOrder;
            
            private DataColumn columnRptTimeRangeEnabled;
            
            private DataColumn columnRptTimeRangePrompt;
            
            private DataColumn columnRptTimeRangeStart;
            
            private DataColumn columnRptTimeRangeEnd;
            
            private DataColumn columnRptTimeRangeLevel;
            
            private DataColumn columnRptPercentageType;
            
            private DataColumn columnRptPercentageDim;
            
            private DataColumn columnRptPercentageMeasure;
            
            private DataColumn columnRptShowRowsOption;
            
            private DataColumn columnRptShowColumnsOption;
            
            internal HeaderDataTable() : 
                    base("Header") {
                this.InitClass();
            }
            
            internal HeaderDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn RptIdColumn {
                get {
                    return this.columnRptId;
                }
            }
            
            internal DataColumn RptOwnerIdColumn {
                get {
                    return this.columnRptOwnerId;
                }
            }
            
            internal DataColumn ParentRptIdColumn {
                get {
                    return this.columnParentRptId;
                }
            }
            
            internal DataColumn RptNameColumn {
                get {
                    return this.columnRptName;
                }
            }
            
            internal DataColumn RptDescriptionColumn {
                get {
                    return this.columnRptDescription;
                }
            }
            
            internal DataColumn RptSchemaIdColumn {
                get {
                    return this.columnRptSchemaId;
                }
            }
            
            internal DataColumn RptSchemaNameColumn {
                get {
                    return this.columnRptSchemaName;
                }
            }
            
            internal DataColumn RptSchemaServerColumn {
                get {
                    return this.columnRptSchemaServer;
                }
            }
            
            internal DataColumn RptSchemaDatabaseColumn {
                get {
                    return this.columnRptSchemaDatabase;
                }
            }
            
            internal DataColumn RptOrderColumn {
                get {
                    return this.columnRptOrder;
                }
            }
            
            internal DataColumn RptTimeRangeEnabledColumn {
                get {
                    return this.columnRptTimeRangeEnabled;
                }
            }
            
            internal DataColumn RptTimeRangePromptColumn {
                get {
                    return this.columnRptTimeRangePrompt;
                }
            }
            
            internal DataColumn RptTimeRangeStartColumn {
                get {
                    return this.columnRptTimeRangeStart;
                }
            }
            
            internal DataColumn RptTimeRangeEndColumn {
                get {
                    return this.columnRptTimeRangeEnd;
                }
            }
            
            internal DataColumn RptTimeRangeLevelColumn {
                get {
                    return this.columnRptTimeRangeLevel;
                }
            }
            
            internal DataColumn RptPercentageTypeColumn {
                get {
                    return this.columnRptPercentageType;
                }
            }
            
            internal DataColumn RptPercentageDimColumn {
                get {
                    return this.columnRptPercentageDim;
                }
            }
            
            internal DataColumn RptPercentageMeasureColumn {
                get {
                    return this.columnRptPercentageMeasure;
                }
            }
            
            internal DataColumn RptShowRowsOptionColumn {
                get {
                    return this.columnRptShowRowsOption;
                }
            }
            
            internal DataColumn RptShowColumnsOptionColumn {
                get {
                    return this.columnRptShowColumnsOption;
                }
            }
            
            public HeaderRow this[int index] {
                get {
                    return ((HeaderRow)(this.Rows[index]));
                }
            }
            
            public event HeaderRowChangeEventHandler HeaderRowChanged;
            
            public event HeaderRowChangeEventHandler HeaderRowChanging;
            
            public event HeaderRowChangeEventHandler HeaderRowDeleted;
            
            public event HeaderRowChangeEventHandler HeaderRowDeleting;
            
            public void AddHeaderRow(HeaderRow row) {
                this.Rows.Add(row);
            }
            
            public HeaderRow AddHeaderRow(
                        int RptId, 
                        int RptOwnerId, 
                        int ParentRptId, 
                        string RptName, 
                        string RptDescription, 
                        int RptSchemaId, 
                        string RptSchemaName, 
                        string RptSchemaServer, 
                        string RptSchemaDatabase, 
                        string RptOrder, 
                        bool RptTimeRangeEnabled, 
                        bool RptTimeRangePrompt, 
                        string RptTimeRangeStart, 
                        string RptTimeRangeEnd, 
                        string RptTimeRangeLevel, 
                        System.Byte RptPercentageType, 
                        string RptPercentageDim, 
                        string RptPercentageMeasure, 
                        System.Byte RptShowRowsOption, 
                        System.Byte RptShowColumnsOption) {
                HeaderRow rowHeaderRow = ((HeaderRow)(this.NewRow()));
                rowHeaderRow.ItemArray = new object[] {
                        RptId,
                        RptOwnerId,
                        ParentRptId,
                        RptName,
                        RptDescription,
                        RptSchemaId,
                        RptSchemaName,
                        RptSchemaServer,
                        RptSchemaDatabase,
                        RptOrder,
                        RptTimeRangeEnabled,
                        RptTimeRangePrompt,
                        RptTimeRangeStart,
                        RptTimeRangeEnd,
                        RptTimeRangeLevel,
                        RptPercentageType,
                        RptPercentageDim,
                        RptPercentageMeasure,
                        RptShowRowsOption,
                        RptShowColumnsOption};
                this.Rows.Add(rowHeaderRow);
                return rowHeaderRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                HeaderDataTable cln = ((HeaderDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new HeaderDataTable();
            }
            
            internal void InitVars() {
                this.columnRptId = this.Columns["RptId"];
                this.columnRptOwnerId = this.Columns["RptOwnerId"];
                this.columnParentRptId = this.Columns["ParentRptId"];
                this.columnRptName = this.Columns["RptName"];
                this.columnRptDescription = this.Columns["RptDescription"];
                this.columnRptSchemaId = this.Columns["RptSchemaId"];
                this.columnRptSchemaName = this.Columns["RptSchemaName"];
                this.columnRptSchemaServer = this.Columns["RptSchemaServer"];
                this.columnRptSchemaDatabase = this.Columns["RptSchemaDatabase"];
                this.columnRptOrder = this.Columns["RptOrder"];
                this.columnRptTimeRangeEnabled = this.Columns["RptTimeRangeEnabled"];
                this.columnRptTimeRangePrompt = this.Columns["RptTimeRangePrompt"];
                this.columnRptTimeRangeStart = this.Columns["RptTimeRangeStart"];
                this.columnRptTimeRangeEnd = this.Columns["RptTimeRangeEnd"];
                this.columnRptTimeRangeLevel = this.Columns["RptTimeRangeLevel"];
                this.columnRptPercentageType = this.Columns["RptPercentageType"];
                this.columnRptPercentageDim = this.Columns["RptPercentageDim"];
                this.columnRptPercentageMeasure = this.Columns["RptPercentageMeasure"];
                this.columnRptShowRowsOption = this.Columns["RptShowRowsOption"];
                this.columnRptShowColumnsOption = this.Columns["RptShowColumnsOption"];
            }
            
            private void InitClass() {
                this.columnRptId = new DataColumn("RptId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRptId);
                this.columnRptOwnerId = new DataColumn("RptOwnerId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRptOwnerId);
                this.columnParentRptId = new DataColumn("ParentRptId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnParentRptId);
                this.columnRptName = new DataColumn("RptName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRptName);
                this.columnRptDescription = new DataColumn("RptDescription", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRptDescription);
                this.columnRptSchemaId = new DataColumn("RptSchemaId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRptSchemaId);
                this.columnRptSchemaName = new DataColumn("RptSchemaName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRptSchemaName);
                this.columnRptSchemaServer = new DataColumn("RptSchemaServer", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRptSchemaServer);
                this.columnRptSchemaDatabase = new DataColumn("RptSchemaDatabase", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRptSchemaDatabase);
                this.columnRptOrder = new DataColumn("RptOrder", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRptOrder);
                this.columnRptTimeRangeEnabled = new DataColumn("RptTimeRangeEnabled", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRptTimeRangeEnabled);
                this.columnRptTimeRangePrompt = new DataColumn("RptTimeRangePrompt", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRptTimeRangePrompt);
                this.columnRptTimeRangeStart = new DataColumn("RptTimeRangeStart", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRptTimeRangeStart);
                this.columnRptTimeRangeEnd = new DataColumn("RptTimeRangeEnd", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRptTimeRangeEnd);
                this.columnRptTimeRangeLevel = new DataColumn("RptTimeRangeLevel", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRptTimeRangeLevel);
                this.columnRptPercentageType = new DataColumn("RptPercentageType", typeof(System.Byte), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRptPercentageType);
                this.columnRptPercentageDim = new DataColumn("RptPercentageDim", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRptPercentageDim);
                this.columnRptPercentageMeasure = new DataColumn("RptPercentageMeasure", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRptPercentageMeasure);
                this.columnRptShowRowsOption = new DataColumn("RptShowRowsOption", typeof(System.Byte), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRptShowRowsOption);
                this.columnRptShowColumnsOption = new DataColumn("RptShowColumnsOption", typeof(System.Byte), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRptShowColumnsOption);
            }
            
            public HeaderRow NewHeaderRow() {
                return ((HeaderRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new HeaderRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(HeaderRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.HeaderRowChanged != null)) {
                    this.HeaderRowChanged(this, new HeaderRowChangeEvent(((HeaderRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.HeaderRowChanging != null)) {
                    this.HeaderRowChanging(this, new HeaderRowChangeEvent(((HeaderRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.HeaderRowDeleted != null)) {
                    this.HeaderRowDeleted(this, new HeaderRowChangeEvent(((HeaderRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.HeaderRowDeleting != null)) {
                    this.HeaderRowDeleting(this, new HeaderRowChangeEvent(((HeaderRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveHeaderRow(HeaderRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class HeaderRow : DataRow {
            
            private HeaderDataTable tableHeader;
            
            internal HeaderRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableHeader = ((HeaderDataTable)(this.Table));
            }
            
            public int RptId {
                get {
                    try {
                        return ((int)(this[this.tableHeader.RptIdColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHeader.RptIdColumn] = value;
                }
            }
            
            public int RptOwnerId {
                get {
                    try {
                        return ((int)(this[this.tableHeader.RptOwnerIdColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHeader.RptOwnerIdColumn] = value;
                }
            }
            
            public int ParentRptId {
                get {
                    try {
                        return ((int)(this[this.tableHeader.ParentRptIdColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHeader.ParentRptIdColumn] = value;
                }
            }
            
            public string RptName {
                get {
                    try {
                        return ((string)(this[this.tableHeader.RptNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHeader.RptNameColumn] = value;
                }
            }
            
            public string RptDescription {
                get {
                    try {
                        return ((string)(this[this.tableHeader.RptDescriptionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHeader.RptDescriptionColumn] = value;
                }
            }
            
            public int RptSchemaId {
                get {
                    try {
                        return ((int)(this[this.tableHeader.RptSchemaIdColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHeader.RptSchemaIdColumn] = value;
                }
            }
            
            public string RptSchemaName {
                get {
                    try {
                        return ((string)(this[this.tableHeader.RptSchemaNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHeader.RptSchemaNameColumn] = value;
                }
            }
            
            public string RptSchemaServer {
                get {
                    try {
                        return ((string)(this[this.tableHeader.RptSchemaServerColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHeader.RptSchemaServerColumn] = value;
                }
            }
            
            public string RptSchemaDatabase {
                get {
                    try {
                        return ((string)(this[this.tableHeader.RptSchemaDatabaseColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHeader.RptSchemaDatabaseColumn] = value;
                }
            }
            
            public string RptOrder {
                get {
                    try {
                        return ((string)(this[this.tableHeader.RptOrderColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHeader.RptOrderColumn] = value;
                }
            }
            
            public bool RptTimeRangeEnabled {
                get {
                    try {
                        return ((bool)(this[this.tableHeader.RptTimeRangeEnabledColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHeader.RptTimeRangeEnabledColumn] = value;
                }
            }
            
            public bool RptTimeRangePrompt {
                get {
                    try {
                        return ((bool)(this[this.tableHeader.RptTimeRangePromptColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHeader.RptTimeRangePromptColumn] = value;
                }
            }
            
            public string RptTimeRangeStart {
                get {
                    try {
                        return ((string)(this[this.tableHeader.RptTimeRangeStartColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHeader.RptTimeRangeStartColumn] = value;
                }
            }
            
            public string RptTimeRangeEnd {
                get {
                    try {
                        return ((string)(this[this.tableHeader.RptTimeRangeEndColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHeader.RptTimeRangeEndColumn] = value;
                }
            }
            
            public string RptTimeRangeLevel {
                get {
                    try {
                        return ((string)(this[this.tableHeader.RptTimeRangeLevelColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHeader.RptTimeRangeLevelColumn] = value;
                }
            }
            
            public System.Byte RptPercentageType {
                get {
                    try {
                        return ((System.Byte)(this[this.tableHeader.RptPercentageTypeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHeader.RptPercentageTypeColumn] = value;
                }
            }
            
            public string RptPercentageDim {
                get {
                    try {
                        return ((string)(this[this.tableHeader.RptPercentageDimColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHeader.RptPercentageDimColumn] = value;
                }
            }
            
            public string RptPercentageMeasure {
                get {
                    try {
                        return ((string)(this[this.tableHeader.RptPercentageMeasureColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHeader.RptPercentageMeasureColumn] = value;
                }
            }
            
            public System.Byte RptShowRowsOption {
                get {
                    try {
                        return ((System.Byte)(this[this.tableHeader.RptShowRowsOptionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHeader.RptShowRowsOptionColumn] = value;
                }
            }
            
            public System.Byte RptShowColumnsOption {
                get {
                    try {
                        return ((System.Byte)(this[this.tableHeader.RptShowColumnsOptionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHeader.RptShowColumnsOptionColumn] = value;
                }
            }
            
            public bool IsRptIdNull() {
                return this.IsNull(this.tableHeader.RptIdColumn);
            }
            
            public void SetRptIdNull() {
                this[this.tableHeader.RptIdColumn] = System.Convert.DBNull;
            }
            
            public bool IsRptOwnerIdNull() {
                return this.IsNull(this.tableHeader.RptOwnerIdColumn);
            }
            
            public void SetRptOwnerIdNull() {
                this[this.tableHeader.RptOwnerIdColumn] = System.Convert.DBNull;
            }
            
            public bool IsParentRptIdNull() {
                return this.IsNull(this.tableHeader.ParentRptIdColumn);
            }
            
            public void SetParentRptIdNull() {
                this[this.tableHeader.ParentRptIdColumn] = System.Convert.DBNull;
            }
            
            public bool IsRptNameNull() {
                return this.IsNull(this.tableHeader.RptNameColumn);
            }
            
            public void SetRptNameNull() {
                this[this.tableHeader.RptNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsRptDescriptionNull() {
                return this.IsNull(this.tableHeader.RptDescriptionColumn);
            }
            
            public void SetRptDescriptionNull() {
                this[this.tableHeader.RptDescriptionColumn] = System.Convert.DBNull;
            }
            
            public bool IsRptSchemaIdNull() {
                return this.IsNull(this.tableHeader.RptSchemaIdColumn);
            }
            
            public void SetRptSchemaIdNull() {
                this[this.tableHeader.RptSchemaIdColumn] = System.Convert.DBNull;
            }
            
            public bool IsRptSchemaNameNull() {
                return this.IsNull(this.tableHeader.RptSchemaNameColumn);
            }
            
            public void SetRptSchemaNameNull() {
                this[this.tableHeader.RptSchemaNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsRptSchemaServerNull() {
                return this.IsNull(this.tableHeader.RptSchemaServerColumn);
            }
            
            public void SetRptSchemaServerNull() {
                this[this.tableHeader.RptSchemaServerColumn] = System.Convert.DBNull;
            }
            
            public bool IsRptSchemaDatabaseNull() {
                return this.IsNull(this.tableHeader.RptSchemaDatabaseColumn);
            }
            
            public void SetRptSchemaDatabaseNull() {
                this[this.tableHeader.RptSchemaDatabaseColumn] = System.Convert.DBNull;
            }
            
            public bool IsRptOrderNull() {
                return this.IsNull(this.tableHeader.RptOrderColumn);
            }
            
            public void SetRptOrderNull() {
                this[this.tableHeader.RptOrderColumn] = System.Convert.DBNull;
            }
            
            public bool IsRptTimeRangeEnabledNull() {
                return this.IsNull(this.tableHeader.RptTimeRangeEnabledColumn);
            }
            
            public void SetRptTimeRangeEnabledNull() {
                this[this.tableHeader.RptTimeRangeEnabledColumn] = System.Convert.DBNull;
            }
            
            public bool IsRptTimeRangePromptNull() {
                return this.IsNull(this.tableHeader.RptTimeRangePromptColumn);
            }
            
            public void SetRptTimeRangePromptNull() {
                this[this.tableHeader.RptTimeRangePromptColumn] = System.Convert.DBNull;
            }
            
            public bool IsRptTimeRangeStartNull() {
                return this.IsNull(this.tableHeader.RptTimeRangeStartColumn);
            }
            
            public void SetRptTimeRangeStartNull() {
                this[this.tableHeader.RptTimeRangeStartColumn] = System.Convert.DBNull;
            }
            
            public bool IsRptTimeRangeEndNull() {
                return this.IsNull(this.tableHeader.RptTimeRangeEndColumn);
            }
            
            public void SetRptTimeRangeEndNull() {
                this[this.tableHeader.RptTimeRangeEndColumn] = System.Convert.DBNull;
            }
            
            public bool IsRptTimeRangeLevelNull() {
                return this.IsNull(this.tableHeader.RptTimeRangeLevelColumn);
            }
            
            public void SetRptTimeRangeLevelNull() {
                this[this.tableHeader.RptTimeRangeLevelColumn] = System.Convert.DBNull;
            }
            
            public bool IsRptPercentageTypeNull() {
                return this.IsNull(this.tableHeader.RptPercentageTypeColumn);
            }
            
            public void SetRptPercentageTypeNull() {
                this[this.tableHeader.RptPercentageTypeColumn] = System.Convert.DBNull;
            }
            
            public bool IsRptPercentageDimNull() {
                return this.IsNull(this.tableHeader.RptPercentageDimColumn);
            }
            
            public void SetRptPercentageDimNull() {
                this[this.tableHeader.RptPercentageDimColumn] = System.Convert.DBNull;
            }
            
            public bool IsRptPercentageMeasureNull() {
                return this.IsNull(this.tableHeader.RptPercentageMeasureColumn);
            }
            
            public void SetRptPercentageMeasureNull() {
                this[this.tableHeader.RptPercentageMeasureColumn] = System.Convert.DBNull;
            }
            
            public bool IsRptShowRowsOptionNull() {
                return this.IsNull(this.tableHeader.RptShowRowsOptionColumn);
            }
            
            public void SetRptShowRowsOptionNull() {
                this[this.tableHeader.RptShowRowsOptionColumn] = System.Convert.DBNull;
            }
            
            public bool IsRptShowColumnsOptionNull() {
                return this.IsNull(this.tableHeader.RptShowColumnsOptionColumn);
            }
            
            public void SetRptShowColumnsOptionNull() {
                this[this.tableHeader.RptShowColumnsOptionColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class HeaderRowChangeEvent : EventArgs {
            
            private HeaderRow eventRow;
            
            private DataRowAction eventAction;
            
            public HeaderRowChangeEvent(HeaderRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public HeaderRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class DimensionsDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnId;
            
            private DataColumn columnUniqueName;
            
            private DataColumn columnName;
            
            private DataColumn columnIsOpen;
            
            internal DimensionsDataTable() : 
                    base("Dimensions") {
                this.InitClass();
            }
            
            internal DimensionsDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn IdColumn {
                get {
                    return this.columnId;
                }
            }
            
            internal DataColumn UniqueNameColumn {
                get {
                    return this.columnUniqueName;
                }
            }
            
            internal DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            internal DataColumn IsOpenColumn {
                get {
                    return this.columnIsOpen;
                }
            }
            
            public DimensionsRow this[int index] {
                get {
                    return ((DimensionsRow)(this.Rows[index]));
                }
            }
            
            public event DimensionsRowChangeEventHandler DimensionsRowChanged;
            
            public event DimensionsRowChangeEventHandler DimensionsRowChanging;
            
            public event DimensionsRowChangeEventHandler DimensionsRowDeleted;
            
            public event DimensionsRowChangeEventHandler DimensionsRowDeleting;
            
            public void AddDimensionsRow(DimensionsRow row) {
                this.Rows.Add(row);
            }
            
            public DimensionsRow AddDimensionsRow(string UniqueName, string Name, bool IsOpen) {
                DimensionsRow rowDimensionsRow = ((DimensionsRow)(this.NewRow()));
                rowDimensionsRow.ItemArray = new object[] {
                        null,
                        UniqueName,
                        Name,
                        IsOpen};
                this.Rows.Add(rowDimensionsRow);
                return rowDimensionsRow;
            }
            
            public DimensionsRow FindByUniqueName(string UniqueName) {
                return ((DimensionsRow)(this.Rows.Find(new object[] {
                            UniqueName})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                DimensionsDataTable cln = ((DimensionsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new DimensionsDataTable();
            }
            
            internal void InitVars() {
                this.columnId = this.Columns["Id"];
                this.columnUniqueName = this.Columns["UniqueName"];
                this.columnName = this.Columns["Name"];
                this.columnIsOpen = this.Columns["IsOpen"];
            }
            
            private void InitClass() {
                this.columnId = new DataColumn("Id", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnId);
                this.columnUniqueName = new DataColumn("UniqueName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUniqueName);
                this.columnName = new DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnName);
                this.columnIsOpen = new DataColumn("IsOpen", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsOpen);
                this.Constraints.Add(new UniqueConstraint("PK_Dimensions", new DataColumn[] {
                                this.columnId}, false));
                this.Constraints.Add(new UniqueConstraint("IX_Dimensions_UN", new DataColumn[] {
                                this.columnUniqueName}, true));
                this.columnId.AutoIncrement = true;
                this.columnId.AllowDBNull = false;
                this.columnId.Unique = true;
                this.columnUniqueName.AllowDBNull = false;
                this.columnUniqueName.Unique = true;
            }
            
            public DimensionsRow NewDimensionsRow() {
                return ((DimensionsRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new DimensionsRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(DimensionsRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DimensionsRowChanged != null)) {
                    this.DimensionsRowChanged(this, new DimensionsRowChangeEvent(((DimensionsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DimensionsRowChanging != null)) {
                    this.DimensionsRowChanging(this, new DimensionsRowChangeEvent(((DimensionsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DimensionsRowDeleted != null)) {
                    this.DimensionsRowDeleted(this, new DimensionsRowChangeEvent(((DimensionsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DimensionsRowDeleting != null)) {
                    this.DimensionsRowDeleting(this, new DimensionsRowChangeEvent(((DimensionsRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveDimensionsRow(DimensionsRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class DimensionsRow : DataRow {
            
            private DimensionsDataTable tableDimensions;
            
            internal DimensionsRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableDimensions = ((DimensionsDataTable)(this.Table));
            }
            
            public int Id {
                get {
                    return ((int)(this[this.tableDimensions.IdColumn]));
                }
                set {
                    this[this.tableDimensions.IdColumn] = value;
                }
            }
            
            public string UniqueName {
                get {
                    return ((string)(this[this.tableDimensions.UniqueNameColumn]));
                }
                set {
                    this[this.tableDimensions.UniqueNameColumn] = value;
                }
            }
            
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableDimensions.NameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDimensions.NameColumn] = value;
                }
            }
            
            public bool IsOpen {
                get {
                    try {
                        return ((bool)(this[this.tableDimensions.IsOpenColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDimensions.IsOpenColumn] = value;
                }
            }
            
            public bool IsNameNull() {
                return this.IsNull(this.tableDimensions.NameColumn);
            }
            
            public void SetNameNull() {
                this[this.tableDimensions.NameColumn] = System.Convert.DBNull;
            }
            
            public bool IsIsOpenNull() {
                return this.IsNull(this.tableDimensions.IsOpenColumn);
            }
            
            public void SetIsOpenNull() {
                this[this.tableDimensions.IsOpenColumn] = System.Convert.DBNull;
            }
            
            public HierarchiesRow[] GetHierarchiesRows() {
                return ((HierarchiesRow[])(this.GetChildRows(this.Table.ChildRelations["DimensionsHierarchies"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class DimensionsRowChangeEvent : EventArgs {
            
            private DimensionsRow eventRow;
            
            private DataRowAction eventAction;
            
            public DimensionsRowChangeEvent(DimensionsRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public DimensionsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class HierarchiesDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnId;
            
            private DataColumn columnDimId;
            
            private DataColumn columnUniqueName;
            
            private DataColumn columnName;
            
            private DataColumn columnIsOpen;
            
            private DataColumn columnAxis;
            
            private DataColumn columnAxisPositionOrdinal;
            
            internal HierarchiesDataTable() : 
                    base("Hierarchies") {
                this.InitClass();
            }
            
            internal HierarchiesDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn IdColumn {
                get {
                    return this.columnId;
                }
            }
            
            internal DataColumn DimIdColumn {
                get {
                    return this.columnDimId;
                }
            }
            
            internal DataColumn UniqueNameColumn {
                get {
                    return this.columnUniqueName;
                }
            }
            
            internal DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            internal DataColumn IsOpenColumn {
                get {
                    return this.columnIsOpen;
                }
            }
            
            internal DataColumn AxisColumn {
                get {
                    return this.columnAxis;
                }
            }
            
            internal DataColumn AxisPositionOrdinalColumn {
                get {
                    return this.columnAxisPositionOrdinal;
                }
            }
            
            public HierarchiesRow this[int index] {
                get {
                    return ((HierarchiesRow)(this.Rows[index]));
                }
            }
            
            public event HierarchiesRowChangeEventHandler HierarchiesRowChanged;
            
            public event HierarchiesRowChangeEventHandler HierarchiesRowChanging;
            
            public event HierarchiesRowChangeEventHandler HierarchiesRowDeleted;
            
            public event HierarchiesRowChangeEventHandler HierarchiesRowDeleting;
            
            public void AddHierarchiesRow(HierarchiesRow row) {
                this.Rows.Add(row);
            }
            
            public HierarchiesRow AddHierarchiesRow(DimensionsRow parentDimensionsRowByDimensionsHierarchies, string UniqueName, string Name, bool IsOpen, short Axis, short AxisPositionOrdinal) {
                HierarchiesRow rowHierarchiesRow = ((HierarchiesRow)(this.NewRow()));
                rowHierarchiesRow.ItemArray = new object[] {
                        null,
                        parentDimensionsRowByDimensionsHierarchies[0],
                        UniqueName,
                        Name,
                        IsOpen,
                        Axis,
                        AxisPositionOrdinal};
                this.Rows.Add(rowHierarchiesRow);
                return rowHierarchiesRow;
            }
            
            public HierarchiesRow FindByUniqueName(string UniqueName) {
                return ((HierarchiesRow)(this.Rows.Find(new object[] {
                            UniqueName})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                HierarchiesDataTable cln = ((HierarchiesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new HierarchiesDataTable();
            }
            
            internal void InitVars() {
                this.columnId = this.Columns["Id"];
                this.columnDimId = this.Columns["DimId"];
                this.columnUniqueName = this.Columns["UniqueName"];
                this.columnName = this.Columns["Name"];
                this.columnIsOpen = this.Columns["IsOpen"];
                this.columnAxis = this.Columns["Axis"];
                this.columnAxisPositionOrdinal = this.Columns["AxisPositionOrdinal"];
            }
            
            private void InitClass() {
                this.columnId = new DataColumn("Id", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnId);
                this.columnDimId = new DataColumn("DimId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDimId);
                this.columnUniqueName = new DataColumn("UniqueName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUniqueName);
                this.columnName = new DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnName);
                this.columnIsOpen = new DataColumn("IsOpen", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsOpen);
                this.columnAxis = new DataColumn("Axis", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAxis);
                this.columnAxisPositionOrdinal = new DataColumn("AxisPositionOrdinal", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAxisPositionOrdinal);
                this.Constraints.Add(new UniqueConstraint("IX_Hierarchies_UN", new DataColumn[] {
                                this.columnUniqueName}, true));
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnId}, false));
                this.columnId.AutoIncrement = true;
                this.columnId.AllowDBNull = false;
                this.columnId.Unique = true;
                this.columnUniqueName.AllowDBNull = false;
                this.columnUniqueName.Unique = true;
            }
            
            public HierarchiesRow NewHierarchiesRow() {
                return ((HierarchiesRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new HierarchiesRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(HierarchiesRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.HierarchiesRowChanged != null)) {
                    this.HierarchiesRowChanged(this, new HierarchiesRowChangeEvent(((HierarchiesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.HierarchiesRowChanging != null)) {
                    this.HierarchiesRowChanging(this, new HierarchiesRowChangeEvent(((HierarchiesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.HierarchiesRowDeleted != null)) {
                    this.HierarchiesRowDeleted(this, new HierarchiesRowChangeEvent(((HierarchiesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.HierarchiesRowDeleting != null)) {
                    this.HierarchiesRowDeleting(this, new HierarchiesRowChangeEvent(((HierarchiesRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveHierarchiesRow(HierarchiesRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class HierarchiesRow : DataRow {
            
            private HierarchiesDataTable tableHierarchies;
            
            internal HierarchiesRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableHierarchies = ((HierarchiesDataTable)(this.Table));
            }
            
            public int Id {
                get {
                    return ((int)(this[this.tableHierarchies.IdColumn]));
                }
                set {
                    this[this.tableHierarchies.IdColumn] = value;
                }
            }
            
            public int DimId {
                get {
                    try {
                        return ((int)(this[this.tableHierarchies.DimIdColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHierarchies.DimIdColumn] = value;
                }
            }
            
            public string UniqueName {
                get {
                    return ((string)(this[this.tableHierarchies.UniqueNameColumn]));
                }
                set {
                    this[this.tableHierarchies.UniqueNameColumn] = value;
                }
            }
            
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableHierarchies.NameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHierarchies.NameColumn] = value;
                }
            }
            
            public bool IsOpen {
                get {
                    try {
                        return ((bool)(this[this.tableHierarchies.IsOpenColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHierarchies.IsOpenColumn] = value;
                }
            }
            
            public short Axis {
                get {
                    try {
                        return ((short)(this[this.tableHierarchies.AxisColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHierarchies.AxisColumn] = value;
                }
            }
            
            public short AxisPositionOrdinal {
                get {
                    try {
                        return ((short)(this[this.tableHierarchies.AxisPositionOrdinalColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHierarchies.AxisPositionOrdinalColumn] = value;
                }
            }
            
            public DimensionsRow DimensionsRow {
                get {
                    return ((DimensionsRow)(this.GetParentRow(this.Table.ParentRelations["DimensionsHierarchies"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["DimensionsHierarchies"]);
                }
            }
            
            public bool IsDimIdNull() {
                return this.IsNull(this.tableHierarchies.DimIdColumn);
            }
            
            public void SetDimIdNull() {
                this[this.tableHierarchies.DimIdColumn] = System.Convert.DBNull;
            }
            
            public bool IsNameNull() {
                return this.IsNull(this.tableHierarchies.NameColumn);
            }
            
            public void SetNameNull() {
                this[this.tableHierarchies.NameColumn] = System.Convert.DBNull;
            }
            
            public bool IsIsOpenNull() {
                return this.IsNull(this.tableHierarchies.IsOpenColumn);
            }
            
            public void SetIsOpenNull() {
                this[this.tableHierarchies.IsOpenColumn] = System.Convert.DBNull;
            }
            
            public bool IsAxisNull() {
                return this.IsNull(this.tableHierarchies.AxisColumn);
            }
            
            public void SetAxisNull() {
                this[this.tableHierarchies.AxisColumn] = System.Convert.DBNull;
            }
            
            public bool IsAxisPositionOrdinalNull() {
                return this.IsNull(this.tableHierarchies.AxisPositionOrdinalColumn);
            }
            
            public void SetAxisPositionOrdinalNull() {
                this[this.tableHierarchies.AxisPositionOrdinalColumn] = System.Convert.DBNull;
            }
            
            public LevelsRow[] GetLevelsRows() {
                return ((LevelsRow[])(this.GetChildRows(this.Table.ChildRelations["HierarchiesLevels"])));
            }
            
            public MembersRow[] GetMembersRows() {
                return ((MembersRow[])(this.GetChildRows(this.Table.ChildRelations["HierarchiesMembers"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class HierarchiesRowChangeEvent : EventArgs {
            
            private HierarchiesRow eventRow;
            
            private DataRowAction eventAction;
            
            public HierarchiesRowChangeEvent(HierarchiesRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public HierarchiesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class LevelsDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnId;
            
            private DataColumn columnHierId;
            
            private DataColumn columnUniqueName;
            
            private DataColumn columnName;
            
            private DataColumn columnDepth;
            
            internal LevelsDataTable() : 
                    base("Levels") {
                this.InitClass();
            }
            
            internal LevelsDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn IdColumn {
                get {
                    return this.columnId;
                }
            }
            
            internal DataColumn HierIdColumn {
                get {
                    return this.columnHierId;
                }
            }
            
            internal DataColumn UniqueNameColumn {
                get {
                    return this.columnUniqueName;
                }
            }
            
            internal DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            internal DataColumn DepthColumn {
                get {
                    return this.columnDepth;
                }
            }
            
            public LevelsRow this[int index] {
                get {
                    return ((LevelsRow)(this.Rows[index]));
                }
            }
            
            public event LevelsRowChangeEventHandler LevelsRowChanged;
            
            public event LevelsRowChangeEventHandler LevelsRowChanging;
            
            public event LevelsRowChangeEventHandler LevelsRowDeleted;
            
            public event LevelsRowChangeEventHandler LevelsRowDeleting;
            
            public void AddLevelsRow(LevelsRow row) {
                this.Rows.Add(row);
            }
            
            public LevelsRow AddLevelsRow(HierarchiesRow parentHierarchiesRowByHierarchiesLevels, string UniqueName, string Name, short Depth) {
                LevelsRow rowLevelsRow = ((LevelsRow)(this.NewRow()));
                rowLevelsRow.ItemArray = new object[] {
                        null,
                        parentHierarchiesRowByHierarchiesLevels[0],
                        UniqueName,
                        Name,
                        Depth};
                this.Rows.Add(rowLevelsRow);
                return rowLevelsRow;
            }
            
            public LevelsRow FindByUniqueName(string UniqueName) {
                return ((LevelsRow)(this.Rows.Find(new object[] {
                            UniqueName})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                LevelsDataTable cln = ((LevelsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new LevelsDataTable();
            }
            
            internal void InitVars() {
                this.columnId = this.Columns["Id"];
                this.columnHierId = this.Columns["HierId"];
                this.columnUniqueName = this.Columns["UniqueName"];
                this.columnName = this.Columns["Name"];
                this.columnDepth = this.Columns["Depth"];
            }
            
            private void InitClass() {
                this.columnId = new DataColumn("Id", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnId);
                this.columnHierId = new DataColumn("HierId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnHierId);
                this.columnUniqueName = new DataColumn("UniqueName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUniqueName);
                this.columnName = new DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnName);
                this.columnDepth = new DataColumn("Depth", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDepth);
                this.Constraints.Add(new UniqueConstraint("PK_Levels", new DataColumn[] {
                                this.columnId}, false));
                this.Constraints.Add(new UniqueConstraint("IX_levels_UN", new DataColumn[] {
                                this.columnUniqueName}, true));
                this.columnId.AutoIncrement = true;
                this.columnId.AllowDBNull = false;
                this.columnId.Unique = true;
                this.columnUniqueName.AllowDBNull = false;
                this.columnUniqueName.Unique = true;
            }
            
            public LevelsRow NewLevelsRow() {
                return ((LevelsRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new LevelsRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(LevelsRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LevelsRowChanged != null)) {
                    this.LevelsRowChanged(this, new LevelsRowChangeEvent(((LevelsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LevelsRowChanging != null)) {
                    this.LevelsRowChanging(this, new LevelsRowChangeEvent(((LevelsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LevelsRowDeleted != null)) {
                    this.LevelsRowDeleted(this, new LevelsRowChangeEvent(((LevelsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LevelsRowDeleting != null)) {
                    this.LevelsRowDeleting(this, new LevelsRowChangeEvent(((LevelsRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveLevelsRow(LevelsRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class LevelsRow : DataRow {
            
            private LevelsDataTable tableLevels;
            
            internal LevelsRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableLevels = ((LevelsDataTable)(this.Table));
            }
            
            public int Id {
                get {
                    return ((int)(this[this.tableLevels.IdColumn]));
                }
                set {
                    this[this.tableLevels.IdColumn] = value;
                }
            }
            
            public int HierId {
                get {
                    try {
                        return ((int)(this[this.tableLevels.HierIdColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLevels.HierIdColumn] = value;
                }
            }
            
            public string UniqueName {
                get {
                    return ((string)(this[this.tableLevels.UniqueNameColumn]));
                }
                set {
                    this[this.tableLevels.UniqueNameColumn] = value;
                }
            }
            
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableLevels.NameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLevels.NameColumn] = value;
                }
            }
            
            public short Depth {
                get {
                    try {
                        return ((short)(this[this.tableLevels.DepthColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLevels.DepthColumn] = value;
                }
            }
            
            public HierarchiesRow HierarchiesRow {
                get {
                    return ((HierarchiesRow)(this.GetParentRow(this.Table.ParentRelations["HierarchiesLevels"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["HierarchiesLevels"]);
                }
            }
            
            public bool IsHierIdNull() {
                return this.IsNull(this.tableLevels.HierIdColumn);
            }
            
            public void SetHierIdNull() {
                this[this.tableLevels.HierIdColumn] = System.Convert.DBNull;
            }
            
            public bool IsNameNull() {
                return this.IsNull(this.tableLevels.NameColumn);
            }
            
            public void SetNameNull() {
                this[this.tableLevels.NameColumn] = System.Convert.DBNull;
            }
            
            public bool IsDepthNull() {
                return this.IsNull(this.tableLevels.DepthColumn);
            }
            
            public void SetDepthNull() {
                this[this.tableLevels.DepthColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class LevelsRowChangeEvent : EventArgs {
            
            private LevelsRow eventRow;
            
            private DataRowAction eventAction;
            
            public LevelsRowChangeEvent(LevelsRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public LevelsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class MembersDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnId;
            
            private DataColumn columnHierId;
            
            private DataColumn columnParentMemberId;
            
            private DataColumn columnLevelId;
            
            private DataColumn columnUniqueName;
            
            private DataColumn columnName;
            
            private DataColumn columnChildCount;
            
            private DataColumn columnLevelDepth;
            
            private DataColumn columnIsCalculated;
            
            private DataColumn columnIsOpen;
            
            private DataColumn columnIsPlaceholder;
            
            private DataColumn columnIsInMDX;
            
            private DataColumn columnIsVisible;
            
            internal MembersDataTable() : 
                    base("Members") {
                this.InitClass();
            }
            
            internal MembersDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn IdColumn {
                get {
                    return this.columnId;
                }
            }
            
            internal DataColumn HierIdColumn {
                get {
                    return this.columnHierId;
                }
            }
            
            internal DataColumn ParentMemberIdColumn {
                get {
                    return this.columnParentMemberId;
                }
            }
            
            internal DataColumn LevelIdColumn {
                get {
                    return this.columnLevelId;
                }
            }
            
            internal DataColumn UniqueNameColumn {
                get {
                    return this.columnUniqueName;
                }
            }
            
            internal DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            internal DataColumn ChildCountColumn {
                get {
                    return this.columnChildCount;
                }
            }
            
            internal DataColumn LevelDepthColumn {
                get {
                    return this.columnLevelDepth;
                }
            }
            
            internal DataColumn IsCalculatedColumn {
                get {
                    return this.columnIsCalculated;
                }
            }
            
            internal DataColumn IsOpenColumn {
                get {
                    return this.columnIsOpen;
                }
            }
            
            internal DataColumn IsPlaceholderColumn {
                get {
                    return this.columnIsPlaceholder;
                }
            }
            
            internal DataColumn IsInMDXColumn {
                get {
                    return this.columnIsInMDX;
                }
            }
            
            internal DataColumn IsVisibleColumn {
                get {
                    return this.columnIsVisible;
                }
            }
            
            public MembersRow this[int index] {
                get {
                    return ((MembersRow)(this.Rows[index]));
                }
            }
            
            public event MembersRowChangeEventHandler MembersRowChanged;
            
            public event MembersRowChangeEventHandler MembersRowChanging;
            
            public event MembersRowChangeEventHandler MembersRowDeleted;
            
            public event MembersRowChangeEventHandler MembersRowDeleting;
            
            public void AddMembersRow(MembersRow row) {
                this.Rows.Add(row);
            }
            
            public MembersRow AddMembersRow(HierarchiesRow parentHierarchiesRowByHierarchiesMembers, int ParentMemberId, int LevelId, string UniqueName, string Name, short ChildCount, short LevelDepth, bool IsCalculated, bool IsOpen, bool IsPlaceholder, bool IsInMDX, bool IsVisible) {
                MembersRow rowMembersRow = ((MembersRow)(this.NewRow()));
                rowMembersRow.ItemArray = new object[] {
                        null,
                        parentHierarchiesRowByHierarchiesMembers[0],
                        ParentMemberId,
                        LevelId,
                        UniqueName,
                        Name,
                        ChildCount,
                        LevelDepth,
                        IsCalculated,
                        IsOpen,
                        IsPlaceholder,
                        IsInMDX,
                        IsVisible};
                this.Rows.Add(rowMembersRow);
                return rowMembersRow;
            }
            
            public MembersRow FindByUniqueName(string UniqueName) {
                return ((MembersRow)(this.Rows.Find(new object[] {
                            UniqueName})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                MembersDataTable cln = ((MembersDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new MembersDataTable();
            }
            
            internal void InitVars() {
                this.columnId = this.Columns["Id"];
                this.columnHierId = this.Columns["HierId"];
                this.columnParentMemberId = this.Columns["ParentMemberId"];
                this.columnLevelId = this.Columns["LevelId"];
                this.columnUniqueName = this.Columns["UniqueName"];
                this.columnName = this.Columns["Name"];
                this.columnChildCount = this.Columns["ChildCount"];
                this.columnLevelDepth = this.Columns["LevelDepth"];
                this.columnIsCalculated = this.Columns["IsCalculated"];
                this.columnIsOpen = this.Columns["IsOpen"];
                this.columnIsPlaceholder = this.Columns["IsPlaceholder"];
                this.columnIsInMDX = this.Columns["IsInMDX"];
                this.columnIsVisible = this.Columns["IsVisible"];
            }
            
            private void InitClass() {
                this.columnId = new DataColumn("Id", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnId);
                this.columnHierId = new DataColumn("HierId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnHierId);
                this.columnParentMemberId = new DataColumn("ParentMemberId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnParentMemberId);
                this.columnLevelId = new DataColumn("LevelId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLevelId);
                this.columnUniqueName = new DataColumn("UniqueName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUniqueName);
                this.columnName = new DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnName);
                this.columnChildCount = new DataColumn("ChildCount", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnChildCount);
                this.columnLevelDepth = new DataColumn("LevelDepth", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLevelDepth);
                this.columnIsCalculated = new DataColumn("IsCalculated", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsCalculated);
                this.columnIsOpen = new DataColumn("IsOpen", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsOpen);
                this.columnIsPlaceholder = new DataColumn("IsPlaceholder", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsPlaceholder);
                this.columnIsInMDX = new DataColumn("IsInMDX", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsInMDX);
                this.columnIsVisible = new DataColumn("IsVisible", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsVisible);
                this.Constraints.Add(new UniqueConstraint("IX_Members_UN", new DataColumn[] {
                                this.columnUniqueName}, true));
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnId}, false));
                this.columnId.AutoIncrement = true;
                this.columnId.AllowDBNull = false;
                this.columnId.Unique = true;
                this.columnUniqueName.AllowDBNull = false;
                this.columnUniqueName.Unique = true;
            }
            
            public MembersRow NewMembersRow() {
                return ((MembersRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new MembersRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(MembersRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MembersRowChanged != null)) {
                    this.MembersRowChanged(this, new MembersRowChangeEvent(((MembersRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MembersRowChanging != null)) {
                    this.MembersRowChanging(this, new MembersRowChangeEvent(((MembersRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MembersRowDeleted != null)) {
                    this.MembersRowDeleted(this, new MembersRowChangeEvent(((MembersRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MembersRowDeleting != null)) {
                    this.MembersRowDeleting(this, new MembersRowChangeEvent(((MembersRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveMembersRow(MembersRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class MembersRow : DataRow {
            
            private MembersDataTable tableMembers;
            
            internal MembersRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableMembers = ((MembersDataTable)(this.Table));
            }
            
            public int Id {
                get {
                    return ((int)(this[this.tableMembers.IdColumn]));
                }
                set {
                    this[this.tableMembers.IdColumn] = value;
                }
            }
            
            public int HierId {
                get {
                    try {
                        return ((int)(this[this.tableMembers.HierIdColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMembers.HierIdColumn] = value;
                }
            }
            
            public int ParentMemberId {
                get {
                    try {
                        return ((int)(this[this.tableMembers.ParentMemberIdColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMembers.ParentMemberIdColumn] = value;
                }
            }
            
            public int LevelId {
                get {
                    try {
                        return ((int)(this[this.tableMembers.LevelIdColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMembers.LevelIdColumn] = value;
                }
            }
            
            public string UniqueName {
                get {
                    return ((string)(this[this.tableMembers.UniqueNameColumn]));
                }
                set {
                    this[this.tableMembers.UniqueNameColumn] = value;
                }
            }
            
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableMembers.NameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMembers.NameColumn] = value;
                }
            }
            
            public short ChildCount {
                get {
                    try {
                        return ((short)(this[this.tableMembers.ChildCountColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMembers.ChildCountColumn] = value;
                }
            }
            
            public short LevelDepth {
                get {
                    try {
                        return ((short)(this[this.tableMembers.LevelDepthColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMembers.LevelDepthColumn] = value;
                }
            }
            
            public bool IsCalculated {
                get {
                    try {
                        return ((bool)(this[this.tableMembers.IsCalculatedColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMembers.IsCalculatedColumn] = value;
                }
            }
            
            public bool IsOpen {
                get {
                    try {
                        return ((bool)(this[this.tableMembers.IsOpenColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMembers.IsOpenColumn] = value;
                }
            }
            
            public bool IsPlaceholder {
                get {
                    try {
                        return ((bool)(this[this.tableMembers.IsPlaceholderColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMembers.IsPlaceholderColumn] = value;
                }
            }
            
            public bool IsInMDX {
                get {
                    try {
                        return ((bool)(this[this.tableMembers.IsInMDXColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMembers.IsInMDXColumn] = value;
                }
            }
            
            public bool IsVisible {
                get {
                    try {
                        return ((bool)(this[this.tableMembers.IsVisibleColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMembers.IsVisibleColumn] = value;
                }
            }
            
            public HierarchiesRow HierarchiesRow {
                get {
                    return ((HierarchiesRow)(this.GetParentRow(this.Table.ParentRelations["HierarchiesMembers"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["HierarchiesMembers"]);
                }
            }
            
            public bool IsHierIdNull() {
                return this.IsNull(this.tableMembers.HierIdColumn);
            }
            
            public void SetHierIdNull() {
                this[this.tableMembers.HierIdColumn] = System.Convert.DBNull;
            }
            
            public bool IsParentMemberIdNull() {
                return this.IsNull(this.tableMembers.ParentMemberIdColumn);
            }
            
            public void SetParentMemberIdNull() {
                this[this.tableMembers.ParentMemberIdColumn] = System.Convert.DBNull;
            }
            
            public bool IsLevelIdNull() {
                return this.IsNull(this.tableMembers.LevelIdColumn);
            }
            
            public void SetLevelIdNull() {
                this[this.tableMembers.LevelIdColumn] = System.Convert.DBNull;
            }
            
            public bool IsNameNull() {
                return this.IsNull(this.tableMembers.NameColumn);
            }
            
            public void SetNameNull() {
                this[this.tableMembers.NameColumn] = System.Convert.DBNull;
            }
            
            public bool IsChildCountNull() {
                return this.IsNull(this.tableMembers.ChildCountColumn);
            }
            
            public void SetChildCountNull() {
                this[this.tableMembers.ChildCountColumn] = System.Convert.DBNull;
            }
            
            public bool IsLevelDepthNull() {
                return this.IsNull(this.tableMembers.LevelDepthColumn);
            }
            
            public void SetLevelDepthNull() {
                this[this.tableMembers.LevelDepthColumn] = System.Convert.DBNull;
            }
            
            public bool IsIsCalculatedNull() {
                return this.IsNull(this.tableMembers.IsCalculatedColumn);
            }
            
            public void SetIsCalculatedNull() {
                this[this.tableMembers.IsCalculatedColumn] = System.Convert.DBNull;
            }
            
            public bool IsIsOpenNull() {
                return this.IsNull(this.tableMembers.IsOpenColumn);
            }
            
            public void SetIsOpenNull() {
                this[this.tableMembers.IsOpenColumn] = System.Convert.DBNull;
            }
            
            public bool IsIsPlaceholderNull() {
                return this.IsNull(this.tableMembers.IsPlaceholderColumn);
            }
            
            public void SetIsPlaceholderNull() {
                this[this.tableMembers.IsPlaceholderColumn] = System.Convert.DBNull;
            }
            
            public bool IsIsInMDXNull() {
                return this.IsNull(this.tableMembers.IsInMDXColumn);
            }
            
            public void SetIsInMDXNull() {
                this[this.tableMembers.IsInMDXColumn] = System.Convert.DBNull;
            }
            
            public bool IsIsVisibleNull() {
                return this.IsNull(this.tableMembers.IsVisibleColumn);
            }
            
            public void SetIsVisibleNull() {
                this[this.tableMembers.IsVisibleColumn] = System.Convert.DBNull;
            }
            
            public CalculatedMembersRow[] GetCalculatedMembersRows() {
                return ((CalculatedMembersRow[])(this.GetChildRows(this.Table.ChildRelations["MembersCalculatedMembers"])));
            }
            
            public Link_Mem_MemRow[] GetLink_Mem_MemRows() {
                return ((Link_Mem_MemRow[])(this.GetChildRows(this.Table.ChildRelations["MembersLink_Mem_Mem"])));
            }
            
            public Link_Mem_LevelRow[] GetLink_Mem_LevelRows() {
                return ((Link_Mem_LevelRow[])(this.GetChildRows(this.Table.ChildRelations["MembersLink_Mem_Level"])));
            }
            
            public Link_Mem_HierRow[] GetLink_Mem_HierRows() {
                return ((Link_Mem_HierRow[])(this.GetChildRows(this.Table.ChildRelations["MembersLink_Mem_Hier"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class MembersRowChangeEvent : EventArgs {
            
            private MembersRow eventRow;
            
            private DataRowAction eventAction;
            
            public MembersRowChangeEvent(MembersRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public MembersRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CalculatedMembersDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnMemberId;
            
            private DataColumn columnExpression;
            
            private DataColumn columnSolveOrder;
            
            private DataColumn columnFormatString;
            
            private DataColumn columnIsWithMembers;
            
            private DataColumn columnIsWithLevels;
            
            private DataColumn columnIsWithHierarchies;
            
            private DataColumn columnIsWithDimensions;
            
            internal CalculatedMembersDataTable() : 
                    base("CalculatedMembers") {
                this.InitClass();
            }
            
            internal CalculatedMembersDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn MemberIdColumn {
                get {
                    return this.columnMemberId;
                }
            }
            
            internal DataColumn ExpressionColumn {
                get {
                    return this.columnExpression;
                }
            }
            
            internal DataColumn SolveOrderColumn {
                get {
                    return this.columnSolveOrder;
                }
            }
            
            internal DataColumn FormatStringColumn {
                get {
                    return this.columnFormatString;
                }
            }
            
            internal DataColumn IsWithMembersColumn {
                get {
                    return this.columnIsWithMembers;
                }
            }
            
            internal DataColumn IsWithLevelsColumn {
                get {
                    return this.columnIsWithLevels;
                }
            }
            
            internal DataColumn IsWithHierarchiesColumn {
                get {
                    return this.columnIsWithHierarchies;
                }
            }
            
            internal DataColumn IsWithDimensionsColumn {
                get {
                    return this.columnIsWithDimensions;
                }
            }
            
            public CalculatedMembersRow this[int index] {
                get {
                    return ((CalculatedMembersRow)(this.Rows[index]));
                }
            }
            
            public event CalculatedMembersRowChangeEventHandler CalculatedMembersRowChanged;
            
            public event CalculatedMembersRowChangeEventHandler CalculatedMembersRowChanging;
            
            public event CalculatedMembersRowChangeEventHandler CalculatedMembersRowDeleted;
            
            public event CalculatedMembersRowChangeEventHandler CalculatedMembersRowDeleting;
            
            public void AddCalculatedMembersRow(CalculatedMembersRow row) {
                this.Rows.Add(row);
            }
            
            public CalculatedMembersRow AddCalculatedMembersRow(MembersRow parentMembersRowByMembersCalculatedMembers, string Expression, int SolveOrder, string FormatString, bool IsWithMembers, bool IsWithLevels, bool IsWithHierarchies, bool IsWithDimensions) {
                CalculatedMembersRow rowCalculatedMembersRow = ((CalculatedMembersRow)(this.NewRow()));
                rowCalculatedMembersRow.ItemArray = new object[] {
                        parentMembersRowByMembersCalculatedMembers[0],
                        Expression,
                        SolveOrder,
                        FormatString,
                        IsWithMembers,
                        IsWithLevels,
                        IsWithHierarchies,
                        IsWithDimensions};
                this.Rows.Add(rowCalculatedMembersRow);
                return rowCalculatedMembersRow;
            }
            
            public CalculatedMembersRow FindByMemberId(int MemberId) {
                return ((CalculatedMembersRow)(this.Rows.Find(new object[] {
                            MemberId})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                CalculatedMembersDataTable cln = ((CalculatedMembersDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new CalculatedMembersDataTable();
            }
            
            internal void InitVars() {
                this.columnMemberId = this.Columns["MemberId"];
                this.columnExpression = this.Columns["Expression"];
                this.columnSolveOrder = this.Columns["SolveOrder"];
                this.columnFormatString = this.Columns["FormatString"];
                this.columnIsWithMembers = this.Columns["IsWithMembers"];
                this.columnIsWithLevels = this.Columns["IsWithLevels"];
                this.columnIsWithHierarchies = this.Columns["IsWithHierarchies"];
                this.columnIsWithDimensions = this.Columns["IsWithDimensions"];
            }
            
            private void InitClass() {
                this.columnMemberId = new DataColumn("MemberId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMemberId);
                this.columnExpression = new DataColumn("Expression", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExpression);
                this.columnSolveOrder = new DataColumn("SolveOrder", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSolveOrder);
                this.columnFormatString = new DataColumn("FormatString", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFormatString);
                this.columnIsWithMembers = new DataColumn("IsWithMembers", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsWithMembers);
                this.columnIsWithLevels = new DataColumn("IsWithLevels", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsWithLevels);
                this.columnIsWithHierarchies = new DataColumn("IsWithHierarchies", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsWithHierarchies);
                this.columnIsWithDimensions = new DataColumn("IsWithDimensions", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsWithDimensions);
                this.Constraints.Add(new UniqueConstraint("PK_CalculatedMembers", new DataColumn[] {
                                this.columnMemberId}, true));
                this.columnMemberId.AllowDBNull = false;
                this.columnMemberId.Unique = true;
            }
            
            public CalculatedMembersRow NewCalculatedMembersRow() {
                return ((CalculatedMembersRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new CalculatedMembersRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(CalculatedMembersRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CalculatedMembersRowChanged != null)) {
                    this.CalculatedMembersRowChanged(this, new CalculatedMembersRowChangeEvent(((CalculatedMembersRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CalculatedMembersRowChanging != null)) {
                    this.CalculatedMembersRowChanging(this, new CalculatedMembersRowChangeEvent(((CalculatedMembersRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CalculatedMembersRowDeleted != null)) {
                    this.CalculatedMembersRowDeleted(this, new CalculatedMembersRowChangeEvent(((CalculatedMembersRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CalculatedMembersRowDeleting != null)) {
                    this.CalculatedMembersRowDeleting(this, new CalculatedMembersRowChangeEvent(((CalculatedMembersRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveCalculatedMembersRow(CalculatedMembersRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CalculatedMembersRow : DataRow {
            
            private CalculatedMembersDataTable tableCalculatedMembers;
            
            internal CalculatedMembersRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableCalculatedMembers = ((CalculatedMembersDataTable)(this.Table));
            }
            
            public int MemberId {
                get {
                    return ((int)(this[this.tableCalculatedMembers.MemberIdColumn]));
                }
                set {
                    this[this.tableCalculatedMembers.MemberIdColumn] = value;
                }
            }
            
            public string Expression {
                get {
                    try {
                        return ((string)(this[this.tableCalculatedMembers.ExpressionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCalculatedMembers.ExpressionColumn] = value;
                }
            }
            
            public int SolveOrder {
                get {
                    try {
                        return ((int)(this[this.tableCalculatedMembers.SolveOrderColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCalculatedMembers.SolveOrderColumn] = value;
                }
            }
            
            public string FormatString {
                get {
                    try {
                        return ((string)(this[this.tableCalculatedMembers.FormatStringColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCalculatedMembers.FormatStringColumn] = value;
                }
            }
            
            public bool IsWithMembers {
                get {
                    try {
                        return ((bool)(this[this.tableCalculatedMembers.IsWithMembersColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCalculatedMembers.IsWithMembersColumn] = value;
                }
            }
            
            public bool IsWithLevels {
                get {
                    try {
                        return ((bool)(this[this.tableCalculatedMembers.IsWithLevelsColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCalculatedMembers.IsWithLevelsColumn] = value;
                }
            }
            
            public bool IsWithHierarchies {
                get {
                    try {
                        return ((bool)(this[this.tableCalculatedMembers.IsWithHierarchiesColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCalculatedMembers.IsWithHierarchiesColumn] = value;
                }
            }
            
            public bool IsWithDimensions {
                get {
                    try {
                        return ((bool)(this[this.tableCalculatedMembers.IsWithDimensionsColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCalculatedMembers.IsWithDimensionsColumn] = value;
                }
            }
            
            public MembersRow MembersRow {
                get {
                    return ((MembersRow)(this.GetParentRow(this.Table.ParentRelations["MembersCalculatedMembers"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["MembersCalculatedMembers"]);
                }
            }
            
            public bool IsExpressionNull() {
                return this.IsNull(this.tableCalculatedMembers.ExpressionColumn);
            }
            
            public void SetExpressionNull() {
                this[this.tableCalculatedMembers.ExpressionColumn] = System.Convert.DBNull;
            }
            
            public bool IsSolveOrderNull() {
                return this.IsNull(this.tableCalculatedMembers.SolveOrderColumn);
            }
            
            public void SetSolveOrderNull() {
                this[this.tableCalculatedMembers.SolveOrderColumn] = System.Convert.DBNull;
            }
            
            public bool IsFormatStringNull() {
                return this.IsNull(this.tableCalculatedMembers.FormatStringColumn);
            }
            
            public void SetFormatStringNull() {
                this[this.tableCalculatedMembers.FormatStringColumn] = System.Convert.DBNull;
            }
            
            public bool IsIsWithMembersNull() {
                return this.IsNull(this.tableCalculatedMembers.IsWithMembersColumn);
            }
            
            public void SetIsWithMembersNull() {
                this[this.tableCalculatedMembers.IsWithMembersColumn] = System.Convert.DBNull;
            }
            
            public bool IsIsWithLevelsNull() {
                return this.IsNull(this.tableCalculatedMembers.IsWithLevelsColumn);
            }
            
            public void SetIsWithLevelsNull() {
                this[this.tableCalculatedMembers.IsWithLevelsColumn] = System.Convert.DBNull;
            }
            
            public bool IsIsWithHierarchiesNull() {
                return this.IsNull(this.tableCalculatedMembers.IsWithHierarchiesColumn);
            }
            
            public void SetIsWithHierarchiesNull() {
                this[this.tableCalculatedMembers.IsWithHierarchiesColumn] = System.Convert.DBNull;
            }
            
            public bool IsIsWithDimensionsNull() {
                return this.IsNull(this.tableCalculatedMembers.IsWithDimensionsColumn);
            }
            
            public void SetIsWithDimensionsNull() {
                this[this.tableCalculatedMembers.IsWithDimensionsColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CalculatedMembersRowChangeEvent : EventArgs {
            
            private CalculatedMembersRow eventRow;
            
            private DataRowAction eventAction;
            
            public CalculatedMembersRowChangeEvent(CalculatedMembersRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public CalculatedMembersRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class OrderTupleDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnUniqueName;
            
            internal OrderTupleDataTable() : 
                    base("OrderTuple") {
                this.InitClass();
            }
            
            internal OrderTupleDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn UniqueNameColumn {
                get {
                    return this.columnUniqueName;
                }
            }
            
            public OrderTupleRow this[int index] {
                get {
                    return ((OrderTupleRow)(this.Rows[index]));
                }
            }
            
            public event OrderTupleRowChangeEventHandler OrderTupleRowChanged;
            
            public event OrderTupleRowChangeEventHandler OrderTupleRowChanging;
            
            public event OrderTupleRowChangeEventHandler OrderTupleRowDeleted;
            
            public event OrderTupleRowChangeEventHandler OrderTupleRowDeleting;
            
            public void AddOrderTupleRow(OrderTupleRow row) {
                this.Rows.Add(row);
            }
            
            public OrderTupleRow AddOrderTupleRow(string UniqueName) {
                OrderTupleRow rowOrderTupleRow = ((OrderTupleRow)(this.NewRow()));
                rowOrderTupleRow.ItemArray = new object[] {
                        UniqueName};
                this.Rows.Add(rowOrderTupleRow);
                return rowOrderTupleRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                OrderTupleDataTable cln = ((OrderTupleDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new OrderTupleDataTable();
            }
            
            internal void InitVars() {
                this.columnUniqueName = this.Columns["UniqueName"];
            }
            
            private void InitClass() {
                this.columnUniqueName = new DataColumn("UniqueName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUniqueName);
            }
            
            public OrderTupleRow NewOrderTupleRow() {
                return ((OrderTupleRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new OrderTupleRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(OrderTupleRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.OrderTupleRowChanged != null)) {
                    this.OrderTupleRowChanged(this, new OrderTupleRowChangeEvent(((OrderTupleRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.OrderTupleRowChanging != null)) {
                    this.OrderTupleRowChanging(this, new OrderTupleRowChangeEvent(((OrderTupleRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.OrderTupleRowDeleted != null)) {
                    this.OrderTupleRowDeleted(this, new OrderTupleRowChangeEvent(((OrderTupleRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.OrderTupleRowDeleting != null)) {
                    this.OrderTupleRowDeleting(this, new OrderTupleRowChangeEvent(((OrderTupleRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveOrderTupleRow(OrderTupleRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class OrderTupleRow : DataRow {
            
            private OrderTupleDataTable tableOrderTuple;
            
            internal OrderTupleRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableOrderTuple = ((OrderTupleDataTable)(this.Table));
            }
            
            public string UniqueName {
                get {
                    try {
                        return ((string)(this[this.tableOrderTuple.UniqueNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrderTuple.UniqueNameColumn] = value;
                }
            }
            
            public bool IsUniqueNameNull() {
                return this.IsNull(this.tableOrderTuple.UniqueNameColumn);
            }
            
            public void SetUniqueNameNull() {
                this[this.tableOrderTuple.UniqueNameColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class OrderTupleRowChangeEvent : EventArgs {
            
            private OrderTupleRow eventRow;
            
            private DataRowAction eventAction;
            
            public OrderTupleRowChangeEvent(OrderTupleRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public OrderTupleRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class Link_Mem_HierDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnMemId;
            
            private DataColumn columnHierId;
            
            private DataColumn columnIsVital;
            
            internal Link_Mem_HierDataTable() : 
                    base("Link_Mem_Hier") {
                this.InitClass();
            }
            
            internal Link_Mem_HierDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn MemIdColumn {
                get {
                    return this.columnMemId;
                }
            }
            
            internal DataColumn HierIdColumn {
                get {
                    return this.columnHierId;
                }
            }
            
            internal DataColumn IsVitalColumn {
                get {
                    return this.columnIsVital;
                }
            }
            
            public Link_Mem_HierRow this[int index] {
                get {
                    return ((Link_Mem_HierRow)(this.Rows[index]));
                }
            }
            
            public event Link_Mem_HierRowChangeEventHandler Link_Mem_HierRowChanged;
            
            public event Link_Mem_HierRowChangeEventHandler Link_Mem_HierRowChanging;
            
            public event Link_Mem_HierRowChangeEventHandler Link_Mem_HierRowDeleted;
            
            public event Link_Mem_HierRowChangeEventHandler Link_Mem_HierRowDeleting;
            
            public void AddLink_Mem_HierRow(Link_Mem_HierRow row) {
                this.Rows.Add(row);
            }
            
            public Link_Mem_HierRow AddLink_Mem_HierRow(MembersRow parentMembersRowByMembersLink_Mem_Hier, int HierId, bool IsVital) {
                Link_Mem_HierRow rowLink_Mem_HierRow = ((Link_Mem_HierRow)(this.NewRow()));
                rowLink_Mem_HierRow.ItemArray = new object[] {
                        parentMembersRowByMembersLink_Mem_Hier[0],
                        HierId,
                        IsVital};
                this.Rows.Add(rowLink_Mem_HierRow);
                return rowLink_Mem_HierRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                Link_Mem_HierDataTable cln = ((Link_Mem_HierDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new Link_Mem_HierDataTable();
            }
            
            internal void InitVars() {
                this.columnMemId = this.Columns["MemId"];
                this.columnHierId = this.Columns["HierId"];
                this.columnIsVital = this.Columns["IsVital"];
            }
            
            private void InitClass() {
                this.columnMemId = new DataColumn("MemId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMemId);
                this.columnHierId = new DataColumn("HierId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnHierId);
                this.columnIsVital = new DataColumn("IsVital", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsVital);
            }
            
            public Link_Mem_HierRow NewLink_Mem_HierRow() {
                return ((Link_Mem_HierRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new Link_Mem_HierRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(Link_Mem_HierRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Link_Mem_HierRowChanged != null)) {
                    this.Link_Mem_HierRowChanged(this, new Link_Mem_HierRowChangeEvent(((Link_Mem_HierRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Link_Mem_HierRowChanging != null)) {
                    this.Link_Mem_HierRowChanging(this, new Link_Mem_HierRowChangeEvent(((Link_Mem_HierRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Link_Mem_HierRowDeleted != null)) {
                    this.Link_Mem_HierRowDeleted(this, new Link_Mem_HierRowChangeEvent(((Link_Mem_HierRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Link_Mem_HierRowDeleting != null)) {
                    this.Link_Mem_HierRowDeleting(this, new Link_Mem_HierRowChangeEvent(((Link_Mem_HierRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveLink_Mem_HierRow(Link_Mem_HierRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class Link_Mem_HierRow : DataRow {
            
            private Link_Mem_HierDataTable tableLink_Mem_Hier;
            
            internal Link_Mem_HierRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableLink_Mem_Hier = ((Link_Mem_HierDataTable)(this.Table));
            }
            
            public int MemId {
                get {
                    try {
                        return ((int)(this[this.tableLink_Mem_Hier.MemIdColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLink_Mem_Hier.MemIdColumn] = value;
                }
            }
            
            public int HierId {
                get {
                    try {
                        return ((int)(this[this.tableLink_Mem_Hier.HierIdColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLink_Mem_Hier.HierIdColumn] = value;
                }
            }
            
            public bool IsVital {
                get {
                    try {
                        return ((bool)(this[this.tableLink_Mem_Hier.IsVitalColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLink_Mem_Hier.IsVitalColumn] = value;
                }
            }
            
            public MembersRow MembersRow {
                get {
                    return ((MembersRow)(this.GetParentRow(this.Table.ParentRelations["MembersLink_Mem_Hier"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["MembersLink_Mem_Hier"]);
                }
            }
            
            public bool IsMemIdNull() {
                return this.IsNull(this.tableLink_Mem_Hier.MemIdColumn);
            }
            
            public void SetMemIdNull() {
                this[this.tableLink_Mem_Hier.MemIdColumn] = System.Convert.DBNull;
            }
            
            public bool IsHierIdNull() {
                return this.IsNull(this.tableLink_Mem_Hier.HierIdColumn);
            }
            
            public void SetHierIdNull() {
                this[this.tableLink_Mem_Hier.HierIdColumn] = System.Convert.DBNull;
            }
            
            public bool IsIsVitalNull() {
                return this.IsNull(this.tableLink_Mem_Hier.IsVitalColumn);
            }
            
            public void SetIsVitalNull() {
                this[this.tableLink_Mem_Hier.IsVitalColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class Link_Mem_HierRowChangeEvent : EventArgs {
            
            private Link_Mem_HierRow eventRow;
            
            private DataRowAction eventAction;
            
            public Link_Mem_HierRowChangeEvent(Link_Mem_HierRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public Link_Mem_HierRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class Link_Mem_LevelDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnMemId;
            
            private DataColumn columnLevelId;
            
            private DataColumn columnIsVital;
            
            internal Link_Mem_LevelDataTable() : 
                    base("Link_Mem_Level") {
                this.InitClass();
            }
            
            internal Link_Mem_LevelDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn MemIdColumn {
                get {
                    return this.columnMemId;
                }
            }
            
            internal DataColumn LevelIdColumn {
                get {
                    return this.columnLevelId;
                }
            }
            
            internal DataColumn IsVitalColumn {
                get {
                    return this.columnIsVital;
                }
            }
            
            public Link_Mem_LevelRow this[int index] {
                get {
                    return ((Link_Mem_LevelRow)(this.Rows[index]));
                }
            }
            
            public event Link_Mem_LevelRowChangeEventHandler Link_Mem_LevelRowChanged;
            
            public event Link_Mem_LevelRowChangeEventHandler Link_Mem_LevelRowChanging;
            
            public event Link_Mem_LevelRowChangeEventHandler Link_Mem_LevelRowDeleted;
            
            public event Link_Mem_LevelRowChangeEventHandler Link_Mem_LevelRowDeleting;
            
            public void AddLink_Mem_LevelRow(Link_Mem_LevelRow row) {
                this.Rows.Add(row);
            }
            
            public Link_Mem_LevelRow AddLink_Mem_LevelRow(MembersRow parentMembersRowByMembersLink_Mem_Level, int LevelId, bool IsVital) {
                Link_Mem_LevelRow rowLink_Mem_LevelRow = ((Link_Mem_LevelRow)(this.NewRow()));
                rowLink_Mem_LevelRow.ItemArray = new object[] {
                        parentMembersRowByMembersLink_Mem_Level[0],
                        LevelId,
                        IsVital};
                this.Rows.Add(rowLink_Mem_LevelRow);
                return rowLink_Mem_LevelRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                Link_Mem_LevelDataTable cln = ((Link_Mem_LevelDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new Link_Mem_LevelDataTable();
            }
            
            internal void InitVars() {
                this.columnMemId = this.Columns["MemId"];
                this.columnLevelId = this.Columns["LevelId"];
                this.columnIsVital = this.Columns["IsVital"];
            }
            
            private void InitClass() {
                this.columnMemId = new DataColumn("MemId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMemId);
                this.columnLevelId = new DataColumn("LevelId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLevelId);
                this.columnIsVital = new DataColumn("IsVital", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsVital);
            }
            
            public Link_Mem_LevelRow NewLink_Mem_LevelRow() {
                return ((Link_Mem_LevelRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new Link_Mem_LevelRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(Link_Mem_LevelRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Link_Mem_LevelRowChanged != null)) {
                    this.Link_Mem_LevelRowChanged(this, new Link_Mem_LevelRowChangeEvent(((Link_Mem_LevelRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Link_Mem_LevelRowChanging != null)) {
                    this.Link_Mem_LevelRowChanging(this, new Link_Mem_LevelRowChangeEvent(((Link_Mem_LevelRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Link_Mem_LevelRowDeleted != null)) {
                    this.Link_Mem_LevelRowDeleted(this, new Link_Mem_LevelRowChangeEvent(((Link_Mem_LevelRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Link_Mem_LevelRowDeleting != null)) {
                    this.Link_Mem_LevelRowDeleting(this, new Link_Mem_LevelRowChangeEvent(((Link_Mem_LevelRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveLink_Mem_LevelRow(Link_Mem_LevelRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class Link_Mem_LevelRow : DataRow {
            
            private Link_Mem_LevelDataTable tableLink_Mem_Level;
            
            internal Link_Mem_LevelRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableLink_Mem_Level = ((Link_Mem_LevelDataTable)(this.Table));
            }
            
            public int MemId {
                get {
                    try {
                        return ((int)(this[this.tableLink_Mem_Level.MemIdColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLink_Mem_Level.MemIdColumn] = value;
                }
            }
            
            public int LevelId {
                get {
                    try {
                        return ((int)(this[this.tableLink_Mem_Level.LevelIdColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLink_Mem_Level.LevelIdColumn] = value;
                }
            }
            
            public bool IsVital {
                get {
                    try {
                        return ((bool)(this[this.tableLink_Mem_Level.IsVitalColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLink_Mem_Level.IsVitalColumn] = value;
                }
            }
            
            public MembersRow MembersRow {
                get {
                    return ((MembersRow)(this.GetParentRow(this.Table.ParentRelations["MembersLink_Mem_Level"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["MembersLink_Mem_Level"]);
                }
            }
            
            public bool IsMemIdNull() {
                return this.IsNull(this.tableLink_Mem_Level.MemIdColumn);
            }
            
            public void SetMemIdNull() {
                this[this.tableLink_Mem_Level.MemIdColumn] = System.Convert.DBNull;
            }
            
            public bool IsLevelIdNull() {
                return this.IsNull(this.tableLink_Mem_Level.LevelIdColumn);
            }
            
            public void SetLevelIdNull() {
                this[this.tableLink_Mem_Level.LevelIdColumn] = System.Convert.DBNull;
            }
            
            public bool IsIsVitalNull() {
                return this.IsNull(this.tableLink_Mem_Level.IsVitalColumn);
            }
            
            public void SetIsVitalNull() {
                this[this.tableLink_Mem_Level.IsVitalColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class Link_Mem_LevelRowChangeEvent : EventArgs {
            
            private Link_Mem_LevelRow eventRow;
            
            private DataRowAction eventAction;
            
            public Link_Mem_LevelRowChangeEvent(Link_Mem_LevelRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public Link_Mem_LevelRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class Link_Mem_MemDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnParentMemId;
            
            private DataColumn columnChildMemId;
            
            private DataColumn columnIsVital;
            
            internal Link_Mem_MemDataTable() : 
                    base("Link_Mem_Mem") {
                this.InitClass();
            }
            
            internal Link_Mem_MemDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn ParentMemIdColumn {
                get {
                    return this.columnParentMemId;
                }
            }
            
            internal DataColumn ChildMemIdColumn {
                get {
                    return this.columnChildMemId;
                }
            }
            
            internal DataColumn IsVitalColumn {
                get {
                    return this.columnIsVital;
                }
            }
            
            public Link_Mem_MemRow this[int index] {
                get {
                    return ((Link_Mem_MemRow)(this.Rows[index]));
                }
            }
            
            public event Link_Mem_MemRowChangeEventHandler Link_Mem_MemRowChanged;
            
            public event Link_Mem_MemRowChangeEventHandler Link_Mem_MemRowChanging;
            
            public event Link_Mem_MemRowChangeEventHandler Link_Mem_MemRowDeleted;
            
            public event Link_Mem_MemRowChangeEventHandler Link_Mem_MemRowDeleting;
            
            public void AddLink_Mem_MemRow(Link_Mem_MemRow row) {
                this.Rows.Add(row);
            }
            
            public Link_Mem_MemRow AddLink_Mem_MemRow(MembersRow parentMembersRowByMembersLink_Mem_Mem, int ChildMemId, bool IsVital) {
                Link_Mem_MemRow rowLink_Mem_MemRow = ((Link_Mem_MemRow)(this.NewRow()));
                rowLink_Mem_MemRow.ItemArray = new object[] {
                        parentMembersRowByMembersLink_Mem_Mem[0],
                        ChildMemId,
                        IsVital};
                this.Rows.Add(rowLink_Mem_MemRow);
                return rowLink_Mem_MemRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                Link_Mem_MemDataTable cln = ((Link_Mem_MemDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new Link_Mem_MemDataTable();
            }
            
            internal void InitVars() {
                this.columnParentMemId = this.Columns["ParentMemId"];
                this.columnChildMemId = this.Columns["ChildMemId"];
                this.columnIsVital = this.Columns["IsVital"];
            }
            
            private void InitClass() {
                this.columnParentMemId = new DataColumn("ParentMemId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnParentMemId);
                this.columnChildMemId = new DataColumn("ChildMemId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnChildMemId);
                this.columnIsVital = new DataColumn("IsVital", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsVital);
            }
            
            public Link_Mem_MemRow NewLink_Mem_MemRow() {
                return ((Link_Mem_MemRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new Link_Mem_MemRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(Link_Mem_MemRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Link_Mem_MemRowChanged != null)) {
                    this.Link_Mem_MemRowChanged(this, new Link_Mem_MemRowChangeEvent(((Link_Mem_MemRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Link_Mem_MemRowChanging != null)) {
                    this.Link_Mem_MemRowChanging(this, new Link_Mem_MemRowChangeEvent(((Link_Mem_MemRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Link_Mem_MemRowDeleted != null)) {
                    this.Link_Mem_MemRowDeleted(this, new Link_Mem_MemRowChangeEvent(((Link_Mem_MemRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Link_Mem_MemRowDeleting != null)) {
                    this.Link_Mem_MemRowDeleting(this, new Link_Mem_MemRowChangeEvent(((Link_Mem_MemRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveLink_Mem_MemRow(Link_Mem_MemRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class Link_Mem_MemRow : DataRow {
            
            private Link_Mem_MemDataTable tableLink_Mem_Mem;
            
            internal Link_Mem_MemRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableLink_Mem_Mem = ((Link_Mem_MemDataTable)(this.Table));
            }
            
            public int ParentMemId {
                get {
                    try {
                        return ((int)(this[this.tableLink_Mem_Mem.ParentMemIdColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLink_Mem_Mem.ParentMemIdColumn] = value;
                }
            }
            
            public int ChildMemId {
                get {
                    try {
                        return ((int)(this[this.tableLink_Mem_Mem.ChildMemIdColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLink_Mem_Mem.ChildMemIdColumn] = value;
                }
            }
            
            public bool IsVital {
                get {
                    try {
                        return ((bool)(this[this.tableLink_Mem_Mem.IsVitalColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLink_Mem_Mem.IsVitalColumn] = value;
                }
            }
            
            public MembersRow MembersRow {
                get {
                    return ((MembersRow)(this.GetParentRow(this.Table.ParentRelations["MembersLink_Mem_Mem"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["MembersLink_Mem_Mem"]);
                }
            }
            
            public bool IsParentMemIdNull() {
                return this.IsNull(this.tableLink_Mem_Mem.ParentMemIdColumn);
            }
            
            public void SetParentMemIdNull() {
                this[this.tableLink_Mem_Mem.ParentMemIdColumn] = System.Convert.DBNull;
            }
            
            public bool IsChildMemIdNull() {
                return this.IsNull(this.tableLink_Mem_Mem.ChildMemIdColumn);
            }
            
            public void SetChildMemIdNull() {
                this[this.tableLink_Mem_Mem.ChildMemIdColumn] = System.Convert.DBNull;
            }
            
            public bool IsIsVitalNull() {
                return this.IsNull(this.tableLink_Mem_Mem.IsVitalColumn);
            }
            
            public void SetIsVitalNull() {
                this[this.tableLink_Mem_Mem.IsVitalColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class Link_Mem_MemRowChangeEvent : EventArgs {
            
            private Link_Mem_MemRow eventRow;
            
            private DataRowAction eventAction;
            
            public Link_Mem_MemRowChangeEvent(Link_Mem_MemRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public Link_Mem_MemRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class OpenNodesDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnUniqueName;
            
            internal OpenNodesDataTable() : 
                    base("OpenNodes") {
                this.InitClass();
            }
            
            internal OpenNodesDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn UniqueNameColumn {
                get {
                    return this.columnUniqueName;
                }
            }
            
            public OpenNodesRow this[int index] {
                get {
                    return ((OpenNodesRow)(this.Rows[index]));
                }
            }
            
            public event OpenNodesRowChangeEventHandler OpenNodesRowChanged;
            
            public event OpenNodesRowChangeEventHandler OpenNodesRowChanging;
            
            public event OpenNodesRowChangeEventHandler OpenNodesRowDeleted;
            
            public event OpenNodesRowChangeEventHandler OpenNodesRowDeleting;
            
            public void AddOpenNodesRow(OpenNodesRow row) {
                this.Rows.Add(row);
            }
            
            public OpenNodesRow AddOpenNodesRow(string UniqueName) {
                OpenNodesRow rowOpenNodesRow = ((OpenNodesRow)(this.NewRow()));
                rowOpenNodesRow.ItemArray = new object[] {
                        UniqueName};
                this.Rows.Add(rowOpenNodesRow);
                return rowOpenNodesRow;
            }
            
            public OpenNodesRow FindByUniqueName(string UniqueName) {
                return ((OpenNodesRow)(this.Rows.Find(new object[] {
                            UniqueName})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                OpenNodesDataTable cln = ((OpenNodesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new OpenNodesDataTable();
            }
            
            internal void InitVars() {
                this.columnUniqueName = this.Columns["UniqueName"];
            }
            
            private void InitClass() {
                this.columnUniqueName = new DataColumn("UniqueName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUniqueName);
                this.Constraints.Add(new UniqueConstraint("PK_OpenNodes", new DataColumn[] {
                                this.columnUniqueName}, true));
                this.columnUniqueName.AllowDBNull = false;
                this.columnUniqueName.Unique = true;
            }
            
            public OpenNodesRow NewOpenNodesRow() {
                return ((OpenNodesRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new OpenNodesRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(OpenNodesRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.OpenNodesRowChanged != null)) {
                    this.OpenNodesRowChanged(this, new OpenNodesRowChangeEvent(((OpenNodesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.OpenNodesRowChanging != null)) {
                    this.OpenNodesRowChanging(this, new OpenNodesRowChangeEvent(((OpenNodesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.OpenNodesRowDeleted != null)) {
                    this.OpenNodesRowDeleted(this, new OpenNodesRowChangeEvent(((OpenNodesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.OpenNodesRowDeleting != null)) {
                    this.OpenNodesRowDeleting(this, new OpenNodesRowChangeEvent(((OpenNodesRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveOpenNodesRow(OpenNodesRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class OpenNodesRow : DataRow {
            
            private OpenNodesDataTable tableOpenNodes;
            
            internal OpenNodesRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableOpenNodes = ((OpenNodesDataTable)(this.Table));
            }
            
            public string UniqueName {
                get {
                    return ((string)(this[this.tableOpenNodes.UniqueNameColumn]));
                }
                set {
                    this[this.tableOpenNodes.UniqueNameColumn] = value;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class OpenNodesRowChangeEvent : EventArgs {
            
            private OpenNodesRow eventRow;
            
            private DataRowAction eventAction;
            
            public OpenNodesRowChangeEvent(OpenNodesRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public OpenNodesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
