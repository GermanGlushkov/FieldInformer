//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace FI.Common.Data.Auto {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class OlapMemSet : DataSet {
        
        private MDataTable tableM;
        
        public OlapMemSet() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected OlapMemSet(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["M"] != null)) {
                    this.Tables.Add(new MDataTable(ds.Tables["M"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MDataTable M {
            get {
                return this.tableM;
            }
        }
        
        public override DataSet Clone() {
            OlapMemSet cln = ((OlapMemSet)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["M"] != null)) {
                this.Tables.Add(new MDataTable(ds.Tables["M"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableM = ((MDataTable)(this.Tables["M"]));
            if ((this.tableM != null)) {
                this.tableM.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "OlapMemSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/OlapMemSet.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableM = new MDataTable();
            this.Tables.Add(this.tableM);
        }
        
        private bool ShouldSerializeM() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void MRowChangeEventHandler(object sender, MRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class MDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnUN;
            
            private DataColumn columnN;
            
            private DataColumn columnCC;
            
            private DataColumn columnLD;
            
            internal MDataTable() : 
                    base("M") {
                this.InitClass();
            }
            
            internal MDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn UNColumn {
                get {
                    return this.columnUN;
                }
            }
            
            internal DataColumn NColumn {
                get {
                    return this.columnN;
                }
            }
            
            internal DataColumn CCColumn {
                get {
                    return this.columnCC;
                }
            }
            
            internal DataColumn LDColumn {
                get {
                    return this.columnLD;
                }
            }
            
            public MRow this[int index] {
                get {
                    return ((MRow)(this.Rows[index]));
                }
            }
            
            public event MRowChangeEventHandler MRowChanged;
            
            public event MRowChangeEventHandler MRowChanging;
            
            public event MRowChangeEventHandler MRowDeleted;
            
            public event MRowChangeEventHandler MRowDeleting;
            
            public void AddMRow(MRow row) {
                this.Rows.Add(row);
            }
            
            public MRow AddMRow(string UN, string N, short CC, short LD) {
                MRow rowMRow = ((MRow)(this.NewRow()));
                rowMRow.ItemArray = new object[] {
                        UN,
                        N,
                        CC,
                        LD};
                this.Rows.Add(rowMRow);
                return rowMRow;
            }
            
            public MRow FindByUN(string UN) {
                return ((MRow)(this.Rows.Find(new object[] {
                            UN})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                MDataTable cln = ((MDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new MDataTable();
            }
            
            internal void InitVars() {
                this.columnUN = this.Columns["UN"];
                this.columnN = this.Columns["N"];
                this.columnCC = this.Columns["CC"];
                this.columnLD = this.Columns["LD"];
            }
            
            private void InitClass() {
                this.columnUN = new DataColumn("UN", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnUN);
                this.columnN = new DataColumn("N", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnN);
                this.columnCC = new DataColumn("CC", typeof(short), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnCC);
                this.columnLD = new DataColumn("LD", typeof(short), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnLD);
                this.Constraints.Add(new UniqueConstraint("PK_OlapMemSet", new DataColumn[] {
                                this.columnUN}, true));
                this.columnUN.AllowDBNull = false;
                this.columnUN.Unique = true;
                this.columnUN.Namespace = "";
                this.columnN.Namespace = "";
                this.columnCC.Namespace = "";
                this.columnLD.Namespace = "";
            }
            
            public MRow NewMRow() {
                return ((MRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new MRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(MRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MRowChanged != null)) {
                    this.MRowChanged(this, new MRowChangeEvent(((MRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MRowChanging != null)) {
                    this.MRowChanging(this, new MRowChangeEvent(((MRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MRowDeleted != null)) {
                    this.MRowDeleted(this, new MRowChangeEvent(((MRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MRowDeleting != null)) {
                    this.MRowDeleting(this, new MRowChangeEvent(((MRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveMRow(MRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class MRow : DataRow {
            
            private MDataTable tableM;
            
            internal MRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableM = ((MDataTable)(this.Table));
            }
            
            public string UN {
                get {
                    return ((string)(this[this.tableM.UNColumn]));
                }
                set {
                    this[this.tableM.UNColumn] = value;
                }
            }
            
            public string N {
                get {
                    try {
                        return ((string)(this[this.tableM.NColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM.NColumn] = value;
                }
            }
            
            public short CC {
                get {
                    try {
                        return ((short)(this[this.tableM.CCColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM.CCColumn] = value;
                }
            }
            
            public short LD {
                get {
                    try {
                        return ((short)(this[this.tableM.LDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM.LDColumn] = value;
                }
            }
            
            public bool IsNNull() {
                return this.IsNull(this.tableM.NColumn);
            }
            
            public void SetNNull() {
                this[this.tableM.NColumn] = System.Convert.DBNull;
            }
            
            public bool IsCCNull() {
                return this.IsNull(this.tableM.CCColumn);
            }
            
            public void SetCCNull() {
                this[this.tableM.CCColumn] = System.Convert.DBNull;
            }
            
            public bool IsLDNull() {
                return this.IsNull(this.tableM.LDColumn);
            }
            
            public void SetLDNull() {
                this[this.tableM.LDColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class MRowChangeEvent : EventArgs {
            
            private MRow eventRow;
            
            private DataRowAction eventAction;
            
            public MRowChangeEvent(MRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public MRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
