USE DBSALESPP
GO


---------------------------------------------------------------------------------------------------------------------------------------------------
-- VIEWS NEEDED FOR SPROCS
---------------------------------------------------------------------------------------------------------------------------------------------------


if exists (select * from dbo.sysobjects where id = object_id(N'[spp].[v_select_product_groups]') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view [spp].[v_select_product_groups]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[spp].[v_select_store_groups]') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view [spp].[v_select_store_groups]
GO




CREATE view spp.v_select_product_groups
AS
SELECT PRODUCT_GROUP_NAME FROM
--THIS SH*T TO PREVENT ERROR IN MSSQL7
(
SELECT 
CASE 
	WHEN LEN(COLUMN_NAME)>6 THEN SUBSTRING(COLUMN_NAME , 7 , LEN(COLUMN_NAME)-6) 
	ELSE NULL
END AS PRODUCT_GROUP_NAME 
from INFORMATION_SCHEMA.COLUMNS
WHERE TABLE_CATALOG=(SELECT DB_NAME()) AND TABLE_SCHEMA='spp' AND TABLE_NAME='OLAP_PRODUCT'
AND LEFT(COLUMN_NAME ,6)='GRP@#@'
)
TEMP_TBL
WHERE PRODUCT_GROUP_NAME IS NOT  NULL



GO


CREATE view spp.v_select_store_groups
as
SELECT STORE_GROUP_NAME FROM
(
SELECT
--THIS SH*T TO PREVENT ERROR IN MSSQL7
CASE 
	WHEN LEN(COLUMN_NAME)>11 THEN SUBSTRING(COLUMN_NAME , 12 , LEN(COLUMN_NAME)-11) 
	ELSE NULL
END AS STORE_GROUP_NAME 
from INFORMATION_SCHEMA.COLUMNS
WHERE TABLE_CATALOG=(SELECT DB_NAME()) AND TABLE_SCHEMA='spp' AND TABLE_NAME='OLAP_STORE'
AND LEFT(COLUMN_NAME ,11)='STOREGRP@#@'
) TEMP_TBL WHERE STORE_GROUP_NAME IS NOT NULL


GO

---------------------------------------------------------------------------------------------------------------------------------------------------






if exists (select * from dbo.sysobjects where id = object_id(N'[spp].[proc_create_SALESCALL_VIEW]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [spp].[proc_create_SALESCALL_VIEW]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[spp].[proc_create_SALUNCALL]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [spp].[proc_create_SALUNCALL]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[spp].[proc_fill_OLAP_DATE]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [spp].[proc_fill_OLAP_DATE]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[spp].[proc_fill_OLAP_DELDISTR]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [spp].[proc_fill_OLAP_DELDISTR]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[spp].[proc_fill_OLAP_DELDISTR_SEL]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [spp].[proc_fill_OLAP_DELDISTR_SEL]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[spp].[proc_fill_OLAP_DPM]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [spp].[proc_fill_OLAP_DPM]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[spp].[proc_fill_OLAP_DPM_BACKUP]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [spp].[proc_fill_OLAP_DPM_BACKUP]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[spp].[proc_fill_OLAP_DPM_SEL]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [spp].[proc_fill_OLAP_DPM_SEL]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[spp].[proc_fill_OLAP_FIXTURE]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [spp].[proc_fill_OLAP_FIXTURE]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[spp].[proc_fill_OLAP_LCOMPGR]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [spp].[proc_fill_OLAP_LCOMPGR]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[spp].[proc_fill_OLAP_LPROPROD]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [spp].[proc_fill_OLAP_LPROPROD]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[spp].[proc_fill_OLAP_ORDDISTR]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [spp].[proc_fill_OLAP_ORDDISTR]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[spp].[proc_fill_OLAP_ORDDISTR_SEL]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [spp].[proc_fill_OLAP_ORDDISTR_SEL]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[spp].[proc_fill_OLAP_PRODUCT]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [spp].[proc_fill_OLAP_PRODUCT]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[spp].[proc_fill_OLAP_SALESCALL]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [spp].[proc_fill_OLAP_SALESCALL]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[spp].[proc_fill_OLAP_SELECTION]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [spp].[proc_fill_OLAP_SELECTION]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[spp].[proc_fill_OLAP_SELECTION_DIMS]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [spp].[proc_fill_OLAP_SELECTION_DIMS]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[spp].[proc_fill_OLAP_STORE]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [spp].[proc_fill_OLAP_STORE]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[spp].[proc_fill_OLAP_SURVEY]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [spp].[proc_fill_OLAP_SURVEY]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[spp].[proc_fill_OLAP_TARGET]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [spp].[proc_fill_OLAP_TARGET]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[spp].[proc_fill_OLAP_WHOLESALER]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [spp].[proc_fill_OLAP_WHOLESALER]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[spp].[proc_insert_LOG]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [spp].[proc_insert_LOG]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[spp].[proc_process_main]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [spp].[proc_process_main]
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS OFF 
GO

setuser N'spp'
GO












CREATE PROCEDURE spp.proc_create_SALESCALL_VIEW
@i_param varchar(1024)
AS

/***********************************/
if exists (select * from dbo.sysobjects where id = object_id(N'[spp].[V_OLAP_SALESCALL_FACT]') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view [spp].[V_OLAP_SALESCALL_FACT]
/***********************************/


EXECUTE('
CREATE VIEW spp.V_OLAP_SALESCALL_FACT
AS
SELECT 
SALMSERN , 
OLAP_STORE.COMSERNO , 
OLAP_STORE.NR , 
CALEDATE,
CASE CALESTART
	WHEN CALEEND THEN 1
	ELSE DATEDIFF(mi , CAST(LEFT(CALESTART,2)+'':''+RIGHT(CALESTART,2) as datetime) , CAST(LEFT(CALEEND,2)+'':''+RIGHT(CALEEND,2) as datetime)) 
END AS CALL_LENGTH ,

ISNULL(CALESTAT1,'''') AS CALESTAT1 ,
ISNULL(CALESTAT2,'''') AS CALESTAT2 ,
ISNULL(CALESTAT4,'''') AS CALESTAT4 ,
ISNULL(SALCSTAT1,'''') AS SALCSTAT1 ,
ISNULL(SALCSTAT2,'''') AS SALCSTAT2 ,
ISNULL(SALCSTAT3,'''') AS SALCSTAT3 ,
ISNULL(SALCSTAT4,'''') AS SALCSTAT4 ,
ISNULL(SALCSTAT5,'''') AS SALCSTAT5 ,
ISNULL(SALCSTAT6,'''') AS SALCSTAT6 ,
ISNULL(SALCSTAT7,'''') AS SALCSTAT7 ,
ISNULL(SALCSTAT10,'''') AS SALCSTAT10 ,
ISNULL(SALCTYPE,'''') AS SALCTYPE ,

-- only 0 and 1 allowed
CASE SALNOTCALL WHEN ''1'' THEN ''1'' ELSE ''0'' END AS SALNOTCALL ,
CASE  
	WHEN SALUNCALL=''1'' THEN ''1'' ELSE ''0'' 
END AS SALUNCALL 

FROM
(SELECT TOP 100 PERCENT * FROM spp.tcalentr WHERE ISDATE(ISNULL(LEFT(CALESTART,2)+'':''+RIGHT(CALESTART,2),''''))=1 AND ISDATE(ISNULL(LEFT(CALEEND,2)+'':''+RIGHT(CALEEND,2),''''))=1 ORDER BY CALESERN) --TOP 100 PERCENTwill force to execute this first
tcalentr
inner join spp.OLAP_STORE OLAP_STORE
on tcalentr.COMSERNO=OLAP_STORE.COMSERNO
WHERE DATEDIFF(mi , CAST(LEFT(CALESTART,2)+'':''+RIGHT(CALESTART,2) as datetime) , CAST(LEFT(CALEEND,2)+'':''+RIGHT(CALEEND,2) as datetime))>=0
')


EXECUTE('
ALTER VIEW spp.V_OLAP_SALESCALL_FACT
AS
SELECT 
SALMSERN , 
OLAP_STORE.COMSERNO , 
OLAP_STORE.NR , 
CALEDATE,
CASE CALESTART
	WHEN CALEEND THEN 1
	ELSE DATEDIFF(mi , CAST(LEFT(CALESTART,2)+'':''+RIGHT(CALESTART,2) as datetime) , CAST(LEFT(CALEEND,2)+'':''+RIGHT(CALEEND,2) as datetime)) 
END AS CALL_LENGTH ,

ISNULL(CALESTAT1,'''') AS CALESTAT1 ,
ISNULL(CALESTAT2,'''') AS CALESTAT2 ,
ISNULL(CALESTAT4,'''') AS CALESTAT4 ,
ISNULL(SALCSTAT1,'''') AS SALCSTAT1 ,
ISNULL(SALCSTAT2,'''') AS SALCSTAT2 ,
ISNULL(SALCSTAT3,'''') AS SALCSTAT3 ,
ISNULL(SALCSTAT4,'''') AS SALCSTAT4 ,
ISNULL(SALCSTAT5,'''') AS SALCSTAT5 ,
ISNULL(SALCSTAT6,'''') AS SALCSTAT6 ,
ISNULL(SALCSTAT7,'''') AS SALCSTAT7 ,
ISNULL(SALCSTAT10,'''') AS SALCSTAT10 ,
ISNULL(SALCTYPE,'''') AS SALCTYPE ,

-- only 0 and 1 allowed
CASE SALNOTCALL WHEN ''1'' THEN ''1'' ELSE ''0'' END AS SALNOTCALL ,
CASE  
	WHEN ( ' + @i_param + ') THEN ''0'' 
	ELSE ''1''
END AS SALUNCALL 

FROM
(SELECT TOP 100 PERCENT * FROM spp.tcalentr WHERE ISDATE(ISNULL(LEFT(CALESTART,2)+'':''+RIGHT(CALESTART,2),''''))=1 AND ISDATE(ISNULL(LEFT(CALEEND,2)+'':''+RIGHT(CALEEND,2),''''))=1 ORDER BY CALESERN) --TOP 100 PERCENTwill force to execute this first
tcalentr
inner join spp.OLAP_STORE OLAP_STORE
on tcalentr.COMSERNO=OLAP_STORE.COMSERNO
WHERE DATEDIFF(mi , CAST(LEFT(CALESTART,2)+'':''+RIGHT(CALESTART,2) as datetime) , CAST(LEFT(CALEEND,2)+'':''+RIGHT(CALEEND,2) as datetime))>=0
')
GO
setuser
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS OFF 
GO

setuser N'spp'
GO






CREATE PROCEDURE spp.proc_create_SALUNCALL
@i_param varchar(1024)
AS

/***********************************/
if exists (select * from dbo.sysobjects where id = object_id(N'[spp].[V_OLAP_SALESCALL_SALUNCALL]') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view [spp].[V_OLAP_SALESCALL_SALUNCALL]
/***********************************/


EXECUTE('
CREATE VIEW spp.V_OLAP_SALESCALL_SALUNCALL
AS
SELECT SALMSERN , COMSERNO , CALEDATE , 
 ''SALUNCALL_'' + ISNULL(SALUNCALL , '''' ) AS SALESCALL_KEY  ,
CASE CALESTART
	WHEN CALEEND THEN 1
	ELSE DATEDIFF(mi , CAST(LEFT(CALESTART,2)+'':''+RIGHT(CALESTART,2) as datetime) , CAST(LEFT(CALEEND,2)+'':''+RIGHT(CALEEND,2) as datetime)) 
END AS CALL_LENGTH 
FROM spp.tcalentr
WHERE 
ISNUMERIC(CALESTART)=1 AND ISNUMERIC(CALEEND)=1 AND CALESTART IS NOT NULL AND CALEEND IS NOT NULL AND
DATEDIFF(mi , CAST(LEFT(CALESTART,2)+'':''+RIGHT(CALESTART,2) as datetime) , CAST(LEFT(CALEEND,2)+'':''+RIGHT(CALEEND,2) as datetime))>=0
')


EXECUTE('
ALTER VIEW spp.V_OLAP_SALESCALL_SALUNCALL
AS
SELECT SALMSERN , COMSERNO , CALEDATE , 
CASE 
WHEN ( ' + @i_param + ') THEN ''SALUNCALL_0'' 
ELSE ''SALUNCALL_1''
END AS SALESCALL_KEY  ,
CASE CALESTART
	WHEN CALEEND THEN 1
	ELSE DATEDIFF(mi , CAST(LEFT(CALESTART,2)+'':''+RIGHT(CALESTART,2) as datetime) , CAST(LEFT(CALEEND,2)+'':''+RIGHT(CALEEND,2) as datetime)) 
END AS CALL_LENGTH 
FROM spp.tcalentr
WHERE 
ISNUMERIC(CALESTART)=1 AND ISNUMERIC(CALEEND)=1 AND CALESTART IS NOT NULL AND CALEEND IS NOT NULL AND
DATEDIFF(mi , CAST(LEFT(CALESTART,2)+'':''+RIGHT(CALESTART,2) as datetime) , CAST(LEFT(CALEEND,2)+'':''+RIGHT(CALEEND,2) as datetime))>=0
')



GO
setuser
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS OFF 
GO

setuser N'spp'
GO











CREATE PROCEDURE [spp].[proc_fill_OLAP_DATE] AS

DECLARE @MAX_DATE varchar(8)
DECLARE @MIN_DATE varchar(8)

DECLARE @temp_salenum varchar(6)

DECLARE @temp_year char(4)
DECLARE @temp_week_year char(4)
DECLARE @temp_quarter char(1)
DECLARE @temp_month char(2)
DECLARE @temp_week char(2)
DECLARE @temp_day char(2)

DECLARE @snapshot_date char(8)

DECLARE @temp_date char(8)
DECLARE @temp_date_real smalldatetime


DECLARE @count int
DECLARE @cur_date varchar(8)
DECLARE @wrkday bit

SET DATEFORMAT dmy
SET DATEFIRST 1
SET NOCOUNT ON

/***********************************/
if exists (select * from dbo.sysobjects where id = object_id(N'[spp].[OLAP_DATE]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
drop table [spp].[OLAP_DATE]
/***********************************/

/***********************************/
CREATE TABLE [spp].[OLAP_DATE] (
	[DATE] [varchar] (8)   NOT NULL PRIMARY KEY ,
	[YEAR] [varchar] (4)  NOT NULL ,
	[QUARTER] [varchar] (5)  NOT NULL ,
	[MONTH] [varchar] (6) NOT NULL ,
	[WEEK] [varchar] (6)  NOT NULL ,
	[SALENUM] [varchar] (6)  NOT NULL ,
	[SNAPSHOT_DATE] [varchar] (8) NOT NULL ,
	[YEAR_SNAPSHOT_DATE] [varchar] (8)  NULL ,
	[WRKDAY] tinyint DEFAULT 1 ,
	[WRKDAY_SUM] numeric DEFAULT 1.0 ,
	[WRKDAY_SERNO] int   NOT NULL DEFAULT 0 ,
	[MSA_WRKDAY] tinyint DEFAULT 1,
	[WEEKEND] tinyint DEFAULT 0 ,
) ON [PRIMARY]
/***********************************/


/***********************************/
if exists (select * from dbo.sysobjects where id = object_id(N'[spp].[OLAP_DATE_CORRUPT]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
drop table [spp].[OLAP_DATE_CORRUPT]
/***********************************/

/***********************************/
CREATE TABLE [spp].[OLAP_DATE_CORRUPT] (
	[DATE] [varchar] (8)  NULL ,
	[YEAR] [varchar] (4)    DEFAULT  '0000'  ,
	[QUARTER] [varchar] (5)    DEFAULT  '00000' ,
	[MONTH] [varchar] (6)   DEFAULT  '000000' ,
	[WEEK] [varchar] (6)    DEFAULT  '000000' ,
	[SALENUM] [varchar] (6)    DEFAULT  '00000' ,
	[SNAPSHOT_DATE] [varchar] (8)   DEFAULT  '00000000' ,
	[YEAR_SNAPSHOT_DATE] [varchar] (8)   DEFAULT  '00000000' ,
	[WRKDAY] tinyint DEFAULT 0 ,
	[MSA_WRKDAY] tinyint DEFAULT 0,
	[WEEKEND] tinyint DEFAULT 0 ,
) ON [PRIMARY]
/***********************************/



CREATE TABLE #DATE_TABLE (DATE varchar(8))


INSERT INTO #DATE_TABLE(DATE)
SELECT DISTINCT TEMPDATE FROM 
(
SELECT DPMHDATE AS TEMPDATE FROM TDPMHDR 

UNION

SELECT DELDATE  AS TEMPDATE FROM TDELIVER 

UNION

SELECT ORDCDATE AS TEMPDATE FROM TORDER 

UNION

SELECT ORDODATE AS TEMPDATE FROM TORDER 

UNION

SELECT ORDDDATE AS TEMPDATE FROM TORDER 

UNION

SELECT SAMCHDATE AS TEMPDATE FROM TSAMERCH 

UNION

SELECT CALEDATE AS TEMPDATE FROM TCALENTR 

UNION

SELECT MSADATE AS TEMPDATE FROM TMSASLIP 
	WHERE EXISTS(SELECT * FROM TMSAENTR WHERE TMSASLIP.MSASERN=TMSAENTR.MSASERN)

UNION

SELECT MSAPAID AS TEMPDATE FROM TMSASLIP 
	WHERE EXISTS(SELECT * FROM TMSAENTR WHERE TMSASLIP.MSASERN=TMSAENTR.MSASERN)

UNION

SELECT MSAPAY AS TEMPDATE FROM TMSASLIP 
	WHERE EXISTS(SELECT * FROM TMSAENTR WHERE TMSASLIP.MSASERN=TMSAENTR.MSASERN)


UNION

SELECT MSAEND AS TEMPDATE FROM TMSASLIP 
	WHERE EXISTS(SELECT * FROM TMSAENTR WHERE TMSASLIP.MSASERN=TMSAENTR.MSASERN)

UNION

SELECT MSASTART AS TEMPDATE FROM TMSASLIP 
	WHERE EXISTS(SELECT * FROM TMSAENTR WHERE TMSASLIP.MSASERN=TMSAENTR.MSASERN)

UNION

SELECT LEFT(TARGETIME,4) + '12' + '31' AS TEMPDATE FROM TTARENTR

UNION

SELECT LEFT(TARGETIME,4) + '01' + '01' AS TEMPDATE FROM TTARENTR

UNION

SELECT SELSTART AS TEMPDATE FROM TSELECT 
	WHERE EXISTS(SELECT * FROM TSELENTR WHERE TSELECT.SELSERN=TSELENTR.SELSERN)

UNION

SELECT SELESTART AS TEMPDATE FROM TSELENTR 

UNION

SELECT SELEND AS TEMPDATE FROM TSELECT 
	WHERE EXISTS(SELECT * FROM TSELENTR WHERE TSELECT.SELSERN=TSELENTR.SELSERN)

UNION

SELECT SELEEND AS TEMPDATE FROM TSELENTR 

) DATE_TBL







SELECT @MAX_DATE=MAX(TEMPDATE) , @MIN_DATE=MIN(TEMPDATE) FROM
(
SELECT convert(varchar(8) , DATEADD(m , 13 , getdate())  , 112) AS TEMPDATE

UNION

SELECT LEFT(convert(varchar(8) , DATEADD(m , -25 , getdate())  , 112) , 4) + '0101'  AS TEMPDATE

UNION

SELECT DATE AS TEMPDATE FROM #DATE_TABLE WHERE ISDATE(DATE)=1 AND DATE>='1980' AND DATE<='2020'

) TBL







IF RIGHT(@MIN_DATE,2)>'28'
	SET @MIN_DATE=LEFT(@MIN_DATE , 6) + '28' 

IF RIGHT(@MAX_DATE,2)<'28'
	SET @MAX_DATE=LEFT(@MAX_DATE , 6) + '28' 





SET @temp_date_real=CONVERT(smalldatetime , @MIN_DATE , 112)

SET @temp_year=YEAR(@temp_date_real)
SET @temp_quarter=DATEPART(qq , @temp_date_real)
SET @temp_month=MONTH(@temp_date_real)
IF LEN(@temp_month)=1
	SET @temp_month='0' + @temp_month
SET @temp_week=DATEPART(wk , @temp_date_real)
SET @temp_week_year=@temp_year

-- finnish week conversion
IF DATEPART(dw , CONVERT(smalldatetime , @temp_week_year + '0101' , 112))>4 -- if first jan is after thursday	
	BEGIN
		IF @temp_week='1'
			BEGIN
				SET @temp_week_year=CAST(@temp_week_year as int)-1
				SET @temp_week='53'
			END
		ELSE
			SET @temp_week=CAST(@temp_week as int)-1
	END
-- end finnish week conversion

IF LEN(@temp_week)=1
	SET @temp_week='0' + @temp_week
SET @temp_day=DAY(@temp_date_real)
IF LEN(@temp_day)=1
	SET @temp_day='0' + @temp_day

SET @snapshot_date=@temp_year+@temp_month+'28'

SET @temp_salenum='00000000'
SELECT @temp_salenum=ISNULL(SALENUM,'00000000') FROM TSALEPER WHERE SALESTART<=@MIN_DATE AND SALEEND>=@MIN_DATE

IF NOT EXISTS(SELECT * FROM OLAP_DATE WHERE DATE=@temp_year+@temp_month+@temp_day)
	INSERT INTO OLAP_DATE(YEAR , QUARTER , MONTH , WEEK , DATE , SALENUM , SNAPSHOT_DATE )
		VALUES(@temp_year , @temp_year + @temp_quarter , @temp_year+@temp_month ,  @temp_week_year+@temp_week , @temp_year+@temp_month+@temp_day , @temp_salenum , @snapshot_date )











IF EXISTS(SELECT * FROM OLAP_DATE WHERE DATE<@MAX_DATE )
	BEGIN
		SELECT @temp_date=MAX(DATE)  FROM OLAP_DATE WHERE DATE<=@MAX_DATE
		WHILE @temp_date<@MAX_DATE
			BEGIN

				SET @temp_date_real=CONVERT(smalldatetime , @temp_date , 112)
				
				SET @temp_date_real=DATEADD ( d , 1, @temp_date_real) 
				
				SET @temp_year=YEAR(@temp_date_real)
				SET @temp_quarter=DATEPART(qq , @temp_date_real)
				SET @temp_month=MONTH(@temp_date_real)
				IF LEN(@temp_month)=1
					SET @temp_month='0' + @temp_month
				SET @temp_week=DATEPART(wk , @temp_date_real)
				SET @temp_week_year=@temp_year
				
				-- finnish week conversion
				IF DATEPART(dw , CONVERT(smalldatetime , @temp_week_year + '0101' , 112))>4 -- if first jan is after thursday	
					BEGIN
						IF @temp_week='1'
							BEGIN
								SET @temp_week_year=CAST(@temp_week_year as int)-1
								SET @temp_week='53'
							END
						ELSE
							SET @temp_week=CAST(@temp_week as int)-1
					END
				-- end finnish week conversion

				IF LEN(@temp_week)=1
					SET @temp_week='0' + @temp_week
				SET @temp_day=DAY(@temp_date_real)
				IF LEN(@temp_day)=1
					SET @temp_day='0' + @temp_day
		
				
				--IF EXISTS(SELECT  * FROM TDPMHDR WHERE LEFT(DPMHDATE,6)=@temp_year+@temp_month AND EXISTS(SELECT * FROM TDPMENTR WHERE TDPMENTR.DPMHDSERN=TDPMHDR.DPMHDSERN))
					SET @snapshot_date=@temp_year+@temp_month+'28'
				--OTHERWISE JUST PREVIOUSE NOT EMPTY SNAPSHOT DATE

				SET @temp_salenum='00000000'
				SELECT @temp_salenum=ISNULL(SALENUM,'00000000') FROM TSALEPER WHERE SALESTART<=@temp_year+@temp_month+@temp_day AND SALEEND>=@temp_year+@temp_month+@temp_day

				IF NOT EXISTS(SELECT * FROM OLAP_DATE WHERE DATE=@temp_year+@temp_month+@temp_day)
					INSERT INTO OLAP_DATE(YEAR , QUARTER , MONTH , WEEK , DATE , SALENUM , SNAPSHOT_DATE )
						VALUES(@temp_year , @temp_year +@temp_quarter , @temp_year+@temp_month ,  @temp_week_year+@temp_week , @temp_year+@temp_month+@temp_day , @temp_salenum ,@snapshot_date )

				SELECT @temp_date=MAX(DATE) FROM OLAP_DATE WHERE DATE<=@MAX_DATE
			END
	END

UPDATE OLAP_DATE SET YEAR_SNAPSHOT_DATE=year_table.SNAPSHOT_DATE
	FROM OLAP_DATE , (SELECT MAX(SNAPSHOT_DATE) AS SNAPSHOT_DATE , YEAR FROM OLAP_DATE GROUP BY YEAR) year_table
	WHERE OLAP_DATE.YEAR=year_table.YEAR

UPDATE OLAP_DATE SET WRKDAY=0 , MSA_WRKDAY=0 , WEEKEND=1 , WRKDAY_SUM=0
	WHERE DATEPART(dw, DATE ) IN ( 6 ,7 )


UPDATE OLAP_DATE SET WRKDAY=1 , MSA_WRKDAY=1 , WRKDAY_SUM=1 WHERE DATE IN (SELECT CALGDATE FROM TCALGLOB WHERE CALGSTAT1='0'  )

UPDATE OLAP_DATE SET WRKDAY=1 , MSA_WRKDAY=1 , WRKDAY_SUM=0.5   WHERE DATE IN (SELECT CALGDATE FROM TCALGLOB WHERE CALGSTAT1='1'  )

UPDATE OLAP_DATE SET WRKDAY=0 , MSA_WRKDAY=0 ,  WRKDAY_SUM=0  WHERE DATE IN (SELECT CALGDATE FROM TCALGLOB WHERE CALGSTAT1='2'  )

--UPDATE OLAP_DATE SET WEEKEND=1 WHERE DATEPART(dw , DATE )>5

UPDATE OLAP_DATE SET MSA_WRKDAY=1 
FROM OLAP_DATE WHERE EXISTS(SELECT * FROM spp.TMSASLIP TMSASLIP WHERE TMSASLIP.MSASTART=OLAP_DATE.DATE OR TMSASLIP.MSAEND=OLAP_DATE.DATE)




SET @count=0
DECLARE temp_cursor CURSOR FOR SELECT [DATE] , WRKDAY FROM OLAP_DATE ORDER BY DATE
OPEN temp_cursor
FETCH  NEXT FROM temp_cursor INTO @cur_date , @wrkday

WHILE @@FETCH_STATUS=0
	BEGIN
		IF @wrkday=1
			SET @count=@count+1

		UPDATE OLAP_DATE SET WRKDAY_SERNO=@count WHERE DATE=@cur_date

		FETCH  NEXT FROM temp_cursor INTO @cur_date , @wrkday
	END

CLOSE temp_cursor
DEALLOCATE temp_cursor

/*************************************************************************************************************/
create index ix_olap_date_WRKDAY_SERNO on olap_date(WRKDAY_SERNO)
/*************************************************************************************************************/





INSERT INTO OLAP_DATE_CORRUPT(DATE)
	SELECT DATE FROM #DATE_TABLE WHERE DATE NOT IN (SELECT DATE FROM OLAP_DATE)



CREATE NONCLUSTERED INDEX IX_OLAP_DATE_YEAR
ON OLAP_DATE(YEAR)

CREATE NONCLUSTERED INDEX IX_OLAP_DATE_MONTH
ON OLAP_DATE(MONTH)

CREATE NONCLUSTERED INDEX IX_OLAP_DATE_WEEK
ON OLAP_DATE(WEEK)

CREATE NONCLUSTERED INDEX IX_OLAP_DATE_SALENUM
ON OLAP_DATE(SALENUM)



DROP TABLE #DATE_TABLE


GO
setuser
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

setuser N'spp'
GO






CREATE PROCEDURE spp.proc_fill_OLAP_DELDISTR
AS

SET NOCOUNT ON
SET DATEFIRST 1



--------------------   DATE TO INSERT CUMULATIVE SUMS FROM  -----------------------------

DECLARE @DEL_START_DELDATE varchar(8)
DECLARE @AUDIT_START_DELDATE varchar(8)
DECLARE @START_DELDATE varchar(8)
DECLARE @LAST_DELDATE varchar(8)


SELECT @DEL_START_DELDATE=MIN(DELDATE) FROM 
TDELIVER INNER JOIN TDELENTR ON TDELIVER.DELSERN=TDELENTR.DELSERN
WHERE 
EXISTS(SELECT * FROM OLAP_DATE WHERE TDELIVER.DELDATE=OLAP_DATE.DATE)
AND EXISTS(SELECT * FROM OLAP_STORE WHERE TDELIVER.COMSERNO=OLAP_STORE.COMSERNO)
AND EXISTS(SELECT * FROM OLAP_PRODUCT WHERE TDELENTR.PRODSERN=OLAP_PRODUCT.PRODSERN)
AND NOT EXISTS(SELECT * FROM OLAP_DELDISTR_NOTEXP WHERE TDELIVER.DELDATE=OLAP_DELDISTR_NOTEXP.DELDATE)
AND DELDATE<=convert(varchar(8) , DATEADD(m , 2  , GETDATE() )  , 112) 

SELECT @AUDIT_START_DELDATE=MIN(DELDATE) FROM TDELIVER WHERE DELSERN IN ( SELECT KEYSERN1 FROM OLAP_AUDIT WHERE KEYTYPE='DELSERN' )
AND EXISTS(SELECT * FROM OLAP_DATE WHERE TDELIVER.DELDATE=OLAP_DATE.DATE)

IF @DEL_START_DELDATE IS NULL AND @AUDIT_START_DELDATE IS NULL
	RETURN
ELSE
IF @DEL_START_DELDATE IS NOT NULL AND @AUDIT_START_DELDATE IS NOT NULL
	IF @DEL_START_DELDATE<@AUDIT_START_DELDATE
		SET @START_DELDATE=@DEL_START_DELDATE
	ELSE
		SET @START_DELDATE=@AUDIT_START_DELDATE
ELSE
IF @DEL_START_DELDATE IS NOT NULL
	SET @START_DELDATE=@DEL_START_DELDATE
ELSE
IF @AUDIT_START_DELDATE IS NOT NULL
	SET @START_DELDATE=@AUDIT_START_DELDATE



exec proc_insert_LOG 'date to start: ' , @START_DELDATE

------------------------------------------------------------------------------------------






exec proc_insert_LOG 'DELETE FROM OLAP_DELDISTR_TMP'

DELETE FROM OLAP_DELDISTR_TMP WHERE DELDATE>=@START_DELDATE

exec proc_insert_LOG 'end'




exec proc_insert_LOG 'insert into OLAP_DELDISTR_TMP'


insert into OLAP_DELDISTR_TMP(comserno , prodsern , DELDATE , rangestart_date , outofstock_date , wrkdays_in_range , deldmonth , wrkday_serno , deleactvol )
select
comserno ,
tdelentr.prodsern ,
DELDATE ,
convert(varchar(8) , DATEADD(m , -12 , CONVERT(datetime , DELDATE ) )  , 112) as rangestart_date ,
'' as outofstock_date ,
0 as wrkdays_in_range ,
'' as deldmonth,
max(olap_date.wrkday_serno) as wrkday_serno ,
sum(ISNULL(
(CASE DELEVOLFLG
	WHEN '1'  THEN  spp.TDELENTR.DELEACTVOL* OLAP_LPROPROD.PRODSIZE*OLAP_LPROPROD.PRODCASE_MULT
	ELSE spp.TDELENTR.DELEACTVOL
END)
,0)) as deleactvol
from tdeliver inner join tdelentr on tdeliver.delsern=tdelentr.delsern
inner join olap_date on olap_date.date=tdeliver.DELDATE
inner join OLAP_LPROPROD on OLAP_LPROPROD.prodsern=tdelentr.prodsern
where exists(select * from olap_store where olap_store.comserno=tdeliver.comserno)
and DELDATE>=@START_DELDATE
group by comserno , tdelentr.prodsern , DELDATE


exec proc_insert_LOG 'end'




exec proc_insert_LOG 'UPDATE OLAP_DELDISTR_TMP'

UPDATE OLAP_DELDISTR_TMP
SET wrkdays_in_range=wrkday_serno-(SELECT TOP 1 WRKDAY_SERNO FROM OLAP_DELDISTR_TMP t2 WHERE t2.comserno=OLAP_DELDISTR_TMP.comserno and t2.prodsern=OLAP_DELDISTR_TMP.prodsern and t2.DELDATE>=OLAP_DELDISTR_TMP.rangestart_date ORDER BY t2.DELDATE ASC)
WHERE DELDATE>=@START_DELDATE

exec proc_insert_LOG 'end'






exec proc_insert_LOG 'UPDATE OLAP_DELDISTR_TMP'

DECLARE @MAX_DATE char(8)

SELECT @MAX_DATE=MAX(DATE) FROM OLAP_DATE


UPDATE OLAP_DELDISTR_TMP
SET
OUTOFSTOCK_DATE=ISNULL(
(SELECT MIN(DATE) FROM OLAP_DATE d1 WHERE d1.WRKDAY_SERNO=(OLAP_DELDISTR_TMP.WRKDAY_SERNO+ceiling( (case when OLAP_DELDISTR_TMP.wrkdays_in_range>0 then OLAP_DELDISTR_TMP.wrkdays_in_range else 21 end)*(OLAP_DELDISTR_TMP.deleactvol*0.8)/isnull((select case when sum(t2.deleactvol)=0 then NULL else sum(t2.deleactvol) end from OLAP_DELDISTR_TMP t2 
	where t2.comserno=OLAP_DELDISTR_TMP.comserno and t2.prodsern=OLAP_DELDISTR_TMP.prodsern and t2.DELDATE<OLAP_DELDISTR_TMP.DELDATE and t2.DELDATE>=OLAP_DELDISTR_TMP.rangestart_date) , case when OLAP_DELDISTR_TMP.deleactvol=0 then 1 else (OLAP_DELDISTR_TMP.deleactvol*0.8) end  ))
)
) , @MAX_DATE )
WHERE DELDATE>=@START_DELDATE

exec proc_insert_LOG 'end'






exec proc_insert_LOG 'DELETE FROM OLAP_DELDISTR_TMP2'


DELETE FROM OLAP_DELDISTR_TMP2 WHERE DELDATE>=@START_DELDATE

exec proc_insert_LOG 'end'





exec proc_insert_LOG 'INSERT INTO OLAP_DELDISTR_TMP2'



INSERT INTO OLAP_DELDISTR_TMP2 (
COMSERNO ,
PRODSERN , 
DELDATE ,
PREV_DELDATE ,
INDISTR ,
INBSEL ,  
INSEL
)
select 
comserno , 
prodsern , 
DELDATE , 
'00000000' as prev_DELDATE , 
case 
	when sum(indistr)=0	then 0
	else 1
end as indistr , 
0 as inbsel,
0 as insel
from
(
select comserno , prodsern , DELDATE , 1 as indistr 
from OLAP_DELDISTR_TMP t1 where not exists(select * from OLAP_DELDISTR_TMP t2 where t2.comserno=t1.comserno and t2.prodsern=t1.prodsern and t2.DELDATE<t1.DELDATE and t1.DELDATE>t2.outofstock_date)
and DELDATE>=@START_DELDATE

union all

select comserno , prodsern , outofstock_date as DELDATE , 0 as indistr 
from OLAP_DELDISTR_TMP t1 where not exists(select * from OLAP_DELDISTR_TMP t2 where t2.comserno=t1.comserno and t2.prodsern=t1.prodsern and t2.DELDATE<t1.outofstock_date and t1.outofstock_date>t2.outofstock_date)
and outofstock_date>=@START_DELDATE
)tbl
group by comserno , prodsern , DELDATE

exec proc_insert_LOG 'end'






exec proc_insert_LOG 'insert into OLAP_DELDISTR_TMP2'



insert into OLAP_DELDISTR_TMP2(
COMSERNO ,
PRODSERN , 
DELDATE ,
PREV_DELDATE ,
INDISTR ,
INBSEL ,  
INSEL 
)
select 
comserno , 
prodsern , 
seldate as DELDATE , 
'00000000' as prev_DELDATE , 
(select top 1 indistr from OLAP_DELDISTR_TMP2 d2 where d2.comserno=s1.comserno and d2.prodsern=s1.prodsern and d2.DELDATE<s1.seldate order by DELDATE desc) as indistr ,
0 as inbsel,
0 as insel 
from 
(

select comserno , prodsern , seldate from olap_selection s1
where seldate>=@START_DELDATE
and exists(select * from  OLAP_DELDISTR_TMP2 d1 where d1.comserno=s1.comserno and d1.prodsern=s1.prodsern and d1.DELDATE<s1.seldate)
	and not exists(select * from  OLAP_DELDISTR_TMP2 d1 where d1.comserno=s1.comserno and d1.prodsern=s1.prodsern and d1.DELDATE=s1.seldate)

union

select comserno , prodsern , seldate from olap_base_selection s1
where seldate>=@START_DELDATE
and exists(select * from  OLAP_DELDISTR_TMP2 d1 where d1.comserno=s1.comserno and d1.prodsern=s1.prodsern and d1.DELDATE<s1.seldate)
	and not exists(select * from  OLAP_DELDISTR_TMP2 d1 where d1.comserno=s1.comserno and d1.prodsern=s1.prodsern and d1.DELDATE=s1.seldate)
) s1


exec proc_insert_LOG 'end'







exec proc_insert_LOG 'update OLAP_DELDISTR_TMP2'



update OLAP_DELDISTR_TMP2
set
prev_DELDATE=IsNUll(
(select top 1 DELDATE from OLAP_DELDISTR_TMP2 t2 where OLAP_DELDISTR_TMP2.comserno=t2.comserno and OLAP_DELDISTR_TMP2.prodsern=t2.prodsern and OLAP_DELDISTR_TMP2.DELDATE>t2.DELDATE order by t2.DELDATE desc)  
, '00000000') ,
inbsel=(case IsNUll((select top 1 insel from olap_base_selection s2 where s2.comserno=OLAP_DELDISTR_TMP2.comserno and s2.prodsern=OLAP_DELDISTR_TMP2.prodsern and s2.seldate<=OLAP_DELDISTR_TMP2.DELDATE order by seldate desc),0)
	when 1 then 1
	else 0
end),
insel=(case IsNUll((select top 1 insel from olap_selection s2 where s2.comserno=OLAP_DELDISTR_TMP2.comserno and s2.prodsern=OLAP_DELDISTR_TMP2.prodsern and s2.seldate<=OLAP_DELDISTR_TMP2.DELDATE order by seldate desc),0)
	when 1 then 1
	else 0
end) 
WHERE DELDATE>=@START_DELDATE

exec proc_insert_LOG 'end'








exec proc_insert_LOG 'DELETE FROM OLAP_DELDISTR_NOTEXP'


DELETE FROM OLAP_DELDISTR_NOTEXP WHERE DELDATE>=@START_DELDATE

exec proc_insert_LOG 'end'








exec proc_insert_LOG 'insert into OLAP_DELDISTR_NOTEXP'



insert into OLAP_DELDISTR_NOTEXP(comserno , prodsern , DELDATE , insel_cum , inbsel_cum , indistr_cum , inseldistr_cum , inbseldistr_cum , prodexpand , prodexpand_intersect)
select t1.comserno, p1.prodsern, t1.DELDATE, 
(case
	when isnull(t2.insel,0)=1 and t1.insel=0	then -1
	when isnull(t2.insel,0)=0 and t1.insel=1	then 1
	else 0
end) as insel_cum,
(case
	when isnull(t2.inbsel,0)=1 and t1.inbsel=0	then -1
	when isnull(t2.inbsel,0)=0 and t1.inbsel=1	then 1
	else 0
end) as inbsel_cum,
(case
	when isnull(t2.indistr,0)=1 and t1.indistr=0	then -1
	when isnull(t2.indistr,0)=0 and t1.indistr=1	then 1
	else 0
end) as indistr_cum,
(case
	when (isnull(t2.indistr,0)=1 and isnull(t2.insel,0)=1) and (t1.indistr=0 or t1.insel=0)	then -1
	when (isnull(t2.indistr,0)=0 or isnull(t2.insel,0)=0) and (t1.indistr=1 and t1.insel=1)	then 1
	else 0
end) as inseldistr_cum ,
(case
	when (isnull(t2.indistr,0)=1 and isnull(t2.inbsel,0)=1) and (t1.indistr=0 or t1.inbsel=0)	then -1
	when (isnull(t2.indistr,0)=0 or isnull(t2.inbsel,0)=0) and (t1.indistr=1 and t1.inbsel=1)	then 1
	else 0
end) as inbseldistr_cum ,
prodexpand ,
prodexpand_intersect
from OLAP_DELDISTR_TMP2 t1
inner join olap_lproprod p1 
	on t1.prodsern=p1.parent_prodsern
left outer join OLAP_DELDISTR_TMP2 t2
	on t1.comserno=t2.comserno and t1.prodsern=t2.prodsern and t1.prev_DELDATE=t2.DELDATE
where t1.DELDATE>=@START_DELDATE



exec proc_insert_LOG 'end'









exec proc_insert_LOG 'delete from OLAP_DELDISTR_EXP'


delete from OLAP_DELDISTR_EXP where DELDATE>=@START_DELDATE

exec proc_insert_LOG 'end'


 



exec proc_insert_LOG 'insert into OLAP_DELDISTR_EXP'



insert into OLAP_DELDISTR_EXP(comserno , prodsern , DELDATE , 
				prev_indistr_cum_sum , prev_insel_cum_sum , prev_inbsel_cum_sum , 
				cur_indistr_cum_sum , cur_insel_cum_sum, cur_inbsel_cum_sum , 
				indistr_cum , inseldistr_cum , inbseldistr_cum)
select comserno , prodsern , DELDATE ,
isnull((select sum(indistr_cum) from OLAP_DELDISTR_NOTEXP t2 where t2.comserno=t1.comserno and t2.prodsern=t1.prodsern and t2.DELDATE<t1.DELDATE),0) 
as prev_indistr_cum_sum ,
isnull((select sum(insel_cum) from OLAP_DELDISTR_NOTEXP t2 where t2.comserno=t1.comserno and t2.prodsern=t1.prodsern and t2.DELDATE<t1.DELDATE),0) 
as prev_insel_cum_sum ,
isnull((select sum(inbsel_cum) from OLAP_DELDISTR_NOTEXP t2 where t2.comserno=t1.comserno and t2.prodsern=t1.prodsern and t2.DELDATE<t1.DELDATE),0) 
as prev_inbsel_cum_sum ,
sum(indistr_cum) as cur_indistr_cum_sum ,
sum(insel_cum) as cur_insel_cum_sum ,
sum(inbsel_cum) as cur_inbsel_cum_sum ,
0 as indistr_cum ,
0 as inseldistr_cum , 
0 as inbseldistr_cum 
from 
OLAP_DELDISTR_NOTEXP t1 
where prodexpand_intersect=2 and DELDATE>=@START_DELDATE
group by comserno , prodsern , DELDATE


exec proc_insert_LOG 'end'





exec proc_insert_LOG 'update OLAP_DELDISTR_EXP'


update OLAP_DELDISTR_EXP
set indistr_cum=
(case
	when prev_indistr_cum_sum>0 and prev_indistr_cum_sum+cur_indistr_cum_sum<=0	then -1
	when prev_indistr_cum_sum<=0 and prev_indistr_cum_sum+cur_indistr_cum_sum>0	then 1
	else 0
end) ,
inseldistr_cum=
(case
	when (prev_indistr_cum_sum>0 and prev_insel_cum_sum>0) and ((prev_indistr_cum_sum+cur_indistr_cum_sum)<=0 or (prev_insel_cum_sum+cur_insel_cum_sum)<=0)	then -1
	when (prev_indistr_cum_sum<=0 or prev_insel_cum_sum<=0) and ((prev_indistr_cum_sum+cur_indistr_cum_sum)>0 and (prev_insel_cum_sum+cur_insel_cum_sum)>0)	then 1
	else 0
end) ,
inbseldistr_cum=
(case
	when (prev_indistr_cum_sum>0 and prev_inbsel_cum_sum>0) and ((prev_indistr_cum_sum+cur_indistr_cum_sum)<=0 or (prev_inbsel_cum_sum+cur_inbsel_cum_sum)<=0)	then -1
	when (prev_indistr_cum_sum<=0 or prev_inbsel_cum_sum<=0) and ((prev_indistr_cum_sum+cur_indistr_cum_sum)>0 and (prev_inbsel_cum_sum+cur_inbsel_cum_sum)>0)	then 1
	else 0
end)
where DELDATE>=@START_DELDATE


exec proc_insert_LOG 'end'



DELETE FROM OLAP_AUDIT WHERE KEYTYPE='DELSERN'







GO
setuser
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

setuser N'spp'
GO






CREATE procedure spp.proc_fill_OLAP_DELDISTR_SEL 
@start_seldate varchar(8)
as

declare @seldate varchar(8)
declare @prev_seldate varchar(8)

set nocount on 


create table #cumulative_set(comserno varchar(15), prodsern varchar(15) , prodexpand tinyint , indistr smallint , prev_indistr smallint , insel smallint , prev_insel smallint , inbsel smallint , prev_inbsel smallint)



SELECT @start_seldate=ISNULL(MAX(SELDATE) , '00000000')  FROM olap_seldate t2 WHERE SELDATE<=@start_seldate



delete from olap_deldistr where indistr=0 and (inseldistr!=0  or inbseldistr!=0) and deldate>=@start_seldate
update olap_deldistr set inseldistr=0 ,  inbseldistr=0  where deldate>=@start_seldate




--------------------- filling cumulative set -----------------------

IF @start_seldate!='00000000'
	BEGIN

		insert into #cumulative_set(comserno , prodsern , prodexpand , indistr , prev_indistr,  insel , prev_insel,  inbsel , prev_inbsel)
			select comserno , prodsern , prodexpand , sum(indistr) as  indistr, 0 as prev_indistr , 0  as insel , 0 as prev_insel  , 0  as inbsel , 0 as prev_inbsel from olap_deldistr
			where deldate<@start_seldate
			group by comserno , prodsern , prodexpand
		
		
		
		UPDATE #cumulative_set
			SET INSEL=1
			FROM #cumulative_set WHERE EXISTS(SELECT * FROM OLAP_TSELENTR , OLAP_LCOMSEL WHERE 
			OLAP_LCOMSEL.COMSERNO=#cumulative_set.COMSERNO AND OLAP_TSELENTR.PRODSERN=#cumulative_set.PRODSERN AND
			OLAP_TSELENTR.SELSERN=OLAP_LCOMSEL.SELSERN AND SELESTART<=convert(varchar(8) , DATEADD(d , -1 , CONVERT(datetime , @start_seldate ) )  , 112)  AND SELEEND>=@start_seldate )
		
		
		
		UPDATE #cumulative_set
			SET INBSEL=ISNULL(
			(SELECT TOP 1 CASE OLAP_BASE_SELECTION.INSEL  WHEN 1 THEN 1 ELSE 0 END AS INSELSUM
			FROM OLAP_BASE_SELECTION
			WHERE OLAP_BASE_SELECTION.COMSERNO=#cumulative_set.COMSERNO AND OLAP_BASE_SELECTION.PRODSERN= #cumulative_set.PRODSERN AND OLAP_BASE_SELECTION.SELDATE<@start_seldate
			ORDER BY OLAP_BASE_SELECTION.COMSERNO , OLAP_BASE_SELECTION.PRODSERN, OLAP_BASE_SELECTION.SELDATE DESC
			)
			, 0 ) --ISNULL end
			FROM  #cumulative_set 
	END

--------------------------------------------------------------------------




declare temp_cursor cursor for
select * from 
(
select seldate from olap_seldate 
union
select '00000000' as seldate
union
select '99999999' as seldate
)tbl
where seldate>=@start_seldate
order by seldate

open temp_cursor


fetch next from temp_cursor into @seldate

set @prev_seldate=@seldate


fetch next from temp_cursor into @seldate

while @@fetch_status=0
	begin
		exec proc_insert_LOG @prev_seldate , '-' , @seldate

		update #cumulative_set
			set prev_indistr=indistr , prev_insel=insel , prev_inbsel=inbsel , insel=0 , inbsel=0



		insert into #cumulative_set(comserno , prodsern , prodexpand , indistr , prev_indistr,  insel , prev_insel,  inbsel , prev_inbsel)
			select comserno , prodsern , prodexpand , 0 as indistr, 0 as prev_indistr , 0  as insel , 0 as prev_insel , 0  as inbsel , 0 as prev_inbsel from olap_deldistr
			where deldate>=@prev_seldate and deldate<@seldate
			and not exists(select * from #cumulative_set t1 where t1.comserno=olap_deldistr.comserno and t1.prodsern=olap_deldistr.prodsern and t1.prodexpand=olap_deldistr.prodexpand)
			group by comserno , prodsern , prodexpand



		UPDATE #cumulative_set
			SET INSEL=1
			FROM #cumulative_set WHERE EXISTS(SELECT * FROM OLAP_TSELENTR , OLAP_LCOMSEL WHERE 
			OLAP_LCOMSEL.COMSERNO=#cumulative_set.COMSERNO AND OLAP_TSELENTR.PRODSERN=#cumulative_set.PRODSERN AND
			OLAP_TSELENTR.SELSERN=OLAP_LCOMSEL.SELSERN AND SELESTART<=@prev_seldate AND SELEEND>@prev_seldate )


		UPDATE #cumulative_set
			SET INBSEL=ISNULL(
			(SELECT TOP 1 CASE OLAP_BASE_SELECTION.INSEL  WHEN 1 THEN 1 ELSE 0 END AS INSELSUM
			FROM OLAP_BASE_SELECTION
			WHERE OLAP_BASE_SELECTION.COMSERNO=#cumulative_set.COMSERNO AND OLAP_BASE_SELECTION.PRODSERN= #cumulative_set.PRODSERN AND OLAP_BASE_SELECTION.SELDATE<=@prev_seldate
			ORDER BY OLAP_BASE_SELECTION.COMSERNO , OLAP_BASE_SELECTION.PRODSERN, OLAP_BASE_SELECTION.SELDATE DESC
			)
			, 0 ) --ISNULL end
			FROM  #cumulative_set 


		--select * from #cumulative_set where comserno='IMP000000009354' and prodsern='IMP000000014524'

		update olap_deldistr
			set olap_deldistr.inseldistr=
			(case
				when olap_deldistr.indistr=1 and #cumulative_set.insel=1 then 1
				when olap_deldistr.indistr=-1 and #cumulative_set.insel=1 then -1
				else 0
			end) , 
			olap_deldistr.inbseldistr=(case
				when olap_deldistr.indistr=1 and #cumulative_set.inbsel=1 then 1
				when olap_deldistr.indistr=-1 and #cumulative_set.inbsel=1 then -1
				else 0
			end)
			from #cumulative_set , olap_deldistr
			where #cumulative_set.comserno=olap_deldistr.comserno and #cumulative_set.prodsern=olap_deldistr.prodsern  and #cumulative_set.prodexpand=olap_deldistr.prodexpand
			and deldate>=@prev_seldate and deldate<@seldate



		insert into olap_deldistr(comserno , prodsern , prodexpand , deldate , indistr , inseldistr ,  inbseldistr)
			select #cumulative_set.comserno , #cumulative_set.prodsern , #cumulative_set.prodexpand , @prev_seldate as deldate , 0 as indistr ,  insel-prev_insel as inseldistr ,  inbsel-prev_inbsel as inbseldistr
			from #cumulative_set
			where 
			prev_indistr=1 and indistr=1 and ( prev_insel!=insel  or  prev_inbsel!=inbsel  )

		--select * from olap_deldistr where comserno='IMP000000009354' and prodsern='IMP000000014524'  and deldate>=@prev_seldate and deldate<@seldate

		exec proc_insert_LOG @@rowcount



		update #cumulative_set
			set #cumulative_set.indistr=#cumulative_set.indistr+sum_indistr
			from #cumulative_set , (select comserno , prodsern , prodexpand , sum(indistr) as sum_indistr from olap_deldistr where deldate>=@prev_seldate and deldate<@seldate group by comserno , prodsern , prodexpand ) olap_deldistr
			where #cumulative_set.comserno=olap_deldistr.comserno and #cumulative_set.prodsern=olap_deldistr.prodsern  and #cumulative_set.prodexpand=olap_deldistr.prodexpand 



		set @prev_seldate=@seldate

		fetch next from temp_cursor into @seldate
	end

close temp_cursor
deallocate temp_cursor

drop table #cumulative_set




GO
setuser
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

setuser N'spp'
GO









create procedure spp.proc_fill_OLAP_DPM
AS



SET NOCOUNT ON
SET DATEFIRST 1




--------------------   DATE TO INSERT CUMULATIVE SUMS FROM  -----------------------------

DECLARE @DPM_START_DPMHDATE varchar(8)
DECLARE @AUDIT_START_DPMHDATE varchar(8)
DECLARE @START_DPMHDATE varchar(8)
DECLARE @LAST_DPMHDATE varchar(8)


SELECT @DPM_START_DPMHDATE=MIN(DPMHDATE) FROM 
TDPMHDR INNER JOIN TDPMENTR ON TDPMHDR.DPMHDSERN=TDPMENTR.DPMHDSERN
WHERE 
EXISTS(SELECT * FROM OLAP_DATE WHERE TDPMHDR.DPMHDATE=OLAP_DATE.DATE)
AND EXISTS(SELECT * FROM OLAP_STORE WHERE TDPMHDR.COMSERNO=OLAP_STORE.COMSERNO)
AND EXISTS(SELECT * FROM OLAP_PRODUCT WHERE TDPMENTR.PRODSERN=OLAP_PRODUCT.PRODSERN)
AND NOT EXISTS(SELECT * FROM OLAP_DPM_NOTEXP WHERE TDPMHDR.DPMHDATE=OLAP_DPM_NOTEXP.DPMHDATE)

SELECT @AUDIT_START_DPMHDATE=MIN(DPMHDATE) FROM TDPMHDR WHERE DPMHDSERN IN ( SELECT KEYSERN1 FROM OLAP_AUDIT WHERE KEYTYPE='DPMHDSERN' )
AND ISDATE(DPMHDATE)=1  AND DPMHDATE IS NOT NULL

IF @DPM_START_DPMHDATE IS NULL AND @AUDIT_START_DPMHDATE IS NULL
	RETURN
ELSE
IF @DPM_START_DPMHDATE IS NOT NULL AND @AUDIT_START_DPMHDATE IS NOT NULL
	IF @DPM_START_DPMHDATE<@AUDIT_START_DPMHDATE
		SET @START_DPMHDATE=@DPM_START_DPMHDATE
	ELSE
		SET @START_DPMHDATE=@AUDIT_START_DPMHDATE
ELSE
IF @DPM_START_DPMHDATE IS NOT NULL
	SET @START_DPMHDATE=@DPM_START_DPMHDATE
ELSE
IF @AUDIT_START_DPMHDATE IS NOT NULL
	SET @START_DPMHDATE=@AUDIT_START_DPMHDATE



exec proc_insert_LOG 'date to start: ' , @START_DPMHDATE

------------------------------------------------------------------------------------------


exec proc_insert_LOG 'delete from OLAP_DPM_TMP'


delete from OLAP_DPM_TMP where dpmhdate>=@START_DPMHDATE

exec proc_insert_LOG 'end'





exec proc_insert_LOG 'insert into OLAP_DPM_TMP'


insert into OLAP_DPM_TMP(comserno , prodsern , dpmhdate , 
			dpmecover , dpmefacing , dpmechan , dpmesalesp , dpmeavestp , dpmeprice_net , dpmeprice_gross ,
			dpmeinsel , dpmeinbsel , sel_placeholder ,  prev_dpmhdate)
select tdpmhdr.comserno , tdpmentr.prodsern , dpmhdate , 
(case 
	when 	dpmhdate>=min(olap_store.cominact)	then 0
	else    max(case when dpmecover='0' or dpmecover='1' then dpmecover else 0 end) 
end) as dpmecover ,

(case 
	when 	dpmhdate>=min(olap_store.cominact)	then 0.0
	else    max(isnull(dpmefacing,0.0)) 
end) as dpmefacing ,
(case 
	when 	dpmhdate>=min(olap_store.cominact)	then 0.0
	else    max(isnull(dpmechan,0.0)) 
end) as dpmechan ,
(case 
	when 	dpmhdate>=min(olap_store.cominact)	then 0.0
	else    max(isnull(dpmesalesp,0.0)) 
end) as dpmesalesp ,
(case 
	when 	dpmhdate>=min(olap_store.cominact)	then 0.0
	else    max(isnull(dpmeavestp,0.0)) 
end) as dpmeavestp ,
(case 
	when 	dpmhdate>=min(olap_store.cominact)	then 0.0
	else    max(
			ISNULL(CASE
				WHEN TDPMENTR.DPMEPRFLAG!='1' AND TDPMENTR.DPMEPRTAX!='1'  THEN DPMEPRICE				--per cons pkg without tax
				WHEN TDPMENTR.DPMEPRFLAG!='1' AND TDPMENTR.DPMEPRTAX='1'  THEN DPMEPRICE/(1+DPMETAX/100)		--per cons pkg with tax
				WHEN TDPMENTR.DPMEPRFLAG='1' AND TDPMENTR.DPMEPRTAX!='1'  THEN DPMEPRICE/(case isnull(DPMECSIZE,0) when 0 then 1 else DPMECSIZE end)	--per case without tax
				WHEN TDPMENTR.DPMEPRFLAG='1' AND TDPMENTR.DPMEPRTAX='1'  THEN (DPMEPRICE/(1+DPMETAX/100))/(case isnull(DPMECSIZE,0) when 0 then 1 else DPMECSIZE end)	--per case with tax
				END , 
			0.0) 
		    )
end) as dpmeprice_net ,
(case 
	when 	dpmhdate>=min(olap_store.cominact)	then 0.0
	else    max(
			ISNULL(CASE
				WHEN TDPMENTR.DPMEPRFLAG!='1' AND TDPMENTR.DPMEPRTAX!='1' THEN DPMEPRICE*(1+DPMETAX/100)		--per cons pkg without tax
				WHEN TDPMENTR.DPMEPRFLAG!='1' AND TDPMENTR.DPMEPRTAX='1' THEN DPMEPRICE					--per cons pkg with tax
				WHEN TDPMENTR.DPMEPRFLAG='1' AND TDPMENTR.DPMEPRTAX!='1' THEN (DPMEPRICE*(1+DPMETAX/100))/(case isnull(DPMECSIZE,0) when 0 then 1 else DPMECSIZE end)	--per case without tax
				WHEN TDPMENTR.DPMEPRFLAG='1' AND TDPMENTR.DPMEPRTAX='1' THEN DPMEPRICE/(case isnull(DPMECSIZE,0) when 0 then 1 else DPMECSIZE end)			--per case with tax
				END , 
			0.0) 
		    )
end) as dpmeprice_gross ,
0 as dpmeinsel,
0 as dpmeinbsel,
0 as sel_placeholder,
'00000000' as prev_dpmhdate
from 
tdpmhdr inner join tdpmentr on tdpmhdr.dpmhdsern=tdpmentr.dpmhdsern
inner join olap_store on tdpmhdr.comserno=olap_store.comserno
inner join olap_product on tdpmentr.prodsern=olap_product.prodsern
where dpmhdate>=@START_DPMHDATE
group by tdpmhdr.comserno , tdpmentr.prodsern , dpmhdate
OPTION (ORDER GROUP)



exec proc_insert_LOG 'end'







exec proc_insert_LOG 'update OLAP_DPM_TMP'



update OLAP_DPM_TMP
set 
-- NB!! until next update prev_dpmhdate is actually next_dpmhdate
prev_dpmhdate=IsNUll((select top 1 dpmhdate from OLAP_DPM_TMP t2 where OLAP_DPM_TMP.comserno=t2.comserno and OLAP_DPM_TMP.prodsern=t2.prodsern and OLAP_DPM_TMP.dpmhdate<t2.dpmhdate order by t2.dpmhdate asc) , '99999999') 
where dpmhdate>=@START_DPMHDATE


exec proc_insert_LOG 'end'



exec proc_insert_LOG 'insert into OLAP_DPM_TMP'



insert into OLAP_DPM_TMP(comserno , prodsern , dpmhdate , prev_dpmhdate , 
			dpmecover , dpmefacing , dpmechan , dpmesalesp , dpmeavestp , dpmeprice_net , dpmeprice_gross ,
			dpmeinsel , dpmeinbsel , sel_placeholder  )
select comserno , prodsern , dpmhdate , '00000000' as  prev_dpmhdate, 
			max(cast(dpmecover as tinyint)) , max(dpmefacing) , max(dpmechan) , max(dpmesalesp) , max(dpmeavestp) , 0.0 as dpmeprice_net , 0.0 as dpmeprice_gross ,
			0 as dpmeinsel , 0 as dpmeinbsel , 1 as sel_placeholder
from
(
select t1.comserno , t1.prodsern , t2.seldate as dpmhdate , 
t1.dpmecover , 
t1.dpmefacing , 
t1.dpmechan , 
t1.dpmesalesp , 
t1.dpmeavestp 
from OLAP_DPM_TMP t1 
inner join OLAP_SELECTION t2 on t1.comserno=t2.comserno and t1.prodsern=t2.prodsern and t1.dpmhdate<t2.seldate and t1.prev_dpmhdate>t2.seldate --don't forget , it's next_dpmhdate
where t1.dpmhdate>=@START_DPMHDATE

union all

select t1.comserno , t1.prodsern , t2.seldate as dpmhdate ,  
t1.dpmecover , 
t1.dpmefacing , 
t1.dpmechan , 
t1.dpmesalesp , 
t1.dpmeavestp 
from OLAP_DPM_TMP t1 
inner join OLAP_BASE_SELECTION t2 on t1.comserno=t2.comserno and t1.prodsern=t2.prodsern and t1.dpmhdate<t2.seldate and t1.prev_dpmhdate>t2.seldate --don't forget , it's next_dpmhdate
where t1.dpmhdate>=@START_DPMHDATE
) tbl
group by comserno , prodsern , dpmhdate


exec proc_insert_LOG 'end'





exec proc_insert_LOG 'update OLAP_DPM_TMP'



update OLAP_DPM_TMP
set 
prev_dpmhdate=IsNUll((select top 1 dpmhdate from OLAP_DPM_TMP t2 where OLAP_DPM_TMP.comserno=t2.comserno and OLAP_DPM_TMP.prodsern=t2.prodsern and OLAP_DPM_TMP.dpmhdate>t2.dpmhdate order by t2.dpmhdate desc) , '00000000') ,
dpmeinbsel=
(case IsNUll((select top 1 insel from olap_base_selection s2 where s2.comserno=OLAP_DPM_TMP.comserno and s2.prodsern=OLAP_DPM_TMP.prodsern and s2.seldate<=OLAP_DPM_TMP.dpmhdate order by seldate desc),0)
	when 1 then 1 
	else 0
end),
dpmeinsel=
(case IsNUll((select top 1 insel from olap_selection s2 where s2.comserno=OLAP_DPM_TMP.comserno and s2.prodsern=OLAP_DPM_TMP.prodsern and s2.seldate<=OLAP_DPM_TMP.dpmhdate order by seldate desc),0)
	when 1 then 1 
	else 0
end)
where dpmhdate>=@START_DPMHDATE 


exec proc_insert_LOG 'end'







exec proc_insert_LOG 'delete from OLAP_DPM_NOTEXP'


delete from OLAP_DPM_NOTEXP where dpmhdate>=@START_DPMHDATE

exec proc_insert_LOG 'end'




exec proc_insert_LOG 'insert into OLAP_DPM_NOTEXP'



insert into OLAP_DPM_NOTEXP(comserno , prodsern , dpmhdate , dpmeinsel_cum , dpmeinbsel_cum , 
				dpmefacing_cum , dpmechan_cum , dpmesalesp_cum , dpmeavestp_cum , dpmeprice_net , dpmeprice_gross ,
				dpmecover_cum , dpmeselcover_cum , dpmebselcover_cum , 
				dpmmeasured_cum , dpmbselmeasured_cum , dpmcount , prodexpand , prodexpand_intersect)
select t1.comserno, p1.prodsern, t1.dpmhdate, 
cast(t1.dpmeinsel as smallint)-cast(isnull(t2.dpmeinsel,0) as smallint) as dpmeinsel_cum,
cast(t1.dpmeinbsel as smallint)-cast(isnull(t2.dpmeinbsel,0) as smallint) as dpmeinbsel_cum,
t1.dpmefacing-isnull(t2.dpmefacing,0) as dpmefacing_cum,
t1.dpmechan-isnull(t2.dpmechan,0) as dpmechan_cum,
t1.dpmesalesp-isnull(t2.dpmesalesp,0) as dpmesalesp_cum,
t1.dpmeavestp-isnull(t2.dpmeavestp,0) as dpmeavestp_cum,
t1.dpmeprice_net as dpmeprice_net,
t1.dpmeprice_gross as dpmeprice_gross,
cast(t1.dpmecover as smallint)-cast(isnull(t2.dpmecover,0) as smallint)  as dpmecover_cum,
(case
	when (isnull(t2.dpmecover,0)=1 and isnull(t2.dpmeinsel,0)=1) and (t1.dpmecover=0 or t1.dpmeinsel=0)	then -1
	when (isnull(t2.dpmecover,0)=0 or isnull(t2.dpmeinsel,0)=0) and (t1.dpmecover=1 and t1.dpmeinsel=1)	then 1
	else 0
end) as dpmeselcover_cum ,
(case
	when (isnull(t2.dpmecover,0)=1 and isnull(t2.dpmeinbsel,0)=1) and (t1.dpmecover=0 or t1.dpmeinbsel=0)	then -1
	when (isnull(t2.dpmecover,0)=0 or isnull(t2.dpmeinbsel,0)=0) and (t1.dpmecover=1 and t1.dpmeinbsel=1)	then 1
	else 0
end) as dpmebselcover_cum ,
(case 
	when t1.prev_dpmhdate ='00000000' then 1
	else 0
end) as dpmmeasured_cum,
(case
	when isnull(t2.dpmeinbsel,0)=1 and t1.dpmeinbsel=0	then -1
	when isnull(t2.dpmeinbsel,0)=0 and t1.dpmeinbsel=1	then 1
	else 0
end) as dpmbselmeasured_cum,
(case
	when t1.sel_placeholder=1	then 0
	else 1
end ) as dpmcount,
prodexpand ,
prodexpand_intersect
from OLAP_DPM_TMP t1
inner join olap_lproprod p1 
	on t1.prodsern=p1.parent_prodsern
left outer join OLAP_DPM_TMP t2
	on t1.comserno=t2.comserno and t1.prodsern=t2.prodsern and t1.prev_dpmhdate=t2.dpmhdate
where t1.dpmhdate>=@START_DPMHDATE



exec proc_insert_LOG 'end'








exec proc_insert_LOG 'delete from OLAP_DPM_EXP'


delete from OLAP_DPM_EXP where dpmhdate>=@START_DPMHDATE

exec proc_insert_LOG 'end'


 

exec proc_insert_LOG 'insert into OLAP_DPM_EXP'



insert into OLAP_DPM_EXP(comserno , prodsern , dpmhdate , 
				prev_dpmecover_cum_sum , prev_dpmeinsel_cum_sum , prev_dpmeinbsel_cum_sum , 
				dpmmeasured_cum , dpmbselmeasured_cum , 
				cur_dpmecover_cum_sum , cur_dpmeinsel_cum_sum, cur_dpmeinbsel_cum_sum , 
				dpmecover_cum , dpmeselcover_cum , dpmebselcover_cum , 
				dpmefacing_cum ,dpmechan_cum ,dpmesalesp_cum , dpmeavestp_cum , dpmeprice_net , dpmeprice_gross ,
				dpmcount)
select comserno , prodsern , dpmhdate ,
isnull((select sum(dpmecover_cum) from OLAP_DPM_NOTEXP t2 where t2.comserno=t1.comserno and t2.prodsern=t1.prodsern and t2.dpmhdate<t1.dpmhdate),0) 
as prev_dpmecover_cum_sum ,
isnull((select sum(dpmefacing_cum) from OLAP_DPM_NOTEXP t2 where t2.comserno=t1.comserno and t2.prodsern=t1.prodsern and t2.dpmhdate<t1.dpmhdate),0) 
as prev_dpmeinsel_cum_sum ,
isnull((select sum(dpmeinbsel_cum) from OLAP_DPM_NOTEXP t2 where t2.comserno=t1.comserno and t2.prodsern=t1.prodsern and t2.dpmhdate<t1.dpmhdate),0) 
as prev_dpmeinbsel_cum_sum ,
case
	when not exists(select * from OLAP_DPM_NOTEXP t2 where t2.comserno=t1.comserno and t2.prodsern=t1.prodsern and t2.dpmhdate<t1.dpmhdate and dpmmeasured_cum=1)  then 1
	else 0
end as dpmmeasured_cum , --?!
0 as dpmbselmeasured_cum ,
sum(dpmecover_cum) as cur_dpmecover_cum_sum ,
sum(dpmeinsel_cum) as cur_dpmeinsel_cum_sum ,
sum(dpmeinbsel_cum) as cur_dpmeinbsel_cum_sum ,
0 as dpmecover_cum ,
0 as dpmeselcover_cum , 
0 as dpmebselcover_cum ,
sum(dpmefacing_cum) as dpmefacing_cum ,
sum(dpmechan_cum) as dpmechan_cum ,
sum(dpmesalesp_cum) as dpmesalesp_cum , 
sum(dpmeavestp_cum) as dpmeavestp_cum , 
avg(dpmeprice_net) as dpmeprice_net , 
avg(dpmeprice_gross) as dpmeprice_gross ,
case
	when sum(dpmcount)>0	then 1
	else 0
end as dpmcount
from 
OLAP_DPM_NOTEXP t1 
where prodexpand_intersect=2 and dpmhdate>=@START_DPMHDATE
group by comserno , prodsern , dpmhdate


exec proc_insert_LOG 'end'




exec proc_insert_LOG 'update OLAP_DPM_EXP'


update OLAP_DPM_EXP
set dpmecover_cum=
(case
	when prev_dpmecover_cum_sum>0 and prev_dpmecover_cum_sum+cur_dpmecover_cum_sum<=0	then -1
	when prev_dpmecover_cum_sum<=0 and prev_dpmecover_cum_sum+cur_dpmecover_cum_sum>0	then 1
	else 0
end) ,
dpmeselcover_cum=
(case
	when (prev_dpmecover_cum_sum>0 and prev_dpmeinsel_cum_sum>0) and ((prev_dpmecover_cum_sum+cur_dpmecover_cum_sum)<=0 or (prev_dpmeinsel_cum_sum+cur_dpmeinsel_cum_sum)<=0)	then -1
	when (prev_dpmecover_cum_sum<=0 or prev_dpmeinsel_cum_sum<=0) and ((prev_dpmecover_cum_sum+cur_dpmecover_cum_sum)>0 and (prev_dpmeinsel_cum_sum+cur_dpmeinsel_cum_sum)>0)	then 1
	else 0
end) ,
dpmebselcover_cum=
(case
	when (prev_dpmecover_cum_sum>0 and prev_dpmeinbsel_cum_sum>0) and ((prev_dpmecover_cum_sum+cur_dpmecover_cum_sum)<=0 or (prev_dpmeinbsel_cum_sum+cur_dpmeinbsel_cum_sum)<=0)	then -1
	when (prev_dpmecover_cum_sum<=0 or prev_dpmeinbsel_cum_sum<=0) and ((prev_dpmecover_cum_sum+cur_dpmecover_cum_sum)>0 and (prev_dpmeinbsel_cum_sum+cur_dpmeinbsel_cum_sum)>0)	then 1
	else 0
end) ,
dpmbselmeasured_cum=
(case
	when prev_dpmeinbsel_cum_sum>0 and (prev_dpmeinbsel_cum_sum+cur_dpmeinbsel_cum_sum)<=0	then -1
	when prev_dpmeinbsel_cum_sum<=0 and (prev_dpmeinbsel_cum_sum+cur_dpmeinbsel_cum_sum)>0	then 1
	else 0
end) 
where dpmhdate>=@START_DPMHDATE


exec proc_insert_LOG 'end'




DELETE FROM OLAP_AUDIT WHERE KEYTYPE='DPMHDSERN'





GO
setuser
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

setuser N'spp'
GO




CREATE  PROCEDURE spp.proc_fill_OLAP_DPM_BACKUP
AS


SET NOCOUNT ON

SET DATEFORMAT dmy

DECLARE @DPMHDATE varchar(8)
DECLARE @DPMHDSERN varchar(15)
DECLARE @SALMSERN varchar(15)
DECLARE @COMSERNO varchar(15)
DECLARE @PRODSERN varchar(15)
DECLARE @DATESTAMP datetime

DECLARE @ID numeric
DECLARE @PREV_DPMHDATE varchar(8)
DECLARE @PREV_COMSERNO varchar(15)
DECLARE @PREV_PRODSERN varchar(15)

DECLARE @prev_time datetime
DECLARE @START_DPMHDATE varchar(8)
DECLARE @AUDIT_START_DPMHDATE varchar(8)
DECLARE @DPM_START_DPMHDATE varchar(8)


DECLARE @temp_date_real datetime
DECLARE @temp_year char(4)
DECLARE @temp_month char(2)
DECLARE @temp_day char(2)


if object_id('tempdb..#cumulative_set') is not null
	drop table #cumulative_set


if object_id('tempdb..#current_set') is not null
	drop table #current_set


SET @prev_time=GETDATE()




--------------------   DATE TO INSERT CUMULATIVE SUMS FROM  -----------------------------


SELECT @DPM_START_DPMHDATE=MIN(DPMHDATE) FROM 
TDPMHDR INNER JOIN TDPMENTR ON TDPMHDR.DPMHDSERN=TDPMENTR.DPMHDSERN
WHERE 
ISDATE(DPMHDATE)=1 AND DPMHDATE IS NOT NULL
AND EXISTS(SELECT * FROM OLAP_STORE WHERE TDPMHDR.COMSERNO=OLAP_STORE.COMSERNO)
AND EXISTS(SELECT * FROM OLAP_PRODUCT WHERE TDPMENTR.PRODSERN=OLAP_PRODUCT.PRODSERN)
AND NOT EXISTS(SELECT * FROM OLAP_DPM WHERE TDPMHDR.DPMHDATE=OLAP_DPM.DPMHDATE)

SELECT @AUDIT_START_DPMHDATE=MIN(DPMHDATE) FROM TDPMHDR WHERE DPMHDSERN IN ( SELECT KEYSERN1 FROM OLAP_AUDIT WHERE KEYTYPE='DPMHDSERN' )
AND ISDATE(DPMHDATE)=1  AND DPMHDATE IS NOT NULL

IF @DPM_START_DPMHDATE IS NULL AND @AUDIT_START_DPMHDATE IS NULL
	RETURN
ELSE
IF @DPM_START_DPMHDATE IS NOT NULL AND @AUDIT_START_DPMHDATE IS NOT NULL
	IF @DPM_START_DPMHDATE<@AUDIT_START_DPMHDATE
		SET @START_DPMHDATE=@DPM_START_DPMHDATE
	ELSE
		SET @START_DPMHDATE=@AUDIT_START_DPMHDATE
ELSE
IF @DPM_START_DPMHDATE IS NOT NULL
	SET @START_DPMHDATE=@DPM_START_DPMHDATE
ELSE
IF @AUDIT_START_DPMHDATE IS NOT NULL
	SET @START_DPMHDATE=@AUDIT_START_DPMHDATE



--------------------------- just in case - day before--------------------------
SET @START_DPMHDATE=convert(varchar(8) , DATEADD(d , -1 , CONVERT(datetime , @START_DPMHDATE) )  , 112)
------------------------------------------------------------------------------------------


print 'date to start: ' + @START_DPMHDATE


------------------------------------------------------------------------------------------

DELETE FROM OLAP_DPM WHERE DPMHDATE>=@START_DPMHDATE

print CAST(@@ROWCOUNT as varchar(15)) + ' corrupted values deleted'

------------------------------------------------------------------------------------------







CREATE TABLE #cumulative_set (
			ID numeric IDENTITY(1,1) PRIMARY KEY , 
			SALMSERN varchar(15)  , 
			PRODSERN varchar(15)  , 
			COMSERNO varchar(15)  , 
			DPMEFACING float ,
			DPMECHAN float , 
			DPMECOVER smallint  , 
			DPMESALESP float ,
			DPMEAVESTP float 
			)

CREATE UNIQUE NONCLUSTERED INDEX cumulative_index 
    ON #cumulative_set ( COMSERNO , PRODSERN ) 



CREATE TABLE #current_set(
			ID numeric IDENTITY(1,1) PRIMARY KEY , 
			DPMHDSERN varchar(15)  , 
			SALMSERN varchar(15)  , 
			DPMHDATE varchar(8)  , 
			PRODSERN varchar(15)  , 
			COMSERNO varchar(15)  , 
			DATESTAMP datetime,
			DPMEFACING float ,
			DPMECHAN float , 
			DPMECOVER smallint  , 
			DPMESALESP float ,
			DPMEAVESTP float ,
			DPMEPRICE_NET float ,
			DPMEPRICE_GROSS float
			)

--DECLARE @dpmhdsern_set TABLE(
--			DPMHDSERN varchar(15)  ,
--			PRODSERN varchar(15)  	
--			)












-----------  FILLING CUMULATIVE SET ---------------------

INSERT INTO #cumulative_set(
			PRODSERN , 
			COMSERNO , 
			DPMEFACING , 
			DPMECHAN , 
			DPMECOVER , 
			DPMESALESP , 
			DPMEAVESTP
			 )
	SELECT 	PRODSERN , 
			COMSERNO , 
			SUM(DPMEFACING_CUM) , 
			SUM(DPMECHAN_CUM), 
			SUM(DPMECOVER_CUM), 
			SUM(DPMESALESP_CUM), 
			SUM(DPMEAVESTP_CUM)
	FROM OLAP_DPM
		WHERE DPMHDATE<@START_DPMHDATE
	GROUP BY PRODSERN , COMSERNO

----------------------------------------------------------------------------







DECLARE date_cursor CURSOR FOR 
SELECT DISTINCT DPMHDATE FROM TDPMHDR
WHERE  DPMHDATE IN (SELECT DATE FROM OLAP_DATE) AND DPMHDATE>=@START_DPMHDATE
ORDER BY DPMHDATE 

OPEN date_cursor

FETCH NEXT FROM date_cursor INTO @DPMHDATE

WHILE @@FETCH_STATUS=0
	BEGIN
		print '+++++++++++++' + @DPMHDATE 




		
		SET @prev_time=GETDATE()

		INSERT INTO #current_set (DPMHDSERN , DPMHDATE , SALMSERN , PRODSERN , COMSERNO , DATESTAMP , 
						DPMEFACING , 
						DPMECHAN , 
						DPMECOVER , 
						DPMESALESP , 
						DPMEAVESTP ,
						DPMEPRICE_NET ,
						DPMEPRICE_GROSS
						 )
			SELECT TDPMHDR.DPMHDSERN , TDPMHDR.DPMHDATE , TDPMHDR.SALMSERN , TDPMENTR.PRODSERN , TDPMHDR.COMSERNO , TDPMHDR.DATESTAMP , 
						ISNULL(TDPMENTR.DPMEFACING,0), 
						ISNULL(TDPMENTR.DPMECHAN,0), 
						CASE ISNULL(TDPMENTR.DPMECOVER,0)
								WHEN 0 THEN 0
								ELSE 1
						END AS DPMECOVER, 
						ISNULL(TDPMENTR.DPMESALESP,0) , 
						ISNULL(TDPMENTR.DPMEAVESTP,0) ,
						CASE
							WHEN TDPMENTR.DPMEPRFLAG!='1' AND TDPMENTR.DPMEPRTAX!='1'  THEN DPMEPRICE						--per cons pkg without tax
							WHEN TDPMENTR.DPMEPRFLAG!='1' AND TDPMENTR.DPMEPRTAX='1'  THEN DPMEPRICE/(1+DPMETAX/100)			--per cons pkg with tax
							WHEN TDPMENTR.DPMEPRFLAG='1' AND TDPMENTR.DPMEPRTAX!='1'  THEN DPMEPRICE/DPMECSIZE				--per case without tax
							WHEN TDPMENTR.DPMEPRFLAG='1' AND TDPMENTR.DPMEPRTAX='1'  THEN (DPMEPRICE/(1+DPMETAX/100))/DPMECSIZE	--per case with tax
						END AS DPMEPRICE_NET ,
						CASE
							WHEN TDPMENTR.DPMEPRFLAG!='1' AND TDPMENTR.DPMEPRTAX!='1' THEN DPMEPRICE*(1+DPMETAX/100)			--per cons pkg without tax
							WHEN TDPMENTR.DPMEPRFLAG!='1' AND TDPMENTR.DPMEPRTAX='1' THEN DPMEPRICE						--per cons pkg with tax
							WHEN TDPMENTR.DPMEPRFLAG='1' AND TDPMENTR.DPMEPRTAX!='1' THEN (DPMEPRICE*(1+DPMETAX/100))/DPMECSIZE	--per case without tax
							WHEN TDPMENTR.DPMEPRFLAG='1' AND TDPMENTR.DPMEPRTAX='1' THEN DPMEPRICE/DPMECSIZE				--per case with tax
						END AS DPMEPRICE_GROSS
			FROM TDPMHDR INNER JOIN TDPMENTR ON TDPMHDR.DPMHDSERN=TDPMENTR.DPMHDSERN 
			WHERE TDPMHDR.DPMHDATE=@DPMHDATE 

		print '- getting current set took ' + CAST(DATEDIFF(ss, @prev_time , getdate() ) as varchar(25)) + ' sec.'

		SET @prev_time=GETDATE()

		----------------- CLEANUP CURRENT SET ----------------

		DECLARE  temp_cursor CURSOR FOR
		SELECT ID , DPMHDSERN , DPMHDATE , PRODSERN , COMSERNO  FROM #current_set ORDER BY PRODSERN , COMSERNO , DPMHDATE DESC , DATESTAMP DESC

		OPEN temp_cursor

		FETCH NEXT FROM temp_cursor INTO @ID ,@DPMHDSERN , @DPMHDATE ,  @PRODSERN , @COMSERNO 


		SET @PREV_PRODSERN=NULL
		SET @PREV_COMSERNO=NULL
		SET @PREV_DPMHDATE=NULL
		
		WHILE @@FETCH_STATUS=0
			BEGIN	
				IF @PREV_PRODSERN=@PRODSERN AND @PREV_COMSERNO=@COMSERNO AND @PREV_DPMHDATE=@DPMHDATE
					BEGIN
						--INSERT INTO @dpmhdsern_set(DPMHDSERN , PRODSERN) VALUES(@DPMHDSERN , @PRODSERN)
						DELETE FROM #current_set WHERE ID=@ID
					END
				ELSE
					BEGIN
						SET @PREV_PRODSERN=@PRODSERN
						SET @PREV_COMSERNO=@COMSERNO
						SET @PREV_DPMHDATE=@DPMHDATE
					END

				FETCH NEXT FROM temp_cursor INTO @ID ,@DPMHDSERN , @DPMHDATE ,  @PRODSERN , @COMSERNO 
			END
 
		CLOSE temp_cursor
		DEALLOCATE temp_cursor

		------------------------------------------------------

		print '- cleaning current set took ' + CAST(DATEDIFF(ss, @prev_time , getdate() ) as varchar(25)) + ' sec.'





		------------------------------------------------------------------------------

/*

		SET @prev_time=GETDATE()

		INSERT INTO OLAP_DPM (
				DPMHDSERN ,
				DPMHDATE ,
				SALMSERN ,	
				COMSERNO ,		
				PRODSERN ,	
				DPMEFACING_CUM , 				
				DPMECHAN_CUM , 
				DPMECOVER_CUM , 
				DPMESALESP_CUM , 
				DPMEAVESTP_CUM ,
				DPMEPRICE_NET ,
				DPMEPRICE_GROSS,
				DPMMEASURED ,
				DPMESALESP  )
			SELECT
				CURRENT_SET.DPMHDSERN ,
				@DPMHDATE AS DPMHDATE ,
				CURRENT_SET.SALMSERN ,	
				CURRENT_SET.COMSERNO ,		
				CURRENT_SET.PRODSERN ,	
				ISNULL(CURRENT_SET.DPMEFACING,0),
				ISNULL(CURRENT_SET.DPMECHAN,0),
				ISNULL(CURRENT_SET.DPMECOVER,0),
				ISNULL(CURRENT_SET.DPMESALESP,0),
				ISNULL(CURRENT_SET.DPMEAVESTP,0) ,
				ISNULL(CURRENT_SET.DPMEPRICE_NET,0),
				ISNULL(CURRENT_SET.DPMEPRICE_GROSS,0) ,
				1 AS DPMMEASURED,
				ISNULL(CURRENT_SET.DPMESALESP,0)
			FROM #current_set CURRENT_SET
			WHERE NOT EXISTS(SELECT * FROM #cumulative_set CUMULATIVE_SET WHERE CURRENT_SET.COMSERNO=CUMULATIVE_SET.COMSERNO AND
				CURRENT_SET.PRODSERN=CUMULATIVE_SET.PRODSERN)
		
		
		print '- updated-' + CAST(@@ROWCOUNT AS VARCHAR(15))
		print '- updating TDPMENTR table from self took ' + CAST(DATEDIFF(ss, @prev_time , getdate() ) as varchar(25)) + ' sec.'

*/


		SET @prev_time=GETDATE()

		INSERT INTO OLAP_DPM (
				DPMHDSERN ,
				DPMHDATE ,
				SALMSERN ,	
				COMSERNO ,		
				PRODSERN ,	
				PRODEXPAND ,
				DPMEFACING_CUM , 				
				DPMECHAN_CUM , 
				DPMECOVER_CUM , 
				DPMESALESP_CUM , 
				DPMEAVESTP_CUM ,
				DPMEPRICE_NET ,
				DPMEPRICE_GROSS,
				DPMMEASURED,
				DPMESALESP ,
				DPMCOUNT  )
			SELECT
				CURRENT_SET.DPMHDSERN ,
				@DPMHDATE AS DPMHDATE ,
				CASE LEN(LTRIM(CURRENT_SET.SALMSERN))
					WHEN 	0  THEN  '0'
					ELSE CURRENT_SET.SALMSERN
				END AS SALMSERN , 
				CURRENT_SET.COMSERNO ,		
				OLAP_LPROPROD.PRODSERN ,
				CASE PRODEXPAND_INTERSECT
					WHEN 0 THEN 0
					ELSE 1
				END AS PRODEXPAND ,
				( ISNULL(CURRENT_SET.DPMEFACING,0) )  , 
				( ISNULL(CURRENT_SET.DPMECHAN,0) ) ,
				( ISNULL(CURRENT_SET.DPMECOVER,0) ) , 
				( ISNULL(CURRENT_SET.DPMESALESP,0) ),
				( ISNULL(CURRENT_SET.DPMEAVESTP,0) ) ,
				( ISNULL(CURRENT_SET.DPMEPRICE_NET,0)  ),
				( ISNULL(CURRENT_SET.DPMEPRICE_GROSS,0) ),
				1 AS DPMMEASURED,
				( ISNULL(CURRENT_SET.DPMESALESP,0) ) ,
				1 DPMCOUNT
			FROM 
			#current_set CURRENT_SET
			INNER JOIN spp.OLAP_LPROPROD OLAP_LPROPROD ON CURRENT_SET.PRODSERN=OLAP_LPROPROD.PARENT_PRODSERN
			WHERE OLAP_LPROPROD.PRODEXPAND IN (0,1)
			AND NOT EXISTS(SELECT * FROM #cumulative_set CUMULATIVE_SET WHERE CURRENT_SET.COMSERNO=CUMULATIVE_SET.COMSERNO AND
							CURRENT_SET.PRODSERN=CUMULATIVE_SET.PRODSERN)


		print '- updated-' + CAST(@@ROWCOUNT AS VARCHAR(15))
		print '- inserting OLAP_DPM (NOT EXPANDED)  from self  took ' + CAST(DATEDIFF(ss, @prev_time , getdate() ) as varchar(25)) + ' sec.'



		SET @prev_time=GETDATE()

		INSERT INTO OLAP_DPM (
				DPMHDSERN ,
				DPMHDATE ,
				SALMSERN ,	
				COMSERNO ,		
				PRODSERN ,	
				PRODEXPAND ,
				DPMEFACING_CUM , 				
				DPMECHAN_CUM , 
				DPMECOVER_CUM , 
				DPMESALESP_CUM , 
				DPMEAVESTP_CUM ,
				DPMEPRICE_NET ,
				DPMEPRICE_GROSS,
				DPMMEASURED,
				DPMESALESP , 
				DPMCOUNT   )
			SELECT
				'expand' as DPMHDSERN ,
				@DPMHDATE AS DPMHDATE ,
				'0' AS SALMSERN , 
				CURRENT_SET.COMSERNO ,		
				OLAP_LPROPROD.PRODSERN ,
				2 AS PRODEXPAND ,
				( SUM(ISNULL(CURRENT_SET.DPMEFACING,0)) ) , 
				( SUM(ISNULL(CURRENT_SET.DPMECHAN,0)) ) ,
				( MAX(ISNULL(CURRENT_SET.DPMECOVER,0) ) ) , 
				( SUM(ISNULL(CURRENT_SET.DPMESALESP,0) ) ),
				( SUM(ISNULL(CURRENT_SET.DPMEAVESTP,0) ) ) ,
				( MAX(ISNULL(CURRENT_SET.DPMEPRICE_NET,0)  ) ),
				( MAX(ISNULL(CURRENT_SET.DPMEPRICE_GROSS,0) ) ),
				1 AS DPMMEASURED,
				( MAX(ISNULL(CURRENT_SET.DPMESALESP,0) ) ) ,
				1 AS DPMCOUNT 
			FROM 
			#current_set CURRENT_SET
			INNER JOIN spp.OLAP_LPROPROD OLAP_LPROPROD ON CURRENT_SET.PRODSERN=OLAP_LPROPROD.PARENT_PRODSERN
			WHERE OLAP_LPROPROD.PRODEXPAND_INTERSECT=2
			AND NOT EXISTS(SELECT * FROM #cumulative_set CUMULATIVE_SET 
							INNER JOIN OLAP_LPROPROD lproprod2 ON CUMULATIVE_SET.PRODSERN=lproprod2.PARENT_PRODSERN
							WHERE CURRENT_SET.COMSERNO=CUMULATIVE_SET.COMSERNO AND
							OLAP_LPROPROD.PRODSERN=lproprod2.PRODSERN)
			GROUP BY CURRENT_SET.COMSERNO , OLAP_LPROPROD.PRODSERN

		print '- updated-' + CAST(@@ROWCOUNT AS VARCHAR(15))
		print '- inserting OLAP_DPM (EXPANDED)  from self took ' + CAST(DATEDIFF(ss, @prev_time , getdate() ) as varchar(25)) + ' sec.'
		

		------------------------------------------------------------------------------






select olap_lproprod.parent_prodsern , olap_lproprod.prodsern , dpmecover  from #current_set inner join olap_lproprod on #current_set.prodsern=olap_lproprod.parent_prodsern where #current_set.comserno='IMP000000008847' and olap_lproprod.prodsern='IMP000000000576' 

select olap_lproprod.parent_prodsern , olap_lproprod.prodsern , dpmecover from #cumulative_set inner join olap_lproprod on #cumulative_set.prodsern=olap_lproprod.parent_prodsern where #cumulative_set.comserno='IMP000000008847' and olap_lproprod.prodsern='IMP000000000576' 






		------------------------------------------------------------------------------


		SET @prev_time=GETDATE()

		INSERT INTO OLAP_DPM (
				DPMHDSERN ,
				DPMHDATE ,
				SALMSERN ,	
				COMSERNO ,		
				PRODSERN ,	
				PRODEXPAND ,
				DPMEFACING_CUM , 				
				DPMECHAN_CUM , 
				DPMECOVER_CUM , 
				DPMESALESP_CUM , 
				DPMEAVESTP_CUM ,
				DPMEPRICE_NET ,
				DPMEPRICE_GROSS,
				DPMMEASURED,
				DPMESALESP ,
				DPMCOUNT   )
			SELECT
				CURRENT_SET.DPMHDSERN ,
				@DPMHDATE AS DPMHDATE ,
				CASE LEN(LTRIM(CURRENT_SET.SALMSERN))
					WHEN 	0  THEN  '0'
					ELSE CURRENT_SET.SALMSERN
				END AS SALMSERN , 
				CURRENT_SET.COMSERNO ,		
				OLAP_LPROPROD.PRODSERN ,
				CASE PRODEXPAND_INTERSECT
					WHEN 0 THEN 0
					ELSE 1
				END AS PRODEXPAND ,
				( ISNULL(CURRENT_SET.DPMEFACING,0)- CUMULATIVE_SET.DPMEFACING )  , 
				( ISNULL(CURRENT_SET.DPMECHAN,0)- CUMULATIVE_SET.DPMECHAN  ) ,
				( ISNULL(CURRENT_SET.DPMECOVER,0)- CUMULATIVE_SET.DPMECOVER  ) , 
				( ISNULL(CURRENT_SET.DPMESALESP,0)- CUMULATIVE_SET.DPMESALESP ),
				( ISNULL(CURRENT_SET.DPMEAVESTP,0)- CUMULATIVE_SET.DPMEAVESTP ) ,
				( ISNULL(CURRENT_SET.DPMEPRICE_NET,0)  ),
				( ISNULL(CURRENT_SET.DPMEPRICE_GROSS,0) ),
				0 AS DPMMEASURED,
				( ISNULL(CURRENT_SET.DPMESALESP,0) ) ,
				1 AS DPMCOUNT
			FROM 
			#current_set CURRENT_SET
			INNER JOIN #cumulative_set CUMULATIVE_SET
				ON CURRENT_SET.COMSERNO=CUMULATIVE_SET.COMSERNO AND CURRENT_SET.PRODSERN=CUMULATIVE_SET.PRODSERN
			INNER JOIN spp.OLAP_LPROPROD OLAP_LPROPROD ON CURRENT_SET.PRODSERN=OLAP_LPROPROD.PARENT_PRODSERN
			WHERE OLAP_LPROPROD.PRODEXPAND IN (0,1)


		print '- updated-' + CAST(@@ROWCOUNT AS VARCHAR(15))
		print '- inserting OLAP_DPM (NOT EXPANDED)  from cumulative took ' + CAST(DATEDIFF(ss, @prev_time , getdate() ) as varchar(25)) + ' sec.'



		SET @prev_time=GETDATE()

		INSERT INTO OLAP_DPM (
				DPMHDSERN ,
				DPMHDATE ,
				SALMSERN ,	
				COMSERNO ,		
				PRODSERN ,	
				PRODEXPAND ,
				DPMEFACING_CUM , 				
				DPMECHAN_CUM , 
				DPMECOVER_CUM , 
				DPMESALESP_CUM , 
				DPMEAVESTP_CUM ,
				DPMEPRICE_NET ,
				DPMEPRICE_GROSS,
				DPMMEASURED,
				DPMESALESP ,
				DPMCOUNT   )
			SELECT
				'expand' as DPMHDSERN ,
				@DPMHDATE AS DPMHDATE ,
				'0' AS SALMSERN , 
				CURRENT_SET.COMSERNO ,		
				CURRENT_SET.PRODSERN ,
				2 AS PRODEXPAND ,
				( CURRENT_SET.DPMEFACING-CUMULATIVE_SET.DPMEFACING ) , 
				( CURRENT_SET.DPMECHAN-CUMULATIVE_SET.DPMECHAN  ) ,
				( CASE 
					WHEN CURRENT_SET.MAX_DPMECOVER-CUMULATIVE_SET.MAX_DPMECOVER<0 AND  CURRENT_SET.SUM_DPMECOVER-CUMULATIVE_SET.MAX_DPMECOVER<0THEN -1
					WHEN CURRENT_SET.DPMECOVER-CUMULATIVE_SET.DPMECOVER>0 THEN 1
					ELSE 0
				END ) , 
				( CURRENT_SET.DPMESALESP -CUMULATIVE_SET.DPMESALESP ),
				( CURRENT_SET.DPMEAVESTP -CUMULATIVE_SET.DPMEAVESTP ) ,
				( CURRENT_SET.DPMEPRICE_NET   ),
				( CURRENT_SET.DPMEPRICE_GROSS  ),
				0 AS DPMMEASURED,
				( CURRENT_SET.MAX_DPMESALESP  ) ,
				1 AS DPMCOUNT
			FROM 
			(
			SELECT #current_set.COMSERNO , OLAP_LPROPROD.PRODSERN , 
			SUM(ISNULL(DPMEFACING,0))  AS DPMEFACING ,
			SUM(ISNULL(DPMECHAN,0) ) AS DPMECHAN ,
			MAX(ISNULL(DPMECOVER,0)) AS MAX_DPMECOVER ,
			SUM(ISNULL(DPMECOVER,0)) AS SUM_DPMECOVER ,
			SUM(ISNULL(DPMESALESP,0)) AS DPMESALESP ,
			SUM(ISNULL(DPMEAVESTP,0)) AS DPMEAVESTP ,
			MAX(ISNULL(DPMEPRICE_NET,0)) AS DPMEPRICE_NET ,
			MAX(ISNULL(DPMEPRICE_GROSS,0)) AS DPMEPRICE_GROSS ,
			MAX(ISNULL(DPMESALESP,0)) AS MAX_DPMESALESP
			 FROM 
			#current_set INNER JOIN spp.OLAP_LPROPROD OLAP_LPROPROD
			ON #current_set.PRODSERN=OLAP_LPROPROD.PARENT_PRODSERN
			WHERE OLAP_LPROPROD.PRODEXPAND_INTERSECT=2
			GROUP BY #current_set.COMSERNO , OLAP_LPROPROD.PARENT_PRODSERN ,  OLAP_LPROPROD.PRODSERN
			) CURRENT_SET 

			INNER JOIN

			(
			SELECT #cumulative_set.COMSERNO , OLAP_LPROPROD2.PRODSERN , 
			SUM(DPMEFACING)  AS DPMEFACING ,
			SUM(DPMECHAN ) AS DPMECHAN ,
			MAX(ISNULL(DPMECOVER,0)) AS MAX_DPMECOVER ,
			SUM(ISNULL(DPMECOVER,0)) AS SUM_DPMECOVER ,
			SUM(DPMESALESP) AS DPMESALESP ,
			SUM(DPMEAVESTP) AS DPMEAVESTP
			 FROM 
			#cumulative_set INNER JOIN spp.OLAP_LPROPROD OLAP_LPROPROD2
			ON #cumulative_set.PRODSERN=OLAP_LPROPROD2.PARENT_PRODSERN
			WHERE OLAP_LPROPROD2.PRODEXPAND_INTERSECT=2
			GROUP BY #cumulative_set.COMSERNO , OLAP_LPROPROD.PARENT_PRODSERN , OLAP_LPROPROD2.PRODSERN
			) CUMULATIVE_SET

			ON CURRENT_SET.COMSERNO=CUMULATIVE_SET.COMSERNO AND CURRENT_SET.PRODSERN=CUMULATIVE_SET.PRODSERN

			--HAVING
			--(
			--(MAX(CURRENT_SET.DPMECOVER)!=MAX(CUMULATIVE_SET.DPMECOVER ) )
			--)

		print '- updated-' + CAST(@@ROWCOUNT AS VARCHAR(15))
		print '- inserting OLAP_DPM (EXPANDED)  from cumulative took ' + CAST(DATEDIFF(ss, @prev_time , getdate() ) as varchar(25)) + ' sec.'
		

		------------------------------------------------------------------------------



		SET @prev_time=GETDATE()

		UPDATE #cumulative_set 
			SET 
				DPMEFACING=CURRENT_SET.DPMEFACING,
				DPMECHAN=CURRENT_SET.DPMECHAN,
				DPMECOVER=CURRENT_SET.DPMECOVER,
				DPMESALESP=CURRENT_SET.DPMESALESP,
				DPMEAVESTP=CURRENT_SET.DPMEAVESTP 
			FROM #cumulative_set CUMULATIVE_SET , #current_set CURRENT_SET
			WHERE 	CUMULATIVE_SET.PRODSERN=CURRENT_SET.PRODSERN AND
				CUMULATIVE_SET.COMSERNO=CURRENT_SET.COMSERNO

		print '- updating cumulative set took ' + CAST(DATEDIFF(ss, @prev_time , getdate() ) as varchar(25)) + ' sec.'


		SET @prev_time=GETDATE()

		INSERT INTO #cumulative_set(
					PRODSERN , 
					COMSERNO , 
					DPMEFACING , 
					DPMECHAN , 
					DPMECOVER , 
					DPMESALESP , 
					DPMEAVESTP )
			SELECT 	CURRENT_SET.PRODSERN , 
					CURRENT_SET.COMSERNO , 
					CURRENT_SET.DPMEFACING , 
					CURRENT_SET.DPMECHAN, 
					CURRENT_SET.DPMECOVER, 
					CURRENT_SET.DPMESALESP, 
					CURRENT_SET.DPMEAVESTP
			FROM #current_set CURRENT_SET
			WHERE NOT EXISTS(SELECT * FROM #cumulative_set CUMULATIVE_SET WHERE CUMULATIVE_SET.PRODSERN=CURRENT_SET.PRODSERN AND
												CUMULATIVE_SET.COMSERNO=CURRENT_SET.COMSERNO )


		print '- inserting cumulative set took ' + CAST(DATEDIFF(ss, @prev_time , getdate() ) as varchar(25)) + ' sec.'




		SET @prev_time=GETDATE()

		DELETE FROM #current_set

		print '- deleting current set took ' + CAST(DATEDIFF(ss, @prev_time , getdate() ) as varchar(25)) + ' sec.'

		


		FETCH NEXT FROM date_cursor INTO @DPMHDATE
	END



--print '---there is number of duplicate keys in grid---'
--SELECT COUNT(*) AS DUPLICATED_KEYS_COUNT FROM @dpmhdsern_set 

--UPDATE TDPMENTR SET 
--	DPMEFACING_CUM=0,
--	DPMECHAN_CUM=0,
--	DPMECOVER_CUM=0,
--	DPMESALESP_CUM=0
--	FROM TDPMENTR
--		WHERE EXISTS(SELECT * FROM @dpmhdsern_set DPMHDSERN_SET 
--				WHERE DPMHDSERN_SET.DPMHDSERN=TDPMENTR.DPMHDSERN AND 
--					DPMHDSERN_SET.PRODSERN=TDPMENTR.PRODSERN )

--DELETE FROM  @dpmhdsern_set


CLOSE date_cursor
DEALLOCATE date_cursor

--SELECT COUNT(*) AS CUMULATIVE_SET_COUNT FROM #cumulative_set

DROP TABLE #cumulative_set

DROP TABLE #current_set



EXEC proc_fill_OLAP_DPM_SEL  @START_DPMHDATE



DELETE FROM OLAP_AUDIT WHERE KEYTYPE='DPMHDSERN'




--select dpmhdate , count(prodsern) from tdpmentr inner join tdpmhdr on TDPMHDR.DPMHDSERN=TDPMENTR.DPMHDSERN group by dpmhdate order by dpmhdate

--UPDATE TDPMENTR SET DPMEFACING_CUM=NULL WHERE DPMEFACING_CUM IS NOT NULL

--SELECT COUNT(*) FROM TDPMENTR WHERE DPMEFACING_CUM=0



GO
setuser
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

setuser N'spp'
GO





CREATE procedure spp.proc_fill_OLAP_DPM_SEL 
@start_seldate varchar(8)
as
declare @seldate varchar(8)
declare @prev_seldate varchar(8)
declare @prev_prev_seldate varchar(8)
DECLARE @prev_time datetime
set nocount on 
create table #cumulative_set(comserno varchar(15), prodsern varchar(15) , prodexpand tinyint ,  indistr smallint , prev_indistr smallint , insel smallint , prev_insel smallint , inbsel smallint , prev_inbsel smallint , cur_set_sum_indistr smallint, cur_set_min_dpmhdate varchar(8))
create table #current_set(comserno varchar(15), prodsern varchar(15) , prodexpand tinyint  , min_dpmhdate varchar(8) , sum_indistr smallint)
SELECT @start_seldate=ISNULL(MAX(SELDATE) , '00000000')  FROM olap_seldate t2 WHERE SELDATE<=@start_seldate
exec proc_insert_LOG 'date to start from - ' , @start_seldate
delete from olap_dpm where dpmhdsern='sel_placeholder' and dpmhdate>=@start_seldate
exec proc_insert_LOG 'deleted - ' , @@rowcount
update olap_dpm set dpmeselcover_cum=0 ,  dpmebselcover_cum=0  where dpmhdate>=@start_seldate and (dpmeselcover_cum!=0 or  dpmebselcover_cum!=0)
exec proc_insert_LOG 'updated sel and bsel to 0 - ' , @@rowcount
--------------------- filling cumulative set -----------------------
IF @start_seldate!='00000000'
	BEGIN

		exec proc_insert_LOG '- getting initial set'
		insert into #cumulative_set(comserno , prodsern , prodexpand, indistr , prev_indistr,  insel , prev_insel,  inbsel , prev_inbsel)
			select comserno , prodsern , prodexpand,  sum(dpmecover_cum) as  indistr, 0 as prev_indistr , 0  as insel , 0 as prev_insel  , 0  as inbsel , 0 as prev_inbsel from olap_dpm
			where dpmhdate<@start_seldate
			group by comserno , prodsern , prodexpand
		exec proc_insert_LOG 'end '

		exec proc_insert_LOG '- getting initial set  SEL '
		UPDATE #cumulative_set
			SET INSEL=1
			FROM #cumulative_set WHERE EXISTS(SELECT * FROM OLAP_TSELENTR , OLAP_LCOMSEL WHERE 
			OLAP_LCOMSEL.COMSERNO=#cumulative_set.COMSERNO AND OLAP_TSELENTR.PRODSERN=#cumulative_set.PRODSERN AND
			OLAP_TSELENTR.SELSERN=OLAP_LCOMSEL.SELSERN AND SELESTART<=convert(varchar(8) , DATEADD(d , -1 , CONVERT(datetime , @start_seldate ) )  , 112)  AND SELEEND>=@start_seldate )
		exec proc_insert_LOG 'end '

		exec proc_insert_LOG '- getting initial set  BSEL '
		UPDATE #cumulative_set
			SET INBSEL=ISNULL(
			(SELECT TOP 1 CASE OLAP_BASE_SELECTION.INSEL  WHEN 1 THEN 1 ELSE 0 END AS INSELSUM
			FROM OLAP_BASE_SELECTION
			WHERE OLAP_BASE_SELECTION.COMSERNO=#cumulative_set.COMSERNO AND OLAP_BASE_SELECTION.PRODSERN= #cumulative_set.PRODSERN AND OLAP_BASE_SELECTION.SELDATE<@start_seldate
			ORDER BY OLAP_BASE_SELECTION.COMSERNO , OLAP_BASE_SELECTION.PRODSERN, OLAP_BASE_SELECTION.SELDATE DESC
			)
			, 0 ) --ISNULL end
			FROM  #cumulative_set 
		exec proc_insert_LOG 'end '
	END

--------------------------------------------------------------------------
declare temp_cursor cursor for
select * from 
(
select seldate from olap_seldate 
union
select '00000000' as seldate
union
select '99999999' as seldate
)tbl
where seldate>=@start_seldate
order by seldate
open temp_cursor
fetch next from temp_cursor into @seldate
set @prev_seldate=@seldate
--set @prev_prev_seldate='00000000'
fetch next from temp_cursor into @seldate
while @@fetch_status=0
	begin
		exec proc_insert_LOG @prev_seldate , '-' , @seldate


		exec proc_insert_LOG '- getting current_set  set'
		delete from #current_set
		insert into #current_set(comserno , prodsern , prodexpand , min_dpmhdate , sum_indistr)
		select comserno , prodsern , prodexpand , min(dpmhdate) as min_dpmhdate , sum(ISNULL(dpmecover_cum,0)) as sum_indistr from olap_dpm
			where dpmhdate>=@prev_seldate and dpmhdate<@seldate
			group by comserno , prodsern , prodexpand
		exec proc_insert_LOG '- end - affected-' , @@rowcount
		


		exec proc_insert_LOG '- updating cumulative_set from current_set '


		update #cumulative_set
			set prev_indistr=indistr , prev_insel=insel , prev_inbsel=inbsel , insel=0 , inbsel=0 , 
			cur_set_sum_indistr=0 , cur_set_min_dpmhdate=''

		update #cumulative_set
			set 
			#cumulative_set.indistr=#cumulative_set.indistr+#current_set.sum_indistr ,
			#cumulative_set.cur_set_sum_indistr=#current_set.sum_indistr ,
			#cumulative_set.cur_set_min_dpmhdate='' --#current_set.min_dpmhdate
			from #cumulative_set ,  #current_set
			where #cumulative_set.comserno=#current_set.comserno and #cumulative_set.prodsern=#current_set.prodsern  and #cumulative_set.prodexpand=#current_set.prodexpand 

		exec proc_insert_LOG '-end - affected-' , @@rowcount


		exec proc_insert_LOG '- inserting new records into cumulative_set '
		insert into #cumulative_set(comserno , prodsern , prodexpand , indistr , prev_indistr,  insel , prev_insel,  inbsel , prev_inbsel , cur_set_sum_indistr , cur_set_min_dpmhdate )
			select comserno , prodsern , prodexpand , SUM_INDISTR as indistr, 0 as prev_indistr , 0  as insel , 0 as prev_insel , 0  as inbsel , 0 as prev_inbsel , sum_indistr as  cur_set_sum_indistr , min_dpmhdate as cur_set_min_dpmhdate  from #current_set
			where  not exists(select * from #cumulative_set t1 where t1.comserno=#current_set.comserno and t1.prodsern=#current_set.prodsern and t1.prodexpand=#current_set.prodexpand)
		exec proc_insert_LOG '- end - affected-' , @@rowcount



		exec proc_insert_LOG '- getting olap_dpm SEL '
		UPDATE #cumulative_set
			SET INSEL=1
			FROM #cumulative_set WHERE EXISTS(SELECT * FROM OLAP_TSELENTR , OLAP_LCOMSEL WHERE 
			OLAP_LCOMSEL.COMSERNO=#cumulative_set.COMSERNO AND OLAP_TSELENTR.PRODSERN=#cumulative_set.PRODSERN AND
			OLAP_TSELENTR.SELSERN=OLAP_LCOMSEL.SELSERN AND SELESTART<=@prev_seldate AND SELEEND>@prev_seldate )
		exec proc_insert_LOG '- end - affected-' , @@rowcount


		exec proc_insert_LOG '- getting olap_dpm BSEL '
		UPDATE #cumulative_set
			SET INBSEL=ISNULL(
			(SELECT TOP 1 CASE OLAP_BASE_SELECTION.INSEL  WHEN 1 THEN 1 ELSE 0 END AS INSELSUM
			FROM OLAP_BASE_SELECTION
			WHERE OLAP_BASE_SELECTION.COMSERNO=#cumulative_set.COMSERNO AND OLAP_BASE_SELECTION.PRODSERN= #cumulative_set.PRODSERN AND OLAP_BASE_SELECTION.SELDATE<=@prev_seldate
			ORDER BY OLAP_BASE_SELECTION.COMSERNO , OLAP_BASE_SELECTION.PRODSERN, OLAP_BASE_SELECTION.SELDATE DESC
			)
			, 0 ) --ISNULL end
			FROM  #cumulative_set 
		exec proc_insert_LOG '- end - affected-' , @@rowcount




		exec proc_insert_LOG '- updating olap_dpm'
		update olap_dpm
			set olap_dpm.dpmeselcover_cum=
			(case
				when olap_dpm.dpmecover_cum=1 and #cumulative_set.insel=1 then 1
				when olap_dpm.dpmecover_cum=-1 and #cumulative_set.insel=1 then -1
				else 0
			end) , 
			olap_dpm.dpmebselcover_cum=(case
				when olap_dpm.dpmecover_cum=1 and #cumulative_set.inbsel=1 then 1
				when olap_dpm.dpmecover_cum=-1 and #cumulative_set.inbsel=1 then -1
				else 0
			end) ,
			olap_dpm.dpmbselmeasured=(case
				when olap_dpm.dpmhdate=#cumulative_set.cur_set_min_dpmhdate 
					/* and  NOT(prev_indistr=1 and ( prev_insel!=insel  or  prev_inbsel!=inbsel  )) 
						and NOT(prev_indistr=0 and indistr=0) */
					/*and prev_indistr=0*/ then  inbsel /*-prev_inbsel*/ --because they are new in this set
				else 0
			end)
			from #cumulative_set ,  olap_dpm
			where #cumulative_set.comserno=olap_dpm.comserno and #cumulative_set.prodsern=olap_dpm.prodsern  and #cumulative_set.prodexpand=olap_dpm.prodexpand
			and dpmhdate>=@prev_seldate and dpmhdate<@seldate
		exec proc_insert_LOG '- end - affected-' , @@rowcount

	
/*
		SET @prev_time=GETDATE()
		update olap_dpm set dpmbselmeasured=inbsel-prev_inbsel
			from #cumulative_set , olap_dpm
			where #cumulative_set.comserno=olap_dpm.comserno and #cumulative_set.prodsern=olap_dpm.prodsern  and #cumulative_set.prodexpand=olap_dpm.prodexpand 
			and #cumulative_set.cur_set_min_dpmhdate=olap_dpm.dpmhdate
			and prev_inbsel!=inbsel  --!!!!!!!!
		exec proc_insert_LOG '- affected-' + @@rowcount
		exec proc_insert_LOG '- inserting sel_placeholder(DMPEBSELMEASURED) took ' + CAST(DATEDIFF(ss, @prev_time , getdate() ) as varchar(25)) + ' sec.'
*/
		exec proc_insert_LOG '- inserting sel_placeholder(DPMESELCOVER)'

		insert into olap_dpm(dpmhdsern , comserno , prodsern , prodexpand , dpmhdate , dpmmeasured , dpmecover_cum , dpmeselcover_cum ,  dpmebselcover_cum , dpmcount , dpmbselmeasured )
			select 'sel_placeholder'as dpmhdsern , #cumulative_set.comserno , #cumulative_set.prodsern , #cumulative_set.prodexpand , @prev_seldate as dpmhdate , 0  as dpmmeasured, 0 as indistr ,  
			case 
				when prev_indistr=1 then insel-prev_insel 
				else 0
			end as dpmeselcover_cum ,  
			case 
				when prev_indistr=1 then inbsel-prev_inbsel 
				else 0
			end as dpmebselcover_cum ,  
			0  as dpmcount ,  
			case 
				when cur_set_min_dpmhdate='' then inbsel-prev_inbsel 
				else 0
			end as dpmbselmeasured
			from #cumulative_set
			where 
			 ( prev_insel!=insel  or  prev_inbsel!=inbsel  )

		exec proc_insert_LOG '- end - affected-' , @@rowcount

		--check--
		--select * from #cumulative_set  where comserno='IMP000000013352' and prodsern='IMP000000014435'
		--check--
		--select * from #current_set where comserno='IMP000000013352' and prodsern='IMP000000014435'
		--check--
		--select * from olap_dpm where comserno='IMP000000013352' and prodsern='IMP000000014435'   and dpmhdate>=@prev_seldate and dpmhdate<@seldate

		--set @prev_prev_seldate=@prev_seldate
		set @prev_seldate=@seldate
		fetch next from temp_cursor into @seldate
	end
close temp_cursor
deallocate temp_cursor
drop table #cumulative_set
drop table #current_set




GO
setuser
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

setuser N'spp'
GO








CREATE PROCEDURE [spp].[proc_fill_OLAP_FIXTURE] AS


SET NOCOUNT ON 

/***********************************/
if exists (select * from dbo.sysobjects where id = object_id(N'[spp].[OLAP_FIXTURE]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
drop table [spp].[OLAP_FIXTURE]
/***********************************/


/***********************************/
CREATE TABLE [spp].[OLAP_FIXTURE] (
	[FXTRSERN] [varchar] (15)   NOT NULL PRIMARY KEY ,
	[FXTRNAME] [varchar] (30) NOT NULL DEFAULT 'Undefined',
	[PARENT_FXTRNAME] [varchar] (30) NOT NULL DEFAULT 'Undefined'
) ON [PRIMARY]
/***********************************/

INSERT INTO OLAP_FIXTURE(FXTRSERN , FXTRNAME , PARENT_FXTRNAME)
	select  tfixture.fxtrsern, tfixture.fxtrname ,  IsNull(parent_fixture.fxtrname, 'Undefined')  as parent_fxtrname  from lfxtfxt
	inner join tfixture parent_fixture
	on lfxtfxt.fxtrsern1=parent_fixture.fxtrsern
	right outer join (select  tfixture.* from tfixture where fxtrsern in (select distinct fxtrsern from tplnentr)) tfixture
	on lfxtfxt.fxtrsern2=tfixture.fxtrsern

IF NOT EXISTS(SELECT * FROM OLAP_FIXTURE)
	INSERT INTO OLAP_FIXTURE(FXTRSERN , FXTRNAME , PARENT_FXTRNAME)
		VALUES('NODATA' , 'No Data', 'No Data')

SET NOCOUNT OFF






GO
setuser
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

setuser N'spp'
GO



CREATE PROCEDURE [spp].[proc_fill_OLAP_LCOMPGR] 
AS

SET NOCOUNT ON



----------------------------------------- OLAP_LCOMPGR and OLAP_LPROPGR TABLES----------------------------------------------





/***********************************/
if exists (select * from dbo.sysobjects where id = object_id(N'[spp].[OLAP_LPROPGR]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
drop table [spp].[OLAP_LPROPGR]
/***********************************/


/***********************************/
CREATE TABLE [spp].[OLAP_LPROPGR] (
	[PRODSERN] [varchar] (15)   NOT NULL  ,
	[PGRSERN] [varchar] (15)  NOT NULL ,
) ON [PRIMARY]
/***********************************/


/***********************************/
CREATE CLUSTERED INDEX IX_OLAP_LPROPGR ON spp.OLAP_LPROPGR(PRODSERN , PGRSERN)
/***********************************/










/***********************************/
if exists (select * from dbo.sysobjects where id = object_id(N'[spp].[OLAP_LCOMPGR]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
drop table [spp].[OLAP_LCOMPGR]
/***********************************/


/***********************************/
CREATE TABLE [spp].[OLAP_LCOMPGR] (
	[COMSERNO] [varchar] (15)   NOT NULL ,
	[PGRSERN] [varchar] (15)  NOT NULL ,
	[SALMSERN] [varchar] (15)  NOT NULL ,
	[DUMMY_LINK_HIERARCHY] [int] NOT NULL DEFAULT 0
) ON [PRIMARY]
/***********************************/

/***********************************/
CREATE CLUSTERED INDEX IX_OLAP_LCOMPGR
ON spp.OLAP_LCOMPGR(COMSERNO , PGRSERN)
/***********************************/







INSERT INTO OLAP_LPROPGR(PRODSERN , PGRSERN)
	SELECT PRODSERN , PGRSERN FROM
	LPROPGR 
	WHERE 
	EXISTS(SELECT TOP 1 1 FROM TPGROUPS WHERE TPGROUPS.PGRSERN=LPROPGR.PGRSERN)
	AND EXISTS(SELECT TOP 1 1 FROM TSALMAN WHERE TSALMAN.PGRSERN=LPROPGR.PGRSERN)
	AND EXISTS(SELECT TOP 1 1 FROM OLAP_PRODUCT WHERE OLAP_PRODUCT.PRODSERN=LPROPGR.PRODSERN)

INSERT INTO  OLAP_LPROPGR(PRODSERN , PGRSERN)
	SELECT PRODSERN , 'ALL' AS PGRSERN FROM OLAP_PRODUCT









INSERT INTO OLAP_LCOMPGR(COMSERNO , PGRSERN , SALMSERN)
	SELECT 
	COMSERNO , 
	CASE 
		WHEN EXISTS(SELECT * FROM TPGROUPS WHERE TPGROUPS.PGRSERN=TSALMAN.PGRSERN)	THEN TSALMAN.PGRSERN
		ELSE 'ALL'
	END AS PGRSERN , 
	TSALMAN.SALMSERN
	FROM LSALCOM 
	INNER JOIN TSALMAN ON LSALCOM.SALMSERN=TSALMAN.SALMSERN
	WHERE 
	EXISTS(SELECT  TOP 1 1  FROM OLAP_STORE WHERE OLAP_STORE.COMSERNO=LSALCOM.COMSERNO)
	AND EXISTS(SELECT  TOP 1 1  FROM OLAP_SALESFORCE WHERE OLAP_SALESFORCE.SALMSERN=TSALMAN.SALMSERN)


GO
setuser
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

setuser N'spp'
GO








CREATE   procedure spp.proc_fill_OLAP_LPROPROD
as
set nocount on
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--							COMPOUND PRODUCT LINK TABLE
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
/***********************************/
if exists (select * from dbo.sysobjects where id = object_id(N'[spp].[OLAP_LPROPROD]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
drop table [spp].[OLAP_LPROPROD]
/***********************************/
/***********************************/
CREATE TABLE [spp].[OLAP_LPROPROD] (
	[PARENT_PRODSERN] [varchar] (15)   NOT NULL ,
	[PRODSERN] [varchar] (15)  NOT NULL ,
	[PRODCPG_MULT] [float] NOT NULL,
	[PRODCASE_MULT] [float] NOT NULL,
	[CHILDCASE_MULT] [float] NOT NULL,
	[PRODPALLET_MULT] [float] NOT NULL,
	[PRODUNIT_MULT] [float] NOT NULL,
	[PRODMONEY_MULT] [float] NOT NULL ,
	[PRODSIZE] [float]   NOT  NULL  DEFAULT 1 ,
	[PRODCPS] [float]  NOT  NULL DEFAULT 1  ,
	[PRODTAX] [float]  NOT  NULL DEFAULT 0  ,
	[PRODPALLET] [float]  NOT  NULL DEFAULT 1,
	[PRODPRICE] [float]  NOT  NULL DEFAULT 0,
	[PRODCPWNET] [float]  NOT  NULL DEFAULT 0,
	[PRODCPWGR] [float]  NOT  NULL DEFAULT 0,
	[PRODCASEWGR] [float]  NOT  NULL DEFAULT 0,
	[PRODEXPAND] tinyint NOT NULL,
	[PRODEXPAND_INTERSECT] tinyint NOT NULL DEFAULT 0
) ON [PRIMARY]
/***********************************/
/***********************************/
CREATE CLUSTERED INDEX IX_OLAP_LPROPROD
ON spp.OLAP_LPROPROD(PARENT_PRODSERN , PRODSERN , PRODEXPAND , PRODEXPAND_INTERSECT)
/***********************************/
DECLARE @STACK_PARENT_PRODSERN varchar(15)
DECLARE @STACK_PRODSERN varchar(15)
DECLARE @STACK_PRODPKGS int
DECLARE @STACK_COUNTER int
DECLARE @STACK_MULTIPLIER int
CREATE TABLE #stack(PARENT_PRODSERN varchar(15)  , PRODSERN varchar(15) ,  PRODPKGS int)
INSERT INTO #stack
	SELECT PRODSERN1 , PRODSERN2 , PRODPKGS
	FROM LPROPROD WHERE EXISTS(SELECT * FROM TPRODUCT WHERE TPRODUCT.PRODSERN=PRODSERN1 AND TPRODUCT.PRODCOMP='1')
				AND  EXISTS(SELECT * FROM TPRODUCT WHERE TPRODUCT.PRODSERN=PRODSERN2)
				AND PRODPKGS>0 AND PRODSERN1<>PRODSERN2
------------------------------------------------------------------------ EXPANDING COMPOUND PRODUCTS -----------------------------------------------------------
SET @STACK_PRODSERN=NULL
SELECT TOP 1 @STACK_PARENT_PRODSERN=stack.PARENT_PRODSERN , @STACK_PRODSERN=stack.PRODSERN , @STACK_PRODPKGS=stack.PRODPKGS FROM #stack stack  WHERE
			EXISTS(SELECT * FROM #stack stack2 WHERE stack.PRODSERN=stack2.PARENT_PRODSERN) 
WHILE @STACK_PRODSERN IS NOT NULL
	BEGIN
		DELETE FROM #stack WHERE PARENT_PRODSERN=@STACK_PARENT_PRODSERN AND PRODSERN=@STACK_PRODSERN
		SET @STACK_COUNTER=0
		WHILE @STACK_COUNTER<@STACK_PRODPKGS
			BEGIN
				INSERT INTO #stack (PARENT_PRODSERN , PRODSERN , PRODPKGS)
					SELECT @STACK_PARENT_PRODSERN AS PARENT_PRODSERN , PRODSERN , PRODPKGS FROM #stack stack2 
					WHERE PARENT_PRODSERN=@STACK_PRODSERN
				SET @STACK_COUNTER=@STACK_COUNTER+1
			END
		SET @STACK_PRODSERN=NULL
		SELECT TOP 1 @STACK_PARENT_PRODSERN=stack.PARENT_PRODSERN , @STACK_PRODSERN=stack.PRODSERN , @STACK_PRODPKGS=stack.PRODPKGS FROM #stack stack  WHERE
					EXISTS(SELECT * FROM #stack stack2 WHERE stack.PRODSERN=stack2.PARENT_PRODSERN) 
	END
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
/*
INSERT INTO OLAP_LPROPROD(PARENT_PRODSERN , PRODSERN ,  PRODCPG_MULT , PRODCASE_MULT, PRODPALLET_MULT, PRODUNIT_MULT , PRODMONEY_MULT , PRODEXPAND)
	SELECT 
			STACK.PARENT_PRODSERN , 
			STACK.PRODSERN ,
			STACK.PRODPKGS AS PRODCPG_MULT , 
			STACK.PRODPKGS/CHILD.PRODSIZE AS PRODCASE_MULT,
			STACK.PRODPKGS/(CHILD.PRODSIZE*CHILD.PRODPALLET) AS PRODPALLET_MULT,
			STACK.PRODPKGS*CHILD.PRODCPS AS PRODUNIT_MULT , 
			0 AS PRODMONEY_MULT , 
			2 AS PRODEXPAND 
	FROM #stack STACK , OLAP_PRODUCT PARENT , OLAP_PRODUCT CHILD
	WHERE STACK.PARENT_PRODSERN=PARENT.PRODSERN  AND STACK.PRODSERN=CHILD.PRODSERN
INSERT INTO OLAP_LPROPROD(PARENT_PRODSERN , PRODSERN , PRODCPG_MULT , PRODCASE_MULT, PRODPALLET_MULT, PRODUNIT_MULT , PRODMONEY_MULT , PRODEXPAND)
	SELECT 
			STACK.PARENT_PRODSERN AS PARENT_PRODSERN , 
			STACK.PARENT_PRODSERN AS PRODSERN , 
			SUM(STACK.PRODPKGS) AS PRODCPG_MULT , 
			SUM(STACK.PRODPKGS/CHILD.PRODSIZE) AS PRODCASE_MULT,
			1/MAX(PARENT.PRODPALLET) AS PRODPALLET_MULT,
			SUM(STACK.PRODPKGS*CHILD.PRODCPS) AS PRODUNIT_MULT , 
			1 AS PRODMONEY_MULT , 
			1 AS PRODEXPAND 
	FROM #stack STACK , OLAP_PRODUCT PARENT , OLAP_PRODUCT CHILD
	WHERE STACK.PARENT_PRODSERN=PARENT.PRODSERN  AND STACK.PRODSERN=CHILD.PRODSERN
	GROUP BY STACK.PARENT_PRODSERN
*/

/* EXPANDABLE PRODUCTS - EXPANDED */
INSERT INTO OLAP_LPROPROD(PARENT_PRODSERN , PRODSERN ,  PRODSIZE , PRODCPS, PRODTAX , PRODPALLET, PRODPRICE, PRODCPWNET, PRODCPWGR, PRODCASEWGR , PRODCPG_MULT , PRODCASE_MULT, CHILDCASE_MULT, PRODPALLET_MULT, PRODUNIT_MULT , PRODMONEY_MULT , PRODEXPAND)
	SELECT 
			STACK.PARENT_PRODSERN , 
			STACK.PRODSERN ,
			CHILD.PRODSIZE AS PRODSIZE ,
			CHILD.PRODCPS AS PRODCPS ,
			CHILD.PRODTAX AS PRODTAX ,
			CHILD.PRODPALLET AS PRODPALLET ,
			CHILD.PRODPRICE AS PRODPRICE ,
			CHILD.PRODCPWNET AS PRODCPWNET ,		
			CHILD.PRODCPWGR AS PRODCPWGR ,
			CHILD.PRODCASEWGR AS PRODCASEWGR ,	
			CAST(STACK.PRODPKGS as real)/ISNULL((SELECT SUM(PRODPKGS) FROM #stack t1 WHERE t1.PARENT_PRODSERN=STACK.PARENT_PRODSERN),1) AS PRODCPG_MULT , 
			STACK.PRODPKGS/CHILD.PRODSIZE AS PRODCASE_MULT,
			1 AS CHILDCASE_MULT,
			STACK.PRODPKGS/(CHILD.PRODSIZE*CHILD.PRODPALLET) AS PRODPALLET_MULT,
			STACK.PRODPKGS*CHILD.PRODCPS AS PRODUNIT_MULT , 
			0 AS PRODMONEY_MULT , 
			2 AS PRODEXPAND 
	FROM #stack STACK , OLAP_PRODUCT PARENT , OLAP_PRODUCT CHILD
	WHERE STACK.PARENT_PRODSERN=PARENT.PRODSERN  AND STACK.PRODSERN=CHILD.PRODSERN

/* EXPANDABLE PRODUCTS - NOT EXPANDED */
INSERT INTO OLAP_LPROPROD(PARENT_PRODSERN , PRODSERN ,  PRODSIZE , PRODCPS, PRODTAX , PRODPALLET, PRODPRICE, PRODCPWNET, PRODCPWGR, PRODCASEWGR , PRODCPG_MULT , PRODCASE_MULT, CHILDCASE_MULT, PRODPALLET_MULT, PRODUNIT_MULT , PRODMONEY_MULT, PRODEXPAND)
	SELECT 
			STACK.PARENT_PRODSERN AS PARENT_PRODSERN , 
			STACK.PARENT_PRODSERN AS PRODSERN , 
			SUM(STACK.PRODPKGS)  AS PRODSIZE ,
			MAX(PARENT.PRODCPS) AS PRODCPS ,
			MAX(PARENT.PRODTAX) AS PRODTAX ,  
			MAX(PARENT.PRODPALLET) AS PRODPALLET ,
			MAX(PARENT.PRODPRICE) AS PRODPRICE ,
			MAX(PARENT.PRODCPWNET) AS PRODCPWNET ,
			MAX(PARENT.PRODCPWGR) AS PRODCPWGR ,
			MAX(PARENT.PRODCASEWGR) AS PRODCASEWGR ,
			1 AS PRODCPG_MULT , 
			1 AS PRODCASE_MULT,
			SUM(STACK.PRODPKGS/CHILD.PRODSIZE) AS CHILDCASE_MULT, -- sum of cases is calc from child product cases
			1 AS PRODPALLET_MULT,
			1 AS PRODUNIT_MULT , 
			1 AS PRODMONEY_MULT , 
			1 AS PRODEXPAND 
	FROM #stack STACK , OLAP_PRODUCT PARENT , OLAP_PRODUCT CHILD
	WHERE STACK.PARENT_PRODSERN=PARENT.PRODSERN  AND STACK.PRODSERN=CHILD.PRODSERN
	GROUP BY STACK.PARENT_PRODSERN

/* NOT EXPANDABLE PRODUCTS */
INSERT INTO OLAP_LPROPROD(PARENT_PRODSERN , PRODSERN ,  PRODSIZE , PRODCPS, PRODTAX , PRODPALLET , PRODPRICE, PRODCPWNET, PRODCPWGR, PRODCASEWGR, PRODCPG_MULT , PRODCASE_MULT, CHILDCASE_MULT, PRODPALLET_MULT, PRODUNIT_MULT , PRODMONEY_MULT, PRODEXPAND)
	SELECT 
		PRODSERN AS PARENT_PRODSERN , 
		PRODSERN AS PRODSERN ,
		PRODSIZE AS PRODSIZE ,
		PRODCPS AS PRODCPS ,
		PRODTAX AS PRODTAX ,
		PRODPALLET AS PRODPALLET ,
		PRODPRICE AS PRODPRICE ,
		PRODCPWNET AS PRODCPWNET ,
		PRODCPWGR AS PRODCPWGR ,
		PRODCASEWGR AS PRODCASEWGR ,
		1 AS PRODCPG_MULT , 
		1 AS PRODCASE_MULT , 
		1 AS CHILDCASE_MULT , 
		1 AS PRODPALLET_MULT, 
		1 AS PRODUNIT_MULT , 
		1 AS   PRODMONEY_MULT, 
		0  AS PRODEXPAND 
	FROM OLAP_PRODUCT
		WHERE NOT EXISTS(SELECT *  FROM #stack stack WHERE stack.PARENT_PRODSERN=OLAP_PRODUCT.PRODSERN)

DROP TABLE #stack

UPDATE OLAP_LPROPROD
	SET PRODEXPAND_INTERSECT=2
	WHERE PARENT_PRODSERN IN (SELECT PRODSERN FROM OLAP_LPROPROD t2 WHERE PRODEXPAND=2)

UPDATE OLAP_LPROPROD
	SET PRODEXPAND_INTERSECT=PRODEXPAND
	WHERE PRODEXPAND IN (1,2)
/*
UPDATE OLAP_LPROPROD
	SET 
	OLAP_LPROPROD.PRODSIZE=OLAP_PRODUCT.PRODSIZE ,
	OLAP_LPROPROD.PRODCPS=OLAP_PRODUCT.PRODCPS ,
	OLAP_LPROPROD.PRODTAX=OLAP_PRODUCT.PRODTAX ,
	OLAP_LPROPROD.PRODPALLET=OLAP_PRODUCT.PRODPALLET 
	FROM OLAP_PRODUCT , OLAP_LPROPROD
	WHERE OLAP_LPROPROD.PRODSERN=OLAP_PRODUCT.PRODSERN
*/
GO

setuser
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

setuser N'spp'
GO





CREATE PROCEDURE spp.proc_fill_OLAP_ORDDISTR
AS


SET NOCOUNT ON
SET DATEFIRST 1




--------------------   DATE TO INSERT CUMULATIVE SUMS FROM  -----------------------------

DECLARE @ORD_START_ORDDDATE varchar(8)
DECLARE @AUDIT_START_ORDDDATE varchar(8)
DECLARE @START_ORDDDATE varchar(8)
DECLARE @LAST_ORDDDATE varchar(8)


SELECT @ORD_START_ORDDDATE=MIN(ORDDDATE) FROM 
TORDER INNER JOIN TORDENTR ON TORDER.ORDSERN=TORDENTR.ORDSERN
WHERE 
EXISTS(SELECT * FROM OLAP_DATE WHERE TORDER.ORDDDATE=OLAP_DATE.DATE)
AND EXISTS(SELECT * FROM OLAP_STORE WHERE TORDER.COMSERNO=OLAP_STORE.COMSERNO)
AND EXISTS(SELECT * FROM OLAP_PRODUCT WHERE TORDENTR.PRODSERN=OLAP_PRODUCT.PRODSERN)
AND NOT EXISTS(SELECT * FROM OLAP_ORDDISTR_NOTEXP WHERE TORDER.ORDDDATE=OLAP_ORDDISTR_NOTEXP.ORDDDATE)
AND ORDDDATE<=convert(varchar(8) , DATEADD(m , 2  , GETDATE() )  , 112) 

SELECT @AUDIT_START_ORDDDATE=MIN(ORDDDATE) FROM TORDER WHERE ORDSERN IN ( SELECT KEYSERN1 FROM OLAP_AUDIT WHERE KEYTYPE='ORDSERN' )
AND EXISTS(SELECT * FROM OLAP_DATE WHERE TORDER.ORDDDATE=OLAP_DATE.DATE)

IF @ORD_START_ORDDDATE IS NULL AND @AUDIT_START_ORDDDATE IS NULL
	RETURN
ELSE
IF @ORD_START_ORDDDATE IS NOT NULL AND @AUDIT_START_ORDDDATE IS NOT NULL
	IF @ORD_START_ORDDDATE<@AUDIT_START_ORDDDATE
		SET @START_ORDDDATE=@ORD_START_ORDDDATE
	ELSE
		SET @START_ORDDDATE=@AUDIT_START_ORDDDATE
ELSE
IF @ORD_START_ORDDDATE IS NOT NULL
	SET @START_ORDDDATE=@ORD_START_ORDDDATE
ELSE
IF @AUDIT_START_ORDDDATE IS NOT NULL
	SET @START_ORDDDATE=@AUDIT_START_ORDDDATE



exec proc_insert_LOG 'date to start: ' , @START_ORDDDATE

------------------------------------------------------------------------------------------






exec proc_insert_LOG 'DELETE FROM OLAP_ORDDISTR_TMP'


DELETE FROM OLAP_ORDDISTR_TMP WHERE ORDDDATE>=@START_ORDDDATE

exec proc_insert_LOG 'end'





exec proc_insert_LOG 'insert into OLAP_ORDDISTR_TMP'



insert into OLAP_ORDDISTR_TMP(comserno , prodsern , ordddate , rangestart_date , outofstock_date , wrkdays_in_range , orddmonth , wrkday_serno , ordevol )
select
comserno ,
prodsern ,
ordddate ,
convert(varchar(8) , DATEADD(m , -12 , CONVERT(datetime , ordddate ) )  , 112) as rangestart_date ,
'' as outofstock_date ,
0 as wrkdays_in_range ,
'' as orddmonth,
max(olap_date.wrkday_serno) as wrkday_serno ,
sum(ISNULL(ordevol,0)) as ordevol
from torder inner join tordentr on torder.ordsern=tordentr.ordsern
inner join olap_date on olap_date.date=torder.ordddate
where exists(select * from olap_store where olap_store.comserno=torder.comserno)
and exists(select * from olap_product where olap_product.prodsern=tordentr.prodsern)
and ORDDDATE>=@START_ORDDDATE
group by comserno , prodsern , ordddate


exec proc_insert_LOG 'end'





exec proc_insert_LOG 'UPDATE OLAP_ORDDISTR_TMP'


UPDATE OLAP_ORDDISTR_TMP
SET wrkdays_in_range=wrkday_serno-(SELECT TOP 1 WRKDAY_SERNO FROM OLAP_ORDDISTR_TMP t2 WHERE t2.comserno=OLAP_ORDDISTR_TMP.comserno and t2.prodsern=OLAP_ORDDISTR_TMP.prodsern and t2.ordddate>=OLAP_ORDDISTR_TMP.rangestart_date ORDER BY t2.ordddate ASC)
WHERE ORDDDATE>=@START_ORDDDATE

exec proc_insert_LOG 'end'







exec proc_insert_LOG 'UPDATE OLAP_ORDDISTR_TMP'


DECLARE @MAX_DATE char(8)

SELECT @MAX_DATE=MAX(DATE) FROM OLAP_DATE


UPDATE OLAP_ORDDISTR_TMP
SET
OUTOFSTOCK_DATE=ISNULL(
(SELECT MIN(DATE) FROM OLAP_DATE d1 WHERE d1.WRKDAY_SERNO=(OLAP_ORDDISTR_TMP.WRKDAY_SERNO+ceiling( (case when OLAP_ORDDISTR_TMP.wrkdays_in_range>0 then OLAP_ORDDISTR_TMP.wrkdays_in_range else 21 end)*(OLAP_ORDDISTR_TMP.ordevol*0.8)/isnull((select case when sum(t2.ordevol)=0 then NULL else sum(t2.ordevol) end from OLAP_ORDDISTR_TMP t2 
	where t2.comserno=OLAP_ORDDISTR_TMP.comserno and t2.prodsern=OLAP_ORDDISTR_TMP.prodsern and t2.ordddate<OLAP_ORDDISTR_TMP.ordddate and t2.ordddate>=OLAP_ORDDISTR_TMP.rangestart_date) , case when OLAP_ORDDISTR_TMP.ordevol=0 then 1 else (OLAP_ORDDISTR_TMP.ordevol*0.8) end )) 
)
) , @MAX_DATE )
WHERE ORDDDATE>=@START_ORDDDATE

exec proc_insert_LOG 'end'






exec proc_insert_LOG 'DELETE FROM OLAP_ORDDISTR_TMP2'


DELETE FROM OLAP_ORDDISTR_TMP2 WHERE ORDDDATE>=@START_ORDDDATE

exec proc_insert_LOG 'end'





exec proc_insert_LOG 'INSERT INTO OLAP_ORDDISTR_TMP2'



INSERT INTO OLAP_ORDDISTR_TMP2 (
COMSERNO ,
PRODSERN , 
ORDDDATE ,
PREV_ORDDDATE ,
INDISTR ,
INBSEL ,  
INSEL
)
select 
comserno , 
prodsern , 
ordddate , 
'00000000' as prev_ordddate , 
case 
	when sum(indistr)=0	then 0
	else 1
end as indistr , 
0 as inbsel,
0 as insel
from
(
select comserno , prodsern , ordddate , 1 as indistr 
from OLAP_ORDDISTR_TMP t1 where not exists(select * from OLAP_ORDDISTR_TMP t2 where t2.comserno=t1.comserno and t2.prodsern=t1.prodsern and t2.ordddate<t1.ordddate and t1.ordddate>t2.outofstock_date)
and ORDDDATE>=@START_ORDDDATE

union all

select comserno , prodsern , outofstock_date as ordddate , 0 as indistr 
from OLAP_ORDDISTR_TMP t1 where not exists(select * from OLAP_ORDDISTR_TMP t2 where t2.comserno=t1.comserno and t2.prodsern=t1.prodsern and t2.ordddate<t1.outofstock_date and t1.outofstock_date>t2.outofstock_date)
and outofstock_date>=@START_ORDDDATE
)tbl
group by comserno , prodsern , ordddate

exec proc_insert_LOG 'end'






exec proc_insert_LOG 'insert into OLAP_ORDDISTR_TMP2'



insert into OLAP_ORDDISTR_TMP2(
COMSERNO ,
PRODSERN , 
ORDDDATE ,
PREV_ORDDDATE ,
INDISTR ,
INBSEL ,  
INSEL 
)
select 
comserno , 
prodsern , 
seldate as ORDDDATE , 
'00000000' as prev_ordddate , 
(select top 1 indistr from OLAP_ORDDISTR_TMP2 d2 where d2.comserno=s1.comserno and d2.prodsern=s1.prodsern and d2.ordddate<s1.seldate order by ordddate desc) as indistr ,
0 as inbsel,
0 as insel 
from 
(

select comserno , prodsern , seldate from olap_selection s1
where seldate>=@START_ORDDDATE
and exists(select * from  OLAP_ORDDISTR_TMP2 d1 where d1.comserno=s1.comserno and d1.prodsern=s1.prodsern and d1.ordddate<s1.seldate)
	and not exists(select * from  OLAP_ORDDISTR_TMP2 d1 where d1.comserno=s1.comserno and d1.prodsern=s1.prodsern and d1.ordddate=s1.seldate)

union

select comserno , prodsern , seldate from olap_base_selection s1
where seldate>=@START_ORDDDATE
and exists(select * from  OLAP_ORDDISTR_TMP2 d1 where d1.comserno=s1.comserno and d1.prodsern=s1.prodsern and d1.ordddate<s1.seldate)
	and not exists(select * from  OLAP_ORDDISTR_TMP2 d1 where d1.comserno=s1.comserno and d1.prodsern=s1.prodsern and d1.ordddate=s1.seldate)
) s1


exec proc_insert_LOG 'end'







exec proc_insert_LOG 'update OLAP_ORDDISTR_TMP2'



update OLAP_ORDDISTR_TMP2
set
prev_ordddate=IsNUll(
(select top 1 ordddate from OLAP_ORDDISTR_TMP2 t2 where OLAP_ORDDISTR_TMP2.comserno=t2.comserno and OLAP_ORDDISTR_TMP2.prodsern=t2.prodsern and OLAP_ORDDISTR_TMP2.ordddate>t2.ordddate order by t2.ordddate desc)  
, '00000000') ,
inbsel=(case IsNUll((select top 1 insel from olap_base_selection s2 where s2.comserno=OLAP_ORDDISTR_TMP2.comserno and s2.prodsern=OLAP_ORDDISTR_TMP2.prodsern and s2.seldate<=OLAP_ORDDISTR_TMP2.ordddate order by seldate desc),0)
	when 1 then 1
	else 0
end),
insel=(case IsNUll((select top 1 insel from olap_selection s2 where s2.comserno=OLAP_ORDDISTR_TMP2.comserno and s2.prodsern=OLAP_ORDDISTR_TMP2.prodsern and s2.seldate<=OLAP_ORDDISTR_TMP2.ordddate order by seldate desc),0)
	when 1 then 1
	else 0
end) 
WHERE ORDDDATE>=@START_ORDDDATE

exec proc_insert_LOG 'end'








exec proc_insert_LOG 'DELETE FROM OLAP_ORDDISTR_NOTEXP'


DELETE FROM OLAP_ORDDISTR_NOTEXP WHERE ORDDDATE>=@START_ORDDDATE

exec proc_insert_LOG 'end'








exec proc_insert_LOG 'insert into OLAP_ORDDISTR_NOTEXP'



insert into OLAP_ORDDISTR_NOTEXP(comserno , prodsern , ordddate , insel_cum , inbsel_cum , indistr_cum , inseldistr_cum , inbseldistr_cum , prodexpand , prodexpand_intersect)
select t1.comserno, p1.prodsern, t1.ordddate, 
(case
	when isnull(t2.insel,0)=1 and t1.insel=0	then -1
	when isnull(t2.insel,0)=0 and t1.insel=1	then 1
	else 0
end) as insel_cum,
(case
	when isnull(t2.inbsel,0)=1 and t1.inbsel=0	then -1
	when isnull(t2.inbsel,0)=0 and t1.inbsel=1	then 1
	else 0
end) as inbsel_cum,
(case
	when isnull(t2.indistr,0)=1 and t1.indistr=0	then -1
	when isnull(t2.indistr,0)=0 and t1.indistr=1	then 1
	else 0
end) as indistr_cum,
(case
	when (isnull(t2.indistr,0)=1 and isnull(t2.insel,0)=1) and (t1.indistr=0 or t1.insel=0)	then -1
	when (isnull(t2.indistr,0)=0 or isnull(t2.insel,0)=0) and (t1.indistr=1 and t1.insel=1)	then 1
	else 0
end) as inseldistr_cum ,
(case
	when (isnull(t2.indistr,0)=1 and isnull(t2.inbsel,0)=1) and (t1.indistr=0 or t1.inbsel=0)	then -1
	when (isnull(t2.indistr,0)=0 or isnull(t2.inbsel,0)=0) and (t1.indistr=1 and t1.inbsel=1)	then 1
	else 0
end) as inbseldistr_cum ,
prodexpand ,
prodexpand_intersect
from OLAP_ORDDISTR_TMP2 t1
inner join olap_lproprod p1 
	on t1.prodsern=p1.parent_prodsern
left outer join OLAP_ORDDISTR_TMP2 t2
	on t1.comserno=t2.comserno and t1.prodsern=t2.prodsern and t1.prev_ordddate=t2.ordddate
where t1.ordddate>=@START_ORDDDATE



exec proc_insert_LOG 'end'









exec proc_insert_LOG 'delete from OLAP_ORDDISTR_EXP'


delete from OLAP_ORDDISTR_EXP where ordddate>=@START_ORDDDATE

exec proc_insert_LOG 'end'


 



exec proc_insert_LOG 'insert into OLAP_ORDDISTR_EXP'



insert into OLAP_ORDDISTR_EXP(comserno , prodsern , ordddate , 
				prev_indistr_cum_sum , prev_insel_cum_sum , prev_inbsel_cum_sum , 
				cur_indistr_cum_sum , cur_insel_cum_sum, cur_inbsel_cum_sum , 
				indistr_cum , inseldistr_cum , inbseldistr_cum)
select comserno , prodsern , ordddate ,
isnull((select sum(indistr_cum) from OLAP_ORDDISTR_NOTEXP t2 where t2.comserno=t1.comserno and t2.prodsern=t1.prodsern and t2.ordddate<t1.ordddate),0) 
as prev_indistr_cum_sum ,
isnull((select sum(insel_cum) from OLAP_ORDDISTR_NOTEXP t2 where t2.comserno=t1.comserno and t2.prodsern=t1.prodsern and t2.ordddate<t1.ordddate),0) 
as prev_insel_cum_sum ,
isnull((select sum(inbsel_cum) from OLAP_ORDDISTR_NOTEXP t2 where t2.comserno=t1.comserno and t2.prodsern=t1.prodsern and t2.ordddate<t1.ordddate),0) 
as prev_inbsel_cum_sum ,
sum(indistr_cum) as cur_indistr_cum_sum ,
sum(insel_cum) as cur_insel_cum_sum ,
sum(inbsel_cum) as cur_inbsel_cum_sum ,
0 as indistr_cum ,
0 as inseldistr_cum , 
0 as inbseldistr_cum 
from 
OLAP_ORDDISTR_NOTEXP t1 
where prodexpand_intersect=2 and ordddate>=@START_ORDDDATE
group by comserno , prodsern , ordddate


exec proc_insert_LOG 'end'





exec proc_insert_LOG 'update OLAP_ORDDISTR_EXP'


update OLAP_ORDDISTR_EXP
set indistr_cum=
(case
	when prev_indistr_cum_sum>0 and prev_indistr_cum_sum+cur_indistr_cum_sum<=0	then -1
	when prev_indistr_cum_sum<=0 and prev_indistr_cum_sum+cur_indistr_cum_sum>0	then 1
	else 0
end) ,
inseldistr_cum=
(case
	when (prev_indistr_cum_sum>0 and prev_insel_cum_sum>0) and ((prev_indistr_cum_sum+cur_indistr_cum_sum)<=0 or (prev_insel_cum_sum+cur_insel_cum_sum)<=0)	then -1
	when (prev_indistr_cum_sum<=0 or prev_insel_cum_sum<=0) and ((prev_indistr_cum_sum+cur_indistr_cum_sum)>0 and (prev_insel_cum_sum+cur_insel_cum_sum)>0)	then 1
	else 0
end) ,
inbseldistr_cum=
(case
	when (prev_indistr_cum_sum>0 and prev_inbsel_cum_sum>0) and ((prev_indistr_cum_sum+cur_indistr_cum_sum)<=0 or (prev_inbsel_cum_sum+cur_inbsel_cum_sum)<=0)	then -1
	when (prev_indistr_cum_sum<=0 or prev_inbsel_cum_sum<=0) and ((prev_indistr_cum_sum+cur_indistr_cum_sum)>0 and (prev_inbsel_cum_sum+cur_inbsel_cum_sum)>0)	then 1
	else 0
end)
where ordddate>=@START_ORDDDATE


exec proc_insert_LOG 'end'



DELETE FROM OLAP_AUDIT WHERE KEYTYPE='ORDSERN'





GO
setuser
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

setuser N'spp'
GO





CREATE procedure spp.proc_fill_OLAP_ORDDISTR_SEL 
@start_seldate varchar(8)
as

declare @seldate varchar(8)
declare @prev_seldate varchar(8)

set nocount on 


create table #cumulative_set(comserno varchar(15), prodsern varchar(15) , prodexpand tinyint , indistr smallint , prev_indistr smallint , insel smallint , prev_insel smallint , inbsel smallint , prev_inbsel smallint)



SELECT @start_seldate=ISNULL(MAX(SELDATE) , '00000000')  FROM olap_seldate t2 WHERE SELDATE<=@start_seldate



delete from olap_orddistr where indistr=0 and (inseldistr!=0  or inbseldistr!=0) and ordddate>=@start_seldate
update olap_orddistr set inseldistr=0 ,  inbseldistr=0  where ordddate>=@start_seldate




--------------------- filling cumulative set -----------------------

IF @start_seldate!='00000000'
	BEGIN

		insert into #cumulative_set(comserno , prodsern , prodexpand , indistr , prev_indistr,  insel , prev_insel,  inbsel , prev_inbsel)
			select comserno , prodsern , prodexpand , sum(indistr) as  indistr, 0 as prev_indistr , 0  as insel , 0 as prev_insel  , 0  as inbsel , 0 as prev_inbsel from olap_orddistr
			where ordddate<@start_seldate
			group by comserno , prodsern , prodexpand
		
		
		
		UPDATE #cumulative_set
			SET INSEL=1
			FROM #cumulative_set WHERE EXISTS(SELECT * FROM OLAP_TSELENTR , OLAP_LCOMSEL WHERE 
			OLAP_LCOMSEL.COMSERNO=#cumulative_set.COMSERNO AND OLAP_TSELENTR.PRODSERN=#cumulative_set.PRODSERN AND
			OLAP_TSELENTR.SELSERN=OLAP_LCOMSEL.SELSERN AND SELESTART<=convert(varchar(8) , DATEADD(d , -1 , CONVERT(datetime , @start_seldate ) )  , 112)  AND SELEEND>=@start_seldate )
		
		
		
		UPDATE #cumulative_set
			SET INBSEL=ISNULL(
			(SELECT TOP 1 CASE OLAP_BASE_SELECTION.INSEL  WHEN 1 THEN 1 ELSE 0 END AS INSELSUM
			FROM OLAP_BASE_SELECTION
			WHERE OLAP_BASE_SELECTION.COMSERNO=#cumulative_set.COMSERNO AND OLAP_BASE_SELECTION.PRODSERN= #cumulative_set.PRODSERN AND OLAP_BASE_SELECTION.SELDATE<@start_seldate
			ORDER BY OLAP_BASE_SELECTION.COMSERNO , OLAP_BASE_SELECTION.PRODSERN, OLAP_BASE_SELECTION.SELDATE DESC
			)
			, 0 ) --ISNULL end
			FROM  #cumulative_set 
	END

--------------------------------------------------------------------------




declare temp_cursor cursor for
select * from 
(
select seldate from olap_seldate 
union
select '00000000' as seldate
union
select '99999999' as seldate
)tbl
where seldate>=@start_seldate
order by seldate

open temp_cursor


fetch next from temp_cursor into @seldate

set @prev_seldate=@seldate


fetch next from temp_cursor into @seldate

while @@fetch_status=0
	begin
		exec proc_insert_LOG @prev_seldate , '-' , @seldate

		update #cumulative_set
			set prev_indistr=indistr , prev_insel=insel , prev_inbsel=inbsel , insel=0 , inbsel=0



		insert into #cumulative_set(comserno , prodsern , prodexpand , indistr , prev_indistr,  insel , prev_insel,  inbsel , prev_inbsel)
			select comserno , prodsern , prodexpand , 0 as indistr, 0 as prev_indistr , 0  as insel , 0 as prev_insel , 0  as inbsel , 0 as prev_inbsel from olap_orddistr
			where ordddate>=@prev_seldate and ordddate<@seldate
			and not exists(select * from #cumulative_set t1 where t1.comserno=olap_orddistr.comserno and t1.prodsern=olap_orddistr.prodsern and t1.prodexpand=olap_orddistr.prodexpand)
			group by comserno , prodsern , prodexpand



		UPDATE #cumulative_set
			SET INSEL=1
			FROM #cumulative_set WHERE EXISTS(SELECT * FROM OLAP_TSELENTR , OLAP_LCOMSEL WHERE 
			OLAP_LCOMSEL.COMSERNO=#cumulative_set.COMSERNO AND OLAP_TSELENTR.PRODSERN=#cumulative_set.PRODSERN AND
			OLAP_TSELENTR.SELSERN=OLAP_LCOMSEL.SELSERN AND SELESTART<=@prev_seldate AND SELEEND>@prev_seldate )


		UPDATE #cumulative_set
			SET INBSEL=ISNULL(
			(SELECT TOP 1 CASE OLAP_BASE_SELECTION.INSEL  WHEN 1 THEN 1 ELSE 0 END AS INSELSUM
			FROM OLAP_BASE_SELECTION
			WHERE OLAP_BASE_SELECTION.COMSERNO=#cumulative_set.COMSERNO AND OLAP_BASE_SELECTION.PRODSERN= #cumulative_set.PRODSERN AND OLAP_BASE_SELECTION.SELDATE<=@prev_seldate
			ORDER BY OLAP_BASE_SELECTION.COMSERNO , OLAP_BASE_SELECTION.PRODSERN, OLAP_BASE_SELECTION.SELDATE DESC
			)
			, 0 ) --ISNULL end
			FROM  #cumulative_set 


		--select * from #cumulative_set where comserno='IMP000000009354' and prodsern='IMP000000014524'

		update olap_orddistr
			set olap_orddistr.inseldistr=
			(case
				when olap_orddistr.indistr=1 and #cumulative_set.insel=1 then 1
				when olap_orddistr.indistr=-1 and #cumulative_set.insel=1 then -1
				else 0
			end) , 
			olap_orddistr.inbseldistr=(case
				when olap_orddistr.indistr=1 and #cumulative_set.inbsel=1 then 1
				when olap_orddistr.indistr=-1 and #cumulative_set.inbsel=1 then -1
				else 0
			end)
			from #cumulative_set , olap_orddistr
			where #cumulative_set.comserno=olap_orddistr.comserno and #cumulative_set.prodsern=olap_orddistr.prodsern  and #cumulative_set.prodexpand=olap_orddistr.prodexpand
			and ordddate>=@prev_seldate and ordddate<@seldate



		insert into olap_orddistr(comserno , prodsern , prodexpand , ordddate , indistr , inseldistr ,  inbseldistr)
			select #cumulative_set.comserno , #cumulative_set.prodsern , #cumulative_set.prodexpand , @prev_seldate as ordddate , 0 as indistr ,  insel-prev_insel as inseldistr ,  inbsel-prev_inbsel as inbseldistr
			from #cumulative_set
			where 
			prev_indistr=1 and indistr=1 and ( prev_insel!=insel  or  prev_inbsel!=inbsel  )

		--select * from olap_orddistr where comserno='IMP000000009354' and prodsern='IMP000000014524'  and ordddate>=@prev_seldate and ordddate<@seldate

		exec proc_insert_LOG @@rowcount



		update #cumulative_set
			set #cumulative_set.indistr=#cumulative_set.indistr+sum_indistr
			from #cumulative_set , (select comserno , prodsern , prodexpand , sum(indistr) as sum_indistr from olap_orddistr where ordddate>=@prev_seldate and ordddate<@seldate group by comserno , prodsern , prodexpand ) olap_orddistr
			where #cumulative_set.comserno=olap_orddistr.comserno and #cumulative_set.prodsern=olap_orddistr.prodsern  and #cumulative_set.prodexpand=olap_orddistr.prodexpand 



		set @prev_seldate=@seldate

		fetch next from temp_cursor into @seldate
	end

close temp_cursor
deallocate temp_cursor

drop table #cumulative_set




GO
setuser
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

setuser N'spp'
GO











CREATE PROCEDURE [spp].[proc_fill_OLAP_PRODUCT] AS
DECLARE @command_string varchar(8000)
DECLARE @PRODSERN varchar(15)
DECLARE @PGRPNAME varchar(15)
DECLARE @PGRPVAL varchar(30)
DECLARE @PRODUCT_GROUP_NAME varchar(50)
DECLARE @NEW_PRODUCT_GROUP_NAME varchar(50)
DECLARE @TEMP_PRODUCT_GROUP_NAME varchar(50)
DECLARE @TEMP_COUNTER int
DECLARE @position int
DECLARE @BLN_SUPPLIER_DIM_2 bit
SET @BLN_SUPPLIER_DIM_2=0
DECLARE @CURRENT_ASCII_CODE tinyint
SET @CURRENT_ASCII_CODE=0

DECLARE @COUNTER int
SET @COUNTER=0

SET NOCOUNT ON


--BEGIN TRAN



if object_id('tempdb..#stack') is not null
	drop table #stack


if object_id('tempdb..#OLD_PRODUCT_GROUPS') is not null
	drop table #OLD_PRODUCT_GROUPS

if object_id('tempdb..#NEW_PRODUCT_GROUPS') is not null
	drop table #NEW_PRODUCT_GROUPS



---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--							PRODUCT GROUPS TRANSLATION TABLE
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


/***********************************/
if exists (select * from dbo.sysobjects where id = object_id(N'[spp].[OLAP_PGROUPS]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
drop table [spp].[OLAP_PGROUPS]
/***********************************/


/***********************************/
CREATE TABLE [spp].[OLAP_PGROUPS] (
	[PGRSERN] [varchar] (15)   NOT NULL PRIMARY KEY ,
	[PGRPNAME] [varchar] (50)  NULL ,
	[PGRPVAL] [varchar] (30)  NULL 
) ON [PRIMARY]
/***********************************/


INSERT INTO OLAP_PGROUPS(PGRSERN , PGRPNAME , PGRPVAL)
SELECT PGRSERN , PGRPNAME , PGRPVAL
FROM TPGROUPS
WHERE PGRSERN IN (SELECT PGRSERN FROM LPROPGR)
INSERT INTO OLAP_PGROUPS(PGRSERN , PGRPNAME , PGRPVAL)
SELECT DISTINCT CAST(PGRPNAME as varchar(15))  AS PGRSERN, PGRPNAME , 'Undefined' AS PGRPVAL
FROM OLAP_PGROUPS
WHERE PGRPVAL<>'Undefined'



---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------









CREATE TABLE  #OLD_PRODUCT_GROUPS (PRODUCT_GROUP_NAME varchar(255) )	
INSERT INTO #OLD_PRODUCT_GROUPS SELECT PRODUCT_GROUP_NAME FROM v_select_PRODUCT_GROUPS


/***********************************/
if exists (select * from dbo.sysobjects where id = object_id(N'[spp].[OLAP_PRODUCT]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
drop table [spp].[OLAP_PRODUCT]
/***********************************/


/***********************  CREATE TABLE **************************/
SET @command_string='CREATE TABLE [spp].[OLAP_PRODUCT] ('
SET @command_string=@command_string +'[PRODSERN] [varchar] (15) NOT NULL  PRIMARY KEY '
SET @command_string=@command_string + ' , '
SET @command_string=@command_string +'[PRODNAME] [varchar] (45)   NULL  DEFAULT ''Undefined'' '
SET @command_string=@command_string + ' , '
SET @command_string=@command_string +'[PRODSNAME] [varchar] (15)    NULL  DEFAULT ''Undefined''  '
SET @command_string=@command_string + ' , '
SET @command_string=@command_string +'[PRODSIZE] [float]  NULL  DEFAULT 1 '
SET @command_string=@command_string + ' , '
SET @command_string=@command_string +'[PRODCPS] [float]  NULL DEFAULT 1  '
SET @command_string=@command_string + ' , '
SET @command_string=@command_string +'[PRODTAX] [float]  NULL DEFAULT 0  '
SET @command_string=@command_string + ' , '
SET @command_string=@command_string +'[PRODPALLET] [float]  NULL  DEFAULT 1  '
SET @command_string=@command_string + ' , '
SET @command_string=@command_string +'[PRODPRICE] [float]  NULL  DEFAULT 0  '
SET @command_string=@command_string + ' , '
SET @command_string=@command_string +'[PRODCPWNET] [float]  NULL  DEFAULT 0  '
SET @command_string=@command_string + ' , '
SET @command_string=@command_string +'[PRODCPWGR] [float]  NULL  DEFAULT 0  '
SET @command_string=@command_string + ' , '
SET @command_string=@command_string +'[PRODCASEWGR] [float]  NULL  DEFAULT 0  '


DECLARE temp_cursor CURSOR FOR 
SELECT DISTINCT PGRPNAME FROM TPGROUPS WHERE LTRIM(ISNULL(PGRPNAME,''))!=''

OPEN temp_cursor

FETCH NEXT FROM temp_cursor INTO @PGRPNAME

WHILE @@FETCH_STATUS=0
	BEGIN
		IF CHARINDEX(@command_string , '[GRP@#@' + REPLACE(@PGRPNAME , ']' , ']]')  + ']' )=0
			BEGIN
				SET @command_string=@command_string + ' , '
				SET @command_string=@command_string +'[GRP@#@' + REPLACE(@PGRPNAME , ']' , ']]')  + '] [varchar] (30)   NULL  DEFAULT ' + CHAR(39) + 'Undefined' + CHAR(39)
				FETCH NEXT FROM temp_cursor INTO @PGRPNAME
			END
	END

CLOSE temp_cursor 
DEALLOCATE temp_cursor

SET @command_string=@command_string + ' , '
IF CHARINDEX(@command_string , '[GRP@#@Supplier]' )=0
	BEGIN
		SET @command_string=@command_string +'[GRP@#@Supplier] [varchar] (40)   NULL  DEFAULT ' + CHAR(39) + 'Undefined' + CHAR(39)
		SET @BLN_SUPPLIER_DIM_2=0
	END
ELSE
	BEGIN
		SET @command_string=@command_string +'[GRP@#@Supplier Builtin] [varchar] (40)   NULL  DEFAULT ' + CHAR(39) + 'Undefined' + CHAR(39)
		SET @BLN_SUPPLIER_DIM_2=1
	END
SET @command_string=@command_string + ') ON [PRIMARY]'
EXECUTE(@command_string)
/********************************************************************/



INSERT INTO OLAP_PRODUCT(PRODSERN , PRODNAME , PRODSNAME  , PRODSIZE , PRODCPS , PRODTAX ,  PRODPALLET, PRODPRICE, PRODCPWNET, PRODCPWGR , PRODCASEWGR )
	SELECT PRODSERN , PRODNAME , PRODSNAME ,
	CASE ISNULL(PRODSIZE,0)
		WHEN 0 THEN 1
		ELSE 	PRODSIZE
	END AS PRODSIZE ,
	CASE ISNULL(PRODCPS,0)
		WHEN 0 THEN 1
		ELSE 	PRODCPS
	END AS PRODCPS ,
	ISNULL(PRODTAX,0) AS PRODTAX ,
	CASE ISNULL(PRODPALLET,0)
		WHEN 0 THEN 1
		ELSE 	PRODPALLET
	END AS PRODPALLET ,
	ISNULL(PRODPRICE,0) AS PRODPRICE ,
	ISNULL(PRODCPWNET,0) AS PRODCPWNET ,
	ISNULL(PRODCPWE,0) AS PRODCPWGR ,
	ISNULL(PRODWE,0) AS PRODCASEWGR 
	FROM TPRODUCT



INSERT INTO OLAP_PRODUCT(PRODSERN , PRODNAME , PRODSNAME , PRODSIZE , PRODCPS , PRODPALLET )
	VALUES ( '0' , 'Undefined' , 'Undefined' , 1 , 1 , 1 )
DECLARE temp_cursor CURSOR FOR
SELECT LPROPGR.PRODSERN , TPGROUPS.PGRPNAME , TPGROUPS.PGRPVAL FROM
LPROPGR INNER JOIN TPGROUPS ON LPROPGR.PGRSERN=TPGROUPS.PGRSERN  WHERE LTRIM(ISNULL(TPGROUPS.PGRPNAME,''))!=''
ORDER BY LPROPGR.DATESTAMP
OPEN temp_cursor
FETCH NEXT FROM temp_cursor INTO @PRODSERN , @PGRPNAME , @PGRPVAL
WHILE @@FETCH_STATUS=0
	BEGIN
		/***********************  INSERT VALUE **************************/
		
		SET @command_string='UPDATE [OLAP_PRODUCT]  SET [GRP@#@' +  REPLACE(@PGRPNAME , ']' , ']]')  + ']=' + CHAR(39) +REPLACE(@PGRPVAL , CHAR(39) , CHAR(39)+'+CHAR(39)+' +CHAR(39) ) + CHAR(39) + '  WHERE PRODSERN=' + CHAR(39) + @PRODSERN + CHAR(39)
		EXECUTE(@command_string)
		/********************************************************************/
		FETCH NEXT FROM temp_cursor INTO @PRODSERN , @PGRPNAME , @PGRPVAL
	END
--********************** SUPPLIER  **************************
IF @BLN_SUPPLIER_DIM_2=0 
	BEGIN
		EXECUTE('UPDATE OLAP_PRODUCT 
			SET OLAP_PRODUCT.[GRP@#@Supplier]=temp_table.COMNAME
			FROM OLAP_PRODUCT , (SELECT TPRODUCT.PRODSERN , ISNULL(COMNAME, ''Undefined'') AS COMNAME FROM TPRODUCT LEFT OUTER JOIN TCOMPANY ON TPRODUCT.COMSERNO=TCOMPANY.COMSERNO) temp_table
			WHERE OLAP_PRODUCT.PRODSERN=temp_table.PRODSERN')
	END
--********************** SUPPLIER BUILTIN **************************
ELSE 
	BEGIN
		EXECUTE('UPDATE OLAP_PRODUCT 
			SET OLAP_PRODUCT.[GRP@#@Supplier Builtin]=temp_table.COMNAME
			FROM OLAP_PRODUCT , (SELECT TPRODUCT.PRODSERN , ISNULL(COMNAME, ''Undefined'') AS COMNAME FROM TPRODUCT LEFT OUTER JOIN TCOMPANY ON TPRODUCT.COMSERNO=TCOMPANY.COMSERNO) temp_table
			WHERE OLAP_PRODUCT.PRODSERN=temp_table.PRODSERN')
	END
CLOSE temp_cursor 
DEALLOCATE temp_cursor
--*************************************  RENAMING COLUMNS TO MATCH DSO NAMING CONVENTIONS ***********************************************************
DECLARE temp_cursor CURSOR 
FOR
select SUBSTRING(COLUMN_NAME , 7 , LEN(COLUMN_NAME)-6) AS PRODUCT_GROUP_NAME from INFORMATION_SCHEMA.COLUMNS
WHERE TABLE_CATALOG=(SELECT DB_NAME())  AND TABLE_SCHEMA='spp' AND TABLE_NAME='OLAP_PRODUCT'
AND LEFT(COLUMN_NAME ,6)='GRP@#@'
OPEN temp_cursor
FETCH NEXT FROM temp_cursor INTO @PRODUCT_GROUP_NAME
WHILE @@FETCH_STATUS=0
	BEGIN
		SET @NEW_PRODUCT_GROUP_NAME=RTRIM(LTRIM(Replace(@PRODUCT_GROUP_NAME , '  ' ,' ')))
		SET @NEW_PRODUCT_GROUP_NAME=Replace(@NEW_PRODUCT_GROUP_NAME , '   ' ,' ')
		SET @NEW_PRODUCT_GROUP_NAME=Replace(@NEW_PRODUCT_GROUP_NAME , '    ' ,' ')
		SET @NEW_PRODUCT_GROUP_NAME=Replace(@NEW_PRODUCT_GROUP_NAME , '     ' ,' ')
		SET @position=1
		SET @TEMP_PRODUCT_GROUP_NAME=''
		
		WHILE @position <= DATALENGTH(@NEW_PRODUCT_GROUP_NAME)
		   BEGIN
		
			SET  @CURRENT_ASCII_CODE=ASCII(SUBSTRING(@NEW_PRODUCT_GROUP_NAME, @position, 1))
		
			IF (@CURRENT_ASCII_CODE<32) 
			OR (@CURRENT_ASCII_CODE>32 AND @CURRENT_ASCII_CODE<48)
			OR (@CURRENT_ASCII_CODE>57 AND @CURRENT_ASCII_CODE<65)
			OR (@CURRENT_ASCII_CODE>90 AND @CURRENT_ASCII_CODE<97)
			OR (@CURRENT_ASCII_CODE>122 AND @CURRENT_ASCII_CODE<192)
				BEGIN
					IF RIGHT(@TEMP_PRODUCT_GROUP_NAME , 1)<> ' '
						SET @TEMP_PRODUCT_GROUP_NAME=@TEMP_PRODUCT_GROUP_NAME + ' '
				END
			ELSE
				BEGIN
					SET @TEMP_PRODUCT_GROUP_NAME=@TEMP_PRODUCT_GROUP_NAME + SUBSTRING(@NEW_PRODUCT_GROUP_NAME, @position, 1)
				END
		
		   	SET @position = @position + 1
		
		   END

			--- check if first symbol is letter ,  it's not allowed
			SET @CURRENT_ASCII_CODE=ASCII(LEFT(@TEMP_PRODUCT_GROUP_NAME, 1))
			IF (@CURRENT_ASCII_CODE<65)
			OR (@CURRENT_ASCII_CODE>90 AND @CURRENT_ASCII_CODE<97)
			OR (@CURRENT_ASCII_CODE>122 AND @CURRENT_ASCII_CODE<129)
			OR (@CURRENT_ASCII_CODE>165)
				BEGIN
					SET @TEMP_PRODUCT_GROUP_NAME='Group ' + @TEMP_PRODUCT_GROUP_NAME
				END


			SET @NEW_PRODUCT_GROUP_NAME=@TEMP_PRODUCT_GROUP_NAME
			IF @NEW_PRODUCT_GROUP_NAME<>@PRODUCT_GROUP_NAME
					BEGIN
						SET @TEMP_PRODUCT_GROUP_NAME=@NEW_PRODUCT_GROUP_NAME
						SET @TEMP_COUNTER=0
						WHILE EXISTS(SELECT *  FROM v_select_product_groups WHERE PRODUCT_GROUP_NAME=@TEMP_PRODUCT_GROUP_NAME)
							BEGIN
								SET @TEMP_COUNTER=@TEMP_COUNTER+1
								SET @TEMP_PRODUCT_GROUP_NAME=@NEW_PRODUCT_GROUP_NAME + CAST(@TEMP_COUNTER AS varchar(5))
							END
						SET @NEW_PRODUCT_GROUP_NAME='GRP@#@' + @TEMP_PRODUCT_GROUP_NAME
						SET @PRODUCT_GROUP_NAME='OLAP_PRODUCT.[GRP@#@' + REPLACE(@PRODUCT_GROUP_NAME , ']' , ']]') + ']'
						-------------------------------------------------- rename OLAP_PRODUCT columns ---------------------------------------------------
						EXEC  sp_rename @PRODUCT_GROUP_NAME , @NEW_PRODUCT_GROUP_NAME, 'COLUMN'
						---------------------------------------------------------------------------------------------------------------------------------------------------------------
						--------------------------------------------- rename OLAP_PGROUPS_TRANS records -------------------------------------------
						UPDATE OLAP_PGROUPS SET PGRPNAME=@NEW_PRODUCT_GROUP_NAME WHERE PGRPNAME=@PRODUCT_GROUP_NAME
						---------------------------------------------------------------------------------------------------------------------------------------------------------------
						exec proc_insert_LOG @PRODUCT_GROUP_NAME
						exec proc_insert_LOG @NEW_PRODUCT_GROUP_NAME
					END
		FETCH NEXT FROM temp_cursor INTO @PRODUCT_GROUP_NAME
	END
CLOSE temp_cursor 
DEALLOCATE temp_cursor
--************************************************************************************************************************************************************************************
CREATE TABLE #NEW_PRODUCT_GROUPS (PRODUCT_GROUP_NAME varchar(255) )	
INSERT INTO #NEW_PRODUCT_GROUPS SELECT PRODUCT_GROUP_NAME FROM v_select_PRODUCT_GROUPS
INSERT INTO OLAP_UPD_DIM ( DIM_NAME , DIM_TYPE , UPD_FLAG )
SELECT PRODUCT_GROUP_NAME , 'Product' AS DIM_TYPE ,  'D' AS UPD_FLAG  FROM #OLD_PRODUCT_GROUPS TEMP_PRODUCT_GROUPS
WHERE  PRODUCT_GROUP_NAME NOT IN 
	( SELECT PRODUCT_GROUP_NAME FROM #NEW_PRODUCT_GROUPS ) 
AND NOT EXISTS(SELECT * FROM OLAP_UPD_DIM WHERE DIM_NAME=TEMP_PRODUCT_GROUPS.PRODUCT_GROUP_NAME AND UPD_FLAG='I')
DELETE OLAP_UPD_DIM 
WHERE DIM_UPD_ID IN 
(SELECT DIM_UPD_ID
FROM  ( SELECT * FROM OLAP_UPD_DIM WHERE OLAP_UPD_DIM.UPD_FLAG='I' AND  DIM_TYPE='Product' ) OLAP_UPD_DIM INNER JOIN (SELECT PRODUCT_GROUP_NAME  FROM #OLD_PRODUCT_GROUPS
				WHERE  PRODUCT_GROUP_NAME NOT IN 
					( SELECT PRODUCT_GROUP_NAME FROM #NEW_PRODUCT_GROUPS ) ) TEMP_PRODUCT_GROUPS

ON OLAP_UPD_DIM.DIM_NAME=TEMP_PRODUCT_GROUPS.PRODUCT_GROUP_NAME
)
INSERT INTO OLAP_UPD_DIM ( DIM_NAME , DIM_TYPE ,  UPD_FLAG )
SELECT PRODUCT_GROUP_NAME , 'Product' AS DIM_TYPE , 'I' AS UPD_FLAG   FROM #NEW_PRODUCT_GROUPS TEMP_PRODUCT_GROUPS
WHERE  PRODUCT_GROUP_NAME NOT IN 
	( SELECT PRODUCT_GROUP_NAME FROM #OLD_PRODUCT_GROUPS ) 
AND NOT EXISTS(SELECT * FROM OLAP_UPD_DIM WHERE DIM_NAME=TEMP_PRODUCT_GROUPS.PRODUCT_GROUP_NAME AND UPD_FLAG='D')
DELETE OLAP_UPD_DIM 
WHERE DIM_UPD_ID IN 
(SELECT DIM_UPD_ID
FROM   ( SELECT * FROM OLAP_UPD_DIM WHERE OLAP_UPD_DIM.UPD_FLAG='D' AND  DIM_TYPE='Product' ) OLAP_UPD_DIM  INNER JOIN  (SELECT PRODUCT_GROUP_NAME  FROM #NEW_PRODUCT_GROUPS
				WHERE  PRODUCT_GROUP_NAME NOT IN 
					( SELECT PRODUCT_GROUP_NAME FROM #OLD_PRODUCT_GROUPS ) ) TEMP_PRODUCT_GROUPS
ON OLAP_UPD_DIM.DIM_NAME=TEMP_PRODUCT_GROUPS.PRODUCT_GROUP_NAME
)
		













---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------






DROP TABLE #OLD_PRODUCT_GROUPS

DROP TABLE #NEW_PRODUCT_GROUPS




--COMMIT TRAN
GO
setuser
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

setuser N'spp'
GO








CREATE PROCEDURE spp.proc_fill_OLAP_SALESCALL
AS

SET NOCOUNT ON


/***********************************/
if exists (select * from dbo.sysobjects where id = object_id(N'[spp].[OLAP_SALESCALL_HIERARCHY]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
drop table [spp].[OLAP_SALESCALL_HIERARCHY]
/***********************************/

/***********************************/
CREATE TABLE [spp].[OLAP_SALESCALL_HIERARCHY] (
	[ATTR_KEY] [varchar] (15)   NOT NULL PRIMARY KEY ,
	[ATTR] [varchar] (50)  NOT NULL ,
	[KEY] [varchar] (50) NOT NULL ,
	[ATTR_NAME] [varchar] (50) NOT NULL ,
	[ATTR_VAL] [varchar] (50) NOT NULL ,
	[DUMMY_LINK_HIERARCHY] smallint NOT NULL
) ON [PRIMARY]
/***********************************/


INSERT INTO OLAP_SALESCALL_HIERARCHY(ATTR_KEY , ATTR , [KEY] , ATTR_NAME , ATTR_VAL, DUMMY_LINK_HIERARCHY)
	select ATTR_KEY , ATTR , [KEY] , ATTR_NAME , ATTR_VAL, DUMMY_LINK_HIERARCHY  from v_olap_salescall_attributes_hierarchy

GO
setuser
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

setuser N'spp'
GO








CREATE procedure spp.proc_fill_OLAP_SELECTION  AS



set nocount on


declare @min_seldate varchar(8)

select @min_seldate=min(date) from olap_date






------------------------------ fill SELECTION DIMS ---------------------------------

EXEC proc_fill_OLAP_SELECTION_DIMS

------------------------------------------------------------------------------------------------





/***********************************/
if exists (select * from dbo.sysobjects where id = object_id(N'[spp].[OLAP_SELECTION]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
drop table [spp].[OLAP_SELECTION]
/***********************************/


---------------------- INSERT INTO SELECTION -----------------------------


select distinct COMSERNO, PRODSERN , SELDATE , CAST(1 as smallint) as INSEL 
into OLAP_SELECTION
from
(select top 100 percent * from OLAP_SELDATE order by seldate) tmp_seldate,
OLAP_LCOMSEL, OLAP_TSELENTR
where 
OLAP_LCOMSEL.selsern=OLAP_TSELENTR.selsern
and OLAP_TSELENTR.selestart=seldate
and not exists(
select * from
OLAP_LCOMSEL OLAP_LCOMSEL2, OLAP_TSELENTR tselentr2
where 
OLAP_LCOMSEL2.selsern=tselentr2.selsern
and tselentr2.selestart<seldate and tselentr2.seleend>=seldate
and OLAP_LCOMSEL.comserno=OLAP_LCOMSEL2.comserno and OLAP_TSELENTR.prodsern=tselentr2.prodsern
)


union all


select distinct COMSERNO, PRODSERN , SELDATE , CAST(-1 as smallint) as INSEL 
from
(select top 100 percent * from OLAP_SELDATE order by seldate) tmp_seldate,
OLAP_LCOMSEL, OLAP_TSELENTR
where 
OLAP_LCOMSEL.selsern=OLAP_TSELENTR.selsern
and OLAP_TSELENTR.seleend=seldate
and not exists(
select * from
OLAP_LCOMSEL OLAP_LCOMSEL2, OLAP_TSELENTR tselentr2
where 
OLAP_LCOMSEL2.selsern=tselentr2.selsern
and tselentr2.selestart<=seldate and tselentr2.seleend>seldate
and OLAP_LCOMSEL.comserno=OLAP_LCOMSEL2.comserno and OLAP_TSELENTR.prodsern=tselentr2.prodsern
)



-----------------------------------------------------------------------------



exec proc_insert_LOG 'creating indexes on OLAP_SELECTION'



CREATE CLUSTERED INDEX IX_OLAP_SELECTION
ON spp.OLAP_SELECTION( COMSERNO , PRODSERN , SELDATE              )

CREATE NONCLUSTERED INDEX  IX_OLAP_SELECTION_SELDATE ON spp.OLAP_SELECTION( SELDATE )

exec proc_insert_LOG 'done'




















declare @PRODSERN varchar(15)
DECLARE @COMSERNO varchar(15)
DECLARE @COMSELCLS varchar(15)
DECLARE @COMSELCLSH bit

DECLARE @SELSERN varchar(15)
DECLARE @SELESERN varchar(15)

DECLARE @prev_position int
DECLARE @position int
DECLARE @ordinal smallint




/***********************************/
if object_id('tempdb..#chain') is not null
	drop table #chain
/***********************************/
CREATE TABLE #chain(CCHSERN varchar(15), ORDINAL smallint , HIER_MEMBER varchar(15) , IS_HIER bit)
/***********************************/



/***********************************/
if object_id('tempdb..#storecls') is not null
	drop table #storecls
/***********************************/
CREATE TABLE #storecls(COMSERNO varchar(15), SELSERN  varchar(15), HIER_MEMBER varchar(15) , CHILD varchar(15) , IS_HIER bit)
/***********************************/



/***********************************/
if object_id('tempdb..#tselectcls') is not null
	drop table #tselectcls
/***********************************/
CREATE TABLE #tselectcls(SELSERN varchar(15), SELESERN  varchar(15),  PRODSERN varchar(15), HIER_MEMBER varchar(15))
/***********************************/



/***********************************/
if object_id('tempdb..#lcompgr') is not null
	drop table #lcompgr
/***********************************/
--CREATE TABLE #lcompgr(COMSERNO varchar(15), PGRSERN varchar(15) , COMSELCLS varchar(15) )
/***********************************/


/***********************************/
if object_id('tempdb..#base_selection') is not null
	drop table #base_selection
/***********************************/
--CREATE TABLE #base_selection(COMSERNO varchar(15), PRODSERN varchar(15), SELESTART varchar(8), SELEEND varchar(8))
/***********************************/





SELECT COMSERNO , PGRSERN , COMSELCLS
INTO #lcompgr
FROM LCOMPGR





/***********************************/
CREATE CLUSTERED INDEX ix_tmp_storecls
ON #storecls(SELSERN , COMSERNO , CHILD )
--ON #storecls(SELSERN , COMSERNO , HIER_MEMBER )
/***********************************/


/***********************************/
CREATE CLUSTERED INDEX ix_tmp_tselectcls_keys
ON #tselectcls(SELSERN , PRODSERN )
/***********************************/



/***********************************/
CREATE CLUSTERED INDEX ix_tmp_lcompgr_keys
ON #lcompgr(COMSERNO , PGRSERN , COMSELCLS )
/***********************************/





DECLARE temp_cursor CURSOR FOR
SELECT COMSERNO ,REPLACE(COMSELCLS , ' ' , '') AS  COMSELCLS, 
CASE COMSELCLSH 
	WHEN '1' THEN 1
	ELSE 0
END AS COMSELCLSH
FROM TCOMPANY WHERE LEN(REPLACE(COMSELCLS , ' ' , ''))>0

OPEN temp_cursor

FETCH NEXT FROM temp_cursor INTO @COMSERNO , @COMSELCLS , @COMSELCLSH

WHILE @@FETCH_STATUS=0
	BEGIN
		SET @ordinal=1

		SET @prev_position=1
		SET @position=CHARINDEX(',' , @COMSELCLS ,  @prev_position)
		
		------------------------------
		IF @position=0
			INSERT INTO #chain(CCHSERN , ORDINAL , HIER_MEMBER , IS_HIER)
				VALUES(@COMSERNO , @ordinal , @COMSELCLS , @COMSELCLSH )

		------------------------------
		WHILE @position>0
			BEGIN
				INSERT INTO #chain(CCHSERN , ORDINAL , HIER_MEMBER , IS_HIER)
					VALUES(@COMSERNO , @ordinal , SUBSTRING(@COMSELCLS , @prev_position, @position-@prev_position) , @COMSELCLSH )


				SET @prev_position=@position+1
				SET @position=CHARINDEX(',' , @COMSELCLS ,  @prev_position)
				
				SET @ordinal=@ordinal+1
			END

		------------------------------

		IF @prev_position>1 AND @position=0
			INSERT INTO #chain(CCHSERN , ORDINAL , HIER_MEMBER , IS_HIER)
				VALUES(@COMSERNO , @ordinal , SUBSTRING(@COMSELCLS , @prev_position, LEN(@COMSELCLS)-@prev_position+1) , @COMSELCLSH )



		

		FETCH NEXT FROM temp_cursor INTO @COMSERNO , @COMSELCLS , @COMSELCLSH


	END

CLOSE temp_cursor
DEALLOCATE temp_cursor


INSERT INTO #storecls (COMSERNO , SELSERN , HIER_MEMBER, CHILD , IS_HIER)
select distinct COMSERN2 AS COMSERNO , SELSERN , chain.HIER_MEMBER, chain.CHILD , chain.IS_HIER 
from 
(
select parent.cchsern , parent.ordinal , parent.hier_member , children.hier_member as child , parent.is_hier from  #chain parent ,  #chain children 
where parent.cchsern=children.cchsern and ( ( parent.is_hier=1 and parent.ordinal<=children.ordinal) or (  parent.is_hier=0 and parent.ordinal=children.ordinal )  )
) chain
inner join lcomcom on lcomcom.comsern1=chain.cchsern and UPPER(lcomcom.lcomatr1)='CHAIN'
inner join OLAP_LCOMSEL on OLAP_LCOMSEL.comserno=lcomcom.comsern2


















DECLARE temp_cursor CURSOR FOR
SELECT SELSERN, SELESERN , PRODSERN , REPLACE(SELCLS , ' ' , '') AS  COMSELCLS
FROM TSELENTR WHERE LEN(REPLACE(SELCLS , ' ' , ''))>0

OPEN temp_cursor

FETCH NEXT FROM temp_cursor INTO @SELSERN, @SELESERN , @PRODSERN , @COMSELCLS 

WHILE @@FETCH_STATUS=0
	BEGIN
		SET @ordinal=1

		SET @prev_position=1
		SET @position=CHARINDEX(',' , @COMSELCLS ,  @prev_position)
		
		------------------------------
		IF @position=0
			INSERT INTO #tselectcls(SELSERN, SELESERN, PRODSERN  , HIER_MEMBER )
				VALUES(@SELSERN, @SELESERN, @PRODSERN , @COMSELCLS )

		------------------------------
		WHILE @position>0
			BEGIN
				INSERT INTO #tselectcls(SELSERN, SELESERN, PRODSERN , HIER_MEMBER )
					VALUES(@SELSERN, @SELESERN, @PRODSERN  , SUBSTRING(@COMSELCLS , @prev_position, @position-@prev_position)  )


				SET @prev_position=@position+1
				SET @position=CHARINDEX(',' , @COMSELCLS ,  @prev_position)
				
				SET @ordinal=@ordinal+1
			END

		------------------------------

		IF @prev_position>1 AND @position=0
			INSERT INTO #tselectcls(SELSERN , SELESERN, PRODSERN  , HIER_MEMBER )
				VALUES(@SELSERN, @SELESERN, @PRODSERN  , SUBSTRING(@COMSELCLS , @prev_position, LEN(@COMSELCLS)-@prev_position+1) )



		

		FETCH NEXT FROM temp_cursor INTO @SELSERN, @SELESERN, @PRODSERN , @COMSELCLS 


	END

CLOSE temp_cursor
DEALLOCATE temp_cursor


delete from #tselectcls where selesern not in (select selesern from OLAP_TSELENTR)



















/***********************************/
if exists (select * from dbo.sysobjects where id = object_id(N'[spp].[OLAP_BASE_SELECTION]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
drop table [spp].[OLAP_BASE_SELECTION]
/***********************************/



--------------------------  INSERT INTO BASE SELECTION -----------------------------

select distinct COMSERNO, PRODSERN , SELDATE , CAST(1 as smallint) as INSEL 
into OLAP_BASE_SELECTION
from
(select top 100 percent * from OLAP_SELDATE order by seldate) tmp_seldate,
OLAP_LCOMSEL, OLAP_TSELENTR
where 
OLAP_LCOMSEL.selsern=OLAP_TSELENTR.selsern
and OLAP_TSELENTR.selestart=seldate
and exists(select * from #tselectcls where #tselectcls.selsern=OLAP_LCOMSEL.selsern and #tselectcls.prodsern=OLAP_TSELENTR.prodsern  
	and exists( select * from #storecls where #storecls.selsern=OLAP_LCOMSEL.selsern and #storecls.comserno=OLAP_LCOMSEL.comserno and #tselectcls.hier_member=#storecls.child
		and exists(select * from lpropgr where lpropgr.prodsern=OLAP_TSELENTR.prodsern 
		and exists(select * from #lcompgr where #lcompgr.pgrsern=lpropgr.pgrsern and #lcompgr.comserno=OLAP_LCOMSEL.comserno and #lcompgr.comselcls=#storecls.hier_member) )  ) )

and not exists(
select * from
OLAP_LCOMSEL OLAP_LCOMSEL2, OLAP_TSELENTR tselentr2
where 
OLAP_LCOMSEL2.selsern=tselentr2.selsern
and tselentr2.selestart<seldate and tselentr2.seleend>=seldate
and OLAP_LCOMSEL.comserno=OLAP_LCOMSEL2.comserno and OLAP_TSELENTR.prodsern=tselentr2.prodsern
and exists(select * from #tselectcls where #tselectcls.selsern=OLAP_LCOMSEL2.selsern and #tselectcls.prodsern=tselentr2.prodsern  
	and exists( select * from #storecls where #storecls.selsern=OLAP_LCOMSEL2.selsern and #storecls.comserno=OLAP_LCOMSEL2.comserno and #tselectcls.hier_member=#storecls.child
		and exists(select * from lpropgr where lpropgr.prodsern=tselentr2.prodsern 
			and exists(select * from #lcompgr where #lcompgr.pgrsern=lpropgr.pgrsern and #lcompgr.comserno=OLAP_LCOMSEL2.comserno and #lcompgr.comselcls=#storecls.hier_member) )  ) )

)


union all


select distinct COMSERNO, PRODSERN , SELDATE , CAST(-1 as smallint) as INSEL
from
(select top 100 percent * from OLAP_SELDATE order by seldate) tmp_seldate,
OLAP_LCOMSEL, OLAP_TSELENTR
where 
OLAP_LCOMSEL.selsern=OLAP_TSELENTR.selsern
and OLAP_TSELENTR.seleend=seldate
and exists(select * from #tselectcls where #tselectcls.selsern=OLAP_LCOMSEL.selsern and #tselectcls.prodsern=OLAP_TSELENTR.prodsern  
	and exists( select * from #storecls where #storecls.selsern=OLAP_LCOMSEL.selsern and #storecls.comserno=OLAP_LCOMSEL.comserno and #tselectcls.hier_member=#storecls.child
		and exists(select * from lpropgr where lpropgr.prodsern=OLAP_TSELENTR.prodsern 
			and exists(select * from #lcompgr where #lcompgr.pgrsern=lpropgr.pgrsern and #lcompgr.comserno=OLAP_LCOMSEL.comserno and #lcompgr.comselcls=#storecls.hier_member) )  ) )

and not exists(
select * from
OLAP_LCOMSEL OLAP_LCOMSEL2, OLAP_TSELENTR tselentr2
where 
OLAP_LCOMSEL2.selsern=tselentr2.selsern
and tselentr2.selestart<=seldate and tselentr2.seleend>seldate
and OLAP_LCOMSEL.comserno=OLAP_LCOMSEL2.comserno and OLAP_TSELENTR.prodsern=tselentr2.prodsern
and exists(select * from #tselectcls where #tselectcls.selsern=OLAP_LCOMSEL2.selsern and #tselectcls.prodsern=tselentr2.prodsern  
	and exists( select * from #storecls where #storecls.selsern=OLAP_LCOMSEL2.selsern and #storecls.comserno=OLAP_LCOMSEL2.comserno and #tselectcls.hier_member=#storecls.child
		and exists(select * from lpropgr where lpropgr.prodsern=tselentr2.prodsern 
			and exists(select * from #lcompgr where #lcompgr.pgrsern=lpropgr.pgrsern and #lcompgr.comserno=OLAP_LCOMSEL2.comserno and #lcompgr.comselcls=#storecls.hier_member) )  ) )


)



----------------------------------------------------------------------------------------------------------------








exec proc_insert_LOG 'creating indexes on OLAP_BASE_SELECTION'



CREATE CLUSTERED INDEX IX_OLAP_BASE_SELECTION
ON spp.OLAP_BASE_SELECTION( COMSERNO , PRODSERN , SELDATE              )

CREATE NONCLUSTERED INDEX  IX_OLAP_BASE_SELECTION_SELDATE ON spp.OLAP_BASE_SELECTION( SELDATE )

exec proc_insert_LOG 'done'



DROP TABLE #storecls
DROP TABLE #tselectcls
DROP TABLE #chain
DROP TABLE #lcompgr




GO
setuser
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

setuser N'spp'
GO





CREATE procedure spp.proc_fill_OLAP_SELECTION_DIMS  AS



set nocount on


declare @min_seldate varchar(8)

select @min_seldate=min(date) from olap_date







/***********************************/
if exists (select * from dbo.sysobjects where id = object_id(N'[spp].[OLAP_SELDATE]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
drop table [spp].[OLAP_SELDATE]
/***********************************/

/***********************************/
create table spp.OLAP_SELDATE(SELDATE varchar(8) PRIMARY KEY)
/***********************************/




if object_id('tempdb..#seldate') is not null
	drop table #seldate



/***********************************/
if exists (select * from dbo.sysobjects where id = object_id(N'[spp].[OLAP_TSELENTR]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
drop table [spp].[OLAP_TSELENTR]
/***********************************/

/***********************************/
create table spp.OLAP_TSELENTR(
	SELSERN varchar(15) , 
	SELESERN varchar(15) , 
	PRODSERN varchar(15) , 
	SELESTART varchar(8) , 
	SELEEND varchar(8) , 
	SELE_VALID_RANGE_SERN numeric ,
	SELE_VALID_START varchar(8) , 
	SELE_VALID_END varchar(8)  , 
	SELE_PURCH_PRICE_NET numeric(19,4) , 
	SELE_PURCH_PRICE_GROSS numeric(19,4), 
	SELE_CONS_PRICE_NET  numeric(19,4), 
	SELE_CONS_PRICE_GROSS numeric(19,4) ,
	SELE_MARGIN numeric(19,4)
	 )
/***********************************/











/***********************************/
if exists (select * from dbo.sysobjects where id = object_id(N'[spp].[OLAP_SELRANGE]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
drop table [spp].[OLAP_SELRANGE]
/***********************************/

/***********************************/
CREATE TABLE [spp].[OLAP_SELRANGE] (
	[SELE_VALID_RANGE_SERN] numeric  NOT NULL IDENTITY(1,1) PRIMARY KEY,
	[SELE_VALID_START] [varchar] (8)   NOT NULL,
	[SELE_VALID_END] [varchar] (8)   NOT NULL
) ON [PRIMARY]
/***********************************/

/***********************************/
CREATE NONCLUSTERED INDEX IX_OLAP_SELRANGE
ON spp.OLAP_SELRANGE(SELE_VALID_START , SELE_VALID_END)
/***********************************/










/***********************************/
if exists (select * from dbo.sysobjects where id = object_id(N'[spp].[OLAP_LCOMSEL]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
drop table [spp].[OLAP_LCOMSEL]
/***********************************/

/***********************************/
create table spp.OLAP_LCOMSEL(SELSERN varchar(15) , COMSERNO varchar(15) , SALMSERN varchar(15) )
/***********************************/









insert into OLAP_TSELENTR(selsern , selesern , prodsern , selestart , seleend , sele_valid_start , sele_valid_end , SELE_PURCH_PRICE_NET , SELE_PURCH_PRICE_GROSS , SELE_CONS_PRICE_NET , SELE_CONS_PRICE_GROSS , SELE_MARGIN  )
select tselect.selsern , selesern ,  tselentr.prodsern ,
CASE
	WHEN TSELECT.SELSTART>=TSELENTR.SELESTART AND TSELECT.SELSTART<=TSELECT.SELEND  AND TSELECT.SELSTART<=TSELENTR.SELEEND THEN 
		(CASE TSELECT.SELSTART
			WHEN '00000000' THEN @min_seldate
			ELSE TSELECT.SELSTART 
		END)
	WHEN TSELENTR.SELESTART>TSELECT.SELSTART AND TSELENTR.SELESTART<=TSELECT.SELEND AND TSELENTR.SELESTART<=TSELENTR.SELEEND THEN 
		(CASE TSELENTR.SELESTART
			WHEN '00000000' THEN @min_seldate
			ELSE TSELENTR.SELESTART 
		END)
	ELSE '99999999'
END as selestart,
CASE
	WHEN TSELECT.SELEND<=TSELENTR.SELEEND AND TSELECT.SELEND>=TSELECT.SELSTART AND TSELECT.SELEND>=SELESTART THEN 
		(CASE 
			WHEN TSELECT.SELEND='99999999' THEN '99999999'
			WHEN ISDATE(TSELECT.SELEND)=1 THEN  convert(varchar(8) , DATEADD(d , 1 , CONVERT(datetime , TSELECT.SELEND) )  , 112)  
			ELSE '00000000'
		END)
	WHEN TSELENTR.SELEEND<=TSELECT.SELEND AND TSELENTR.SELEEND>=TSELECT.SELSTART AND TSELENTR.SELEEND>=TSELENTR.SELESTART THEN 
		(CASE 
			WHEN TSELENTR.SELEEND='99999999' THEN '99999999'
			WHEN ISDATE(TSELENTR.SELEEND)=1 THEN  convert(varchar(8) , DATEADD(d , 1 , CONVERT(datetime , TSELENTR.SELEEND) )  , 112)  
			ELSE '00000000'
		END)
	ELSE '00000000'
END as seleend ,
CASE
	WHEN TSELECT.SELSTART>=TSELENTR.SELESTART AND TSELECT.SELSTART<=TSELECT.SELEND  AND TSELECT.SELSTART<=TSELENTR.SELEEND THEN 
		(CASE TSELECT.SELSTART
			WHEN '00000000' THEN @min_seldate
			ELSE TSELECT.SELSTART 
		END)
	WHEN TSELENTR.SELESTART>TSELECT.SELSTART AND TSELENTR.SELESTART<=TSELECT.SELEND AND TSELENTR.SELESTART<=TSELENTR.SELEEND THEN 
		(CASE TSELENTR.SELESTART
			WHEN '00000000' THEN @min_seldate
			ELSE TSELENTR.SELESTART 
		END)
	ELSE '99999999'
END as sele_valid_start,
CASE
	WHEN TSELECT.SELEND<=TSELENTR.SELEEND AND TSELECT.SELEND>=TSELECT.SELSTART AND TSELECT.SELEND>=SELESTART THEN 
		(CASE TSELECT.SELEND
			WHEN '99999999' THEN '99999999'
			ELSE TSELECT.SELEND
		END)
	WHEN TSELENTR.SELEEND<=TSELECT.SELEND AND TSELENTR.SELEEND>=TSELECT.SELSTART AND TSELENTR.SELEEND>=TSELENTR.SELESTART THEN 
		(CASE TSELENTR.SELEEND
			WHEN '99999999' THEN '99999999'
			ELSE TSELECT.SELEND
		END)
	ELSE '00000000'
END as sele_valid_end ,
CASE
	WHEN TSELENTR.SELEPRFLAG!='1' AND TSELENTR.SELEPRTAX!='1'  THEN SELEPRICE							--per cons pkg without tax
	WHEN TSELENTR.SELEPRFLAG!='1' AND TSELENTR.SELEPRTAX='1'  AND SELETAX>=0 THEN SELEPRICE/(1+SELETAX/100)				--per cons pkg with tax and tax is here
	WHEN TSELENTR.SELEPRFLAG!='1' AND TSELENTR.SELEPRTAX='1'  AND SELETAX<0 THEN SELEPRICE/(1+OLAP_LPROPROD.PRODTAX/100)		--per cons pkg with tax and tax is in product
	WHEN TSELENTR.SELEPRFLAG='1' AND TSELENTR.SELEPRTAX!='1'  THEN SELEPRICE/(CASE WHEN SELECSIZE=0 THEN 1 ELSE SELECSIZE END)						--per case without tax
	WHEN TSELENTR.SELEPRFLAG='1' AND TSELENTR.SELEPRTAX='1'  AND SELETAX>=0 THEN (SELEPRICE/(1+SELETAX/100))/(CASE WHEN SELECSIZE=0 THEN 1 ELSE SELECSIZE END)		--per case with tax and tax is here
	WHEN TSELENTR.SELEPRFLAG='1' AND TSELENTR.SELEPRTAX='1'  AND SELETAX<0 THEN (SELEPRICE/(1+OLAP_LPROPROD.PRODTAX/100))/(CASE WHEN SELECSIZE=0 THEN 1 ELSE SELECSIZE END)	--per case with tax and tax is in product
END AS SELE_PURCH_PRICE_NET ,
CASE
	WHEN TSELENTR.SELEPRFLAG!='1' AND TSELENTR.SELEPRTAX!='1' AND SELETAX>=0 THEN  SELEPRICE*(1+SELETAX/100)				--per cons pkg without tax and tax is here
	WHEN TSELENTR.SELEPRFLAG!='1' AND TSELENTR.SELEPRTAX!='1' AND SELETAX<0 THEN  SELEPRICE*(1+OLAP_LPROPROD.PRODTAX/100)		--per cons pkg without tax and tax is in product
	WHEN TSELENTR.SELEPRFLAG!='1' AND TSELENTR.SELEPRTAX='1' THEN SELEPRICE								--per cons pkg with tax
	WHEN (TSELENTR.SELEPRFLAG='1' AND SELECSIZE>0) AND TSELENTR.SELEPRTAX!='1'  AND SELETAX>=0 THEN   (SELEPRICE*(1+SELETAX/100))/(CASE WHEN SELECSIZE=0 THEN 1 ELSE SELECSIZE END)		--per case without tax and tax is here
	WHEN (TSELENTR.SELEPRFLAG='1' AND SELECSIZE>0) AND TSELENTR.SELEPRTAX!='1'  AND SELETAX<0 THEN   (SELEPRICE*(1+OLAP_LPROPROD.PRODTAX/100))/(CASE WHEN SELECSIZE=0 THEN 1 ELSE SELECSIZE END)--per case without tax and tax is in product
	WHEN (TSELENTR.SELEPRFLAG='1' AND SELECSIZE>0) AND TSELENTR.SELEPRTAX='1' THEN SELEPRICE/(CASE WHEN SELECSIZE=0 THEN 1 ELSE SELECSIZE END)						--per case with tax
	ELSE 0
END AS SELE_PURCH_PRICE_GROSS ,
CASE
	WHEN TSELENTR.SELEPRFLAG!='1' AND TSELENTR.SELEPRTAX!='1'  THEN SELECONPR							--per cons pkg without tax
	WHEN TSELENTR.SELEPRFLAG!='1' AND TSELENTR.SELEPRTAX='1'  AND SELETAX>=0 THEN SELECONPR/(1+SELETAX/100)				--per cons pkg with tax and tax is here
	WHEN TSELENTR.SELEPRFLAG!='1' AND TSELENTR.SELEPRTAX='1'  AND SELETAX<0 THEN SELECONPR/(1+OLAP_LPROPROD.PRODTAX/100)		--per cons pkg with tax and tax is in product
	WHEN (TSELENTR.SELEPRFLAG='1' AND SELECSIZE>0) AND TSELENTR.SELEPRTAX!='1'  THEN SELECONPR/(CASE WHEN SELECSIZE=0 THEN 1 ELSE SELECSIZE END)						--per case without tax
	WHEN (TSELENTR.SELEPRFLAG='1' AND SELECSIZE>0) AND TSELENTR.SELEPRTAX='1'  AND SELETAX>=0 THEN (SELECONPR/(1+SELETAX/100))/(CASE WHEN SELECSIZE=0 THEN 1 ELSE SELECSIZE END)		--per case with tax and tax is here
	WHEN (TSELENTR.SELEPRFLAG='1' AND SELECSIZE>0) AND TSELENTR.SELEPRTAX='1'  AND SELETAX<0 THEN (SELECONPR/(1+OLAP_LPROPROD.PRODTAX/100))/(CASE WHEN SELECSIZE=0 THEN 1 ELSE SELECSIZE END)	--per case with tax and tax is in product
	ELSE 0
END AS SELE_CONS_PRICE_NET ,
CASE
	WHEN TSELENTR.SELEPRFLAG!='1' AND TSELENTR.SELEPRTAX!='1' AND SELETAX>=0 THEN  SELECONPR*(1+SELETAX/100)				--per cons pkg without tax and tax is here
	WHEN TSELENTR.SELEPRFLAG!='1' AND TSELENTR.SELEPRTAX!='1' AND SELETAX<0 THEN  SELECONPR*(1+OLAP_LPROPROD.PRODTAX/100)		--per cons pkg without tax and tax is in product
	WHEN TSELENTR.SELEPRFLAG!='1' AND TSELENTR.SELEPRTAX='1' THEN SELECONPR								--per cons pkg with tax
	WHEN (TSELENTR.SELEPRFLAG='1' AND SELECSIZE>0) AND TSELENTR.SELEPRTAX!='1'  AND SELETAX>=0 THEN   (SELECONPR*(1+SELETAX/100))/(CASE WHEN SELECSIZE=0 THEN 1 ELSE SELECSIZE END)		--per case without tax and tax is here
	WHEN (TSELENTR.SELEPRFLAG='1' AND SELECSIZE>0) AND TSELENTR.SELEPRTAX!='1'  AND SELETAX<0 THEN   (SELECONPR*(1+OLAP_LPROPROD.PRODTAX/100))/(CASE WHEN SELECSIZE=0 THEN 1 ELSE SELECSIZE END)--per case without tax and tax is in product
	WHEN (TSELENTR.SELEPRFLAG='1' AND SELECSIZE>0) AND TSELENTR.SELEPRTAX='1' THEN SELECONPR/(CASE WHEN SELECSIZE=0 THEN 1 ELSE SELECSIZE END)						--per case with tax
	ELSE 0
END AS SELE_CONS_PRICE_GROSS ,
CASE
	WHEN TSELENTR.SELEPRFLAG!='1' AND TSELENTR.SELEPRTAX!='1' AND SELETAX>=0 THEN  SELECONPR*(1+SELETAX/100)-SELEPRICE*(1+SELETAX/100)							--per cons pkg without tax and tax is here
	WHEN TSELENTR.SELEPRFLAG!='1' AND TSELENTR.SELEPRTAX!='1' AND SELETAX<0 THEN  SELECONPR*(1+OLAP_LPROPROD.PRODTAX/100)-SELEPRICE*(1+OLAP_LPROPROD.PRODTAX/100)		--per cons pkg without tax and tax is in product
	WHEN TSELENTR.SELEPRFLAG!='1' AND TSELENTR.SELEPRTAX='1' THEN SELECONPR-SELEPRICE														--per cons pkg with tax
	WHEN (TSELENTR.SELEPRFLAG='1' AND SELECSIZE>0) AND TSELENTR.SELEPRTAX!='1'  AND SELETAX>=0 THEN   (SELECONPR*(1+SELETAX/100))/(CASE WHEN SELECSIZE=0 THEN 1 ELSE SELECSIZE END)-(SELEPRICE*(1+SELETAX/100))/(CASE WHEN SELECSIZE=0 THEN 1 ELSE SELECSIZE END)	--per case without tax and tax is here
	WHEN (TSELENTR.SELEPRFLAG='1' AND SELECSIZE>0) AND TSELENTR.SELEPRTAX!='1'  AND SELETAX<0 THEN   (SELECONPR*(1+OLAP_LPROPROD.PRODTAX/100))/(CASE WHEN SELECSIZE=0 THEN 1 ELSE SELECSIZE END)-(SELEPRICE*(1+OLAP_LPROPROD.PRODTAX/100))/(CASE WHEN SELECSIZE=0 THEN 1 ELSE SELECSIZE END) --per case without tax and tax is in product
	WHEN (TSELENTR.SELEPRFLAG='1' AND SELECSIZE>0) AND TSELENTR.SELEPRTAX='1' THEN SELECONPR/(CASE WHEN SELECSIZE=0 THEN 1 ELSE SELECSIZE END)	-SELEPRICE/(CASE WHEN SELECSIZE=0 THEN 1 ELSE SELECSIZE END)								--per case with tax
	ELSE 0
END AS SELE_MARGIN
from 
(SELECT SELSERN , ISNULL(SELSTART,'00000000') AS SELSTART , ISNULL(SELEND,'00000000') AS SELEND, SELTYPE FROM TSELECT) TSELECT 
INNER JOIN 
(SELECT SELSERN, PRODSERN, SELESERN,  ISNULL(SELESTART,'00000000') AS SELESTART , ISNULL(SELEEND,'00000000') AS SELEEND, SELEPRFLAG,  SELECSIZE , SELETAX , SELEPRTAX , SELECONPR , SELEPRICE FROM TSELENTR) TSELENTR
on  TSELECT.SELSERN=TSELENTR.SELSERN
INNER JOIN spp.OLAP_LPROPROD OLAP_LPROPROD 
ON TSELENTR.PRODSERN=OLAP_LPROPROD.PARENT_PRODSERN
WHERE 
OLAP_LPROPROD.PARENT_PRODSERN=OLAP_LPROPROD.PRODSERN
AND TSELECT.SELTYPE='0'




delete from OLAP_TSELENTR where selestart='99999999' or seleend='00000000'





INSERT INTO OLAP_SELRANGE(SELE_VALID_START , SELE_VALID_END)
	SELECT DISTINCT SELE_VALID_START , SELE_VALID_END FROM OLAP_TSELENTR ORDER BY SELE_VALID_START


IF NOT EXISTS(SELECT * FROM OLAP_SELRANGE)
	INSERT INTO OLAP_SELRANGE(SELE_VALID_START , SELE_VALID_END)
	VALUES ('00000000' , '00000000')




UPDATE OLAP_TSELENTR
	SET OLAP_TSELENTR.SELE_VALID_RANGE_SERN=OLAP_SELRANGE.SELE_VALID_RANGE_SERN
	FROM OLAP_TSELENTR, OLAP_SELRANGE
	WHERE OLAP_TSELENTR.SELE_VALID_START=OLAP_SELRANGE.SELE_VALID_START
	AND OLAP_TSELENTR.SELE_VALID_END=OLAP_SELRANGE.SELE_VALID_END




create clustered index ix_tmp_tselentr_keys
on OLAP_TSELENTR(selsern , prodsern)

create nonclustered index ix_tmp_tselentr_selestart
on OLAP_TSELENTR(selestart)

create nonclustered index ix_tmp_tselentr_seleend
on OLAP_TSELENTR(seleend)






insert into OLAP_SELDATE(SELDATE)
	select distinct selestart from OLAP_TSELENTR
	union
	select distinct seleend from OLAP_TSELENTR where seleend<>'99999999'












insert into OLAP_LCOMSEL(SELSERN , COMSERNO , SALMSERN )
	select distinct 
	SELSERN ,
	COMSERNO , 
	CASE LEN(SALMSERN)
		WHEN 15 THEN  SALMSERN
		ELSE  '0'
	END AS SALMSERN
	from lcomsel where seltype='0'


create clustered index ix_tmp_olap_lcomsel_keys
on OLAP_LCOMSEL(selsern , comserno)


create nonclustered index ix_tmp_olap_lcomsel_comserno
on OLAP_LCOMSEL(comserno)



GO
setuser
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

setuser N'spp'
GO













CREATE PROCEDURE [spp].[proc_fill_OLAP_STORE] AS

DECLARE @COMSERNO varchar(15)
DECLARE @SALMNAME varchar(30)
DECLARE @COMNAME varchar(30)

DECLARE @command_string varchar(8000)
DECLARE @command_string_salesforce  varchar(8000)

DECLARE @UGRPSERN varchar(15)
DECLARE @UGRPNAME varchar(15)


DECLARE @PGRSERN varchar(15)
DECLARE @SALMSERN varchar(15)


DECLARE @USERNAME varchar(30)

DECLARE @STORE_GROUP_NAME varchar(50)
DECLARE @NEW_STORE_GROUP_NAME varchar(50)
DECLARE @TEMP_STORE_GROUP_NAME varchar(50)

DECLARE @CURRENT_ASCII_CODE tinyint

DECLARE @SQL_SRVR_VERSION tinyint

DECLARE @TEMP_COUNTER int

DECLARE @position int

DECLARE @COLUMN_NAME varchar(100)

SET NOCOUNT ON 



--BEGIN TRAN


if object_id('tempdb..#comserno_table') is not null
	drop table #comserno_table

if object_id('tempdb..#salmsern_table') is not null
	drop table #salmsern_table

if object_id('tempdb..#OLD_STORE_GROUPS') is not null
	drop table #OLD_STORE_GROUPS

if object_id('tempdb..#NEW_STORE_GROUPS') is not null
	drop table #NEW_STORE_GROUPS

CREATE TABLE #OLD_STORE_GROUPS(STORE_GROUP_NAME varchar(255)  , DIM_TYPE varchar(30))
/*
INSERT INTO #OLD_STORE_GROUPS SELECT STORE_GROUP_NAME , 'Store Salesforce' AS DIM_TYPE FROM v_select_salesman_groups
INSERT INTO #OLD_STORE_GROUPS SELECT STORE_GROUP_NAME , 'Salesforce' AS DIM_TYPE FROM v_select_salesman_groups
*/
INSERT INTO #OLD_STORE_GROUPS SELECT STORE_GROUP_NAME , 'Store' AS DIM_TYPE FROM v_select_store_groups



/***********************************/
if exists (select * from dbo.sysobjects where id = object_id(N'[spp].[OLAP_CCH]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
drop table [spp].[OLAP_CCH]
/***********************************/


/***********************************/
if exists (select * from dbo.sysobjects where id = object_id(N'[spp].[OLAP_CHN]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
drop table [spp].[OLAP_CHN]
/***********************************/




/***********************************/
if exists (select * from dbo.sysobjects where id = object_id(N'[spp].[OLAP_STORE]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
drop table [spp].[OLAP_STORE]
/***********************************/

/***********************************/
if exists (select * from dbo.sysobjects where id = object_id(N'[spp].[OLAP_STORE_CORRUPT]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
drop table [spp].[OLAP_STORE_CORRUPT]
/***********************************/



/***********************************/
if exists (select * from dbo.sysobjects where id = object_id(N'[spp].[OLAP_SALESFORCE]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
drop table [spp].[OLAP_SALESFORCE]
/***********************************/

/***********************************/
if exists (select * from dbo.sysobjects where id = object_id(N'[spp].[OLAP_SALESFORCE_CORRUPT]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
drop table [spp].[OLAP_SALESFORCE_CORRUPT]
/***********************************/



/********************************************************************************************* UNION ****************************************************************************************************/

CREATE TABLE #COMSERNO_TABLE(COMSERNO varchar(15)  PRIMARY KEY)

CREATE TABLE #COMSERNO_ALL_TABLE(COMSERNO varchar(15) )


INSERT INTO #COMSERNO_ALL_TABLE
SELECT  COMSERNO AS COMSERNO
FROM (
select  comserno  from TDELIVER  
union  
select  comserno from TDPMHDR 
union 
select  comserno from TORDER 
union 
select  comserno from  TPLNHDR 
union 
select  comserno from  TSAMERCH
union 
select  comserno from  TCALENTR
union 
select  comserno from  TTARENTR
union 
select  comserno from  TMSASLIP
union 
select  comserno from  TTARENTR
union 
select  comserno from  LCOMSEL
union 
select  comserno from  LSALCOM
) STORES



INSERT INTO #COMSERNO_TABLE
SELECT TCOMPANY.COMSERNO FROM #COMSERNO_ALL_TABLE
INNER JOIN TCOMPANY ON #COMSERNO_ALL_TABLE.COMSERNO=TCOMPANY.COMSERNO








CREATE TABLE #SALMSERN_TABLE(SALMSERN varchar(15)  PRIMARY KEY)

CREATE TABLE #SALMSERN_ALL_TABLE(SALMSERN varchar(15))

INSERT INTO #SALMSERN_ALL_TABLE
SELECT DISTINCT  SALMSERN  AS SALMSERN
FROM (
select  salmsern  from TDELENTR  
union  
select   salmsern from TDPMHDR 
union 
select   salmsern from TORDER 
union 
--select  salmsern from  TPLNHDR 
--union 
select  salmsern from  TSAMERCH
union 
select  salmsern  from  TCALENTR
union
select  salmsern from  TTARENTR
union 
select  salmsern  from  TMSASLIP
union
select salmsern  from  TTARENTR
union 
select  salmsern  from  LCOMSEL
union 
select  salmsern  from  LSALCOM
) SALESMEN



INSERT INTO #SALMSERN_TABLE
SELECT TSALMAN.SALMSERN FROM #SALMSERN_ALL_TABLE
INNER JOIN TSALMAN ON #SALMSERN_ALL_TABLE.SALMSERN=TSALMAN.SALMSERN




/***********************************************************************************************************************************************************************************************************/


/***********************************/
CREATE TABLE [spp].[OLAP_CCH] (
	[COMSERNCCH] [varchar] (15)  NOT NULL PRIMARY KEY ,
	[TGRNAME] [varchar] (50)   NULL DEFAULT 'Default Trade Group' ,
	[CCHNAME] [varchar] (50)   NULL DEFAULT 'Undefined' 
) ON [PRIMARY]
/***********************************/


/***********************************/
CREATE TABLE [spp].[OLAP_CHN] (
	[COMSERNCHN] [varchar] (15)  NOT NULL PRIMARY KEY ,
	[CHNNAME] [varchar] (50)   NULL DEFAULT 'Undefined' 
) ON [PRIMARY]
/***********************************/



/***********************  CREATE TABLE OLAP_STORE + OLAP_SALESFORCE **************************/

SET @command_string='CREATE TABLE [spp].[OLAP_STORE] ('
SET @command_string=@command_string +'[COMSERNO] [varchar] (15)  NOT NULL  PRIMARY KEY '
SET @command_string=@command_string + ' , '
SET @command_string=@command_string +'[NR] int  NOT NULL  IDENTITY(1,1)'
SET @command_string=@command_string + ' , '
SET @command_string=@command_string +'[COMNAME] [varchar] (50)   NULL  DEFAULT ''Undefined''  '
SET @command_string=@command_string + ' , '
SET @command_string=@command_string +'[COMPCODE] [varchar] (10)  NULL DEFAULT ''Undefined''   '
SET @command_string=@command_string + ' , '
SET @command_string=@command_string +'[COMPCITY] [varchar] (30)  NULL DEFAULT ''Undefined''   '
SET @command_string=@command_string + ' , '
SET @command_string=@command_string +'[COMPADDR] [varchar] (40)  NULL DEFAULT ''Undefined''   '
SET @command_string=@command_string + ' , '
SET @command_string=@command_string +'[COMTYNAME] [varchar] (15)  NULL DEFAULT ''Undefined''   '
SET @command_string=@command_string + ' , '
SET @command_string=@command_string +'[COMCLASS] [varchar] (8)    NULL DEFAULT ''Undef''   '
SET @command_string=@command_string + ' , '
SET @command_string=@command_string +'[COMTURNCLS] [varchar] (4)    NULL DEFAULT ''Undf''   '
SET @command_string=@command_string + ' , '
SET @command_string=@command_string +'[TGRNAME] [varchar] (50)   NULL  DEFAULT ''Default Trade Group''   '
SET @command_string=@command_string + ' , '
SET @command_string=@command_string +'[CCHNAME] [varchar] (50)   NULL  DEFAULT ''Undefined''   '
SET @command_string=@command_string + ' , '
SET @command_string=@command_string +'[CHNNAME] [varchar] (50)   NULL  DEFAULT ''Undefined''  '
SET @command_string=@command_string + ' , '
SET @command_string=@command_string +'[COMCALL] [varchar] (3)   NULL  DEFAULT ''No''  '
SET @command_string=@command_string + ' , '
SET @command_string=@command_string +'[COMINACT] [varchar] (8)   NULL  DEFAULT ''99999999''  '





SET @command_string_salesforce='CREATE TABLE [spp].[OLAP_SALESFORCE] ('
SET @command_string_salesforce=@command_string_salesforce +'[SALMSERN] [varchar] (15) '
SET @command_string_salesforce=@command_string_salesforce + ' , '
SET @command_string_salesforce=@command_string_salesforce +'[SALMNAME] [varchar] (30)   NULL DEFAULT ''Undefined''   '
SET @command_string_salesforce=@command_string_salesforce + ' , '
SET @command_string_salesforce=@command_string_salesforce +'[PGRSERN] [varchar] (15)   NULL DEFAULT ''0''  '
SET @command_string_salesforce=@command_string_salesforce + ' , '
SET @command_string_salesforce=@command_string_salesforce +'[DUMMY_LINK_HIERARCHY] [int] NULL  DEFAULT 0  '



IF EXISTS(SELECT * FROM TCOMPANY WHERE COMTEXT1 IS NOT NULL AND LEN(RTRIM(LTRIM(COMTEXT1)))>0 AND COMSERNO IN (SELECT COMSERNO FROM #COMSERNO_TABLE))
	BEGIN
		SET @command_string=@command_string + ' , '
		SET @command_string=@command_string +'[STOREGRP@#@COMTEXT1] [varchar] (30)   NULL  DEFAULT ' + CHAR(39) + 'Undefined' + CHAR(39)
	END

IF EXISTS(SELECT * FROM TCOMPANY WHERE COMTEXT2 IS NOT NULL AND LEN(RTRIM(LTRIM(COMTEXT2)))>0 AND COMSERNO IN (SELECT COMSERNO FROM #COMSERNO_TABLE))
	BEGIN
		SET @command_string=@command_string + ' , '
		SET @command_string=@command_string +'[STOREGRP@#@COMTEXT2] [varchar] (30)   NULL  DEFAULT ' + CHAR(39) + 'Undefined' + CHAR(39)
	END

IF EXISTS(SELECT * FROM TCOMPANY WHERE COMTEXT3 IS NOT NULL AND LEN(RTRIM(LTRIM(COMTEXT3)))>0 AND COMSERNO IN (SELECT COMSERNO FROM #COMSERNO_TABLE))
	BEGIN
		SET @command_string=@command_string + ' , '
		SET @command_string=@command_string +'[STOREGRP@#@COMTEXT3] [varchar] (30)   NULL  DEFAULT ' + CHAR(39) + 'Undefined' + CHAR(39)
	END

IF EXISTS(SELECT * FROM TCOMPANY WHERE COMTEXT4 IS NOT NULL AND LEN(RTRIM(LTRIM(COMTEXT4)))>0 AND COMSERNO IN (SELECT COMSERNO FROM #COMSERNO_TABLE))
	BEGIN
		SET @command_string=@command_string + ' , '
		SET @command_string=@command_string +'[STOREGRP@#@COMTEXT4] [varchar] (30)   NULL  DEFAULT ' + CHAR(39) + 'Undefined' + CHAR(39)
	END

IF EXISTS(SELECT * FROM TCOMPANY WHERE COMTEXT5 IS NOT NULL AND LEN(RTRIM(LTRIM(COMTEXT5)))>0 AND COMSERNO IN (SELECT COMSERNO FROM #COMSERNO_TABLE))
	BEGIN
		SET @command_string=@command_string + ' , '
		SET @command_string=@command_string +'[STOREGRP@#@COMTEXT5] [varchar] (30)   NULL  DEFAULT ' + CHAR(39) + 'Undefined' + CHAR(39)
	END





SET @command_string=@command_string + ') ON [PRIMARY]'

SET @command_string_salesforce=@command_string_salesforce + ') ON [PRIMARY]'




EXECUTE(@command_string)

SET @command_string=REPLACE(@command_string , '[spp].[OLAP_STORE]' , '[spp].[OLAP_STORE_CORRUPT]')
EXECUTE(@command_string )

EXECUTE(@command_string_salesforce)

SET @command_string_salesforce=REPLACE(@command_string_salesforce , '[spp].[OLAP_SALESFORCE]' , '[spp].[OLAP_SALESFORCE_CORRUPT]')
EXECUTE(@command_string_salesforce )


/***********************************/
CREATE NONCLUSTERED INDEX IX_OLAP_STORE_COMINACT
ON spp.OLAP_STORE(COMINACT)
/***********************************/


/***********************************/
CREATE UNIQUE CLUSTERED INDEX IX_OLAP_SALESFORCE_SALMSERN
ON spp.OLAP_SALESFORCE(SALMSERN)

CREATE NONCLUSTERED INDEX IX_OLAP_SALESFORCE_PGRSERN
ON spp.OLAP_SALESFORCE(PGRSERN)
/***********************************/
/***********************************/
CREATE UNIQUE CLUSTERED INDEX IX_OLAP_SALESFORCE_CORRUPT_SALMSERN
ON spp.OLAP_SALESFORCE_CORRUPT(SALMSERN)
/***********************************/




/********************************************************************/
























INSERT INTO OLAP_STORE(COMSERNO , COMNAME, COMPCODE, COMPCITY , COMPADDR,  COMCLASS , COMTURNCLS, COMCALL , COMINACT)
SELECT  TCOMPANY.COMSERNO , CAST(TCOMPANY.COMNAME + '-' + TCOMPANY.COMCODE as varchar(50)) AS COMNAME , 

CASE LEN(LTRIM(TCOMPANY.COMPCODE))
WHEN 0 THEN 'Undefined'
ELSE TCOMPANY.COMPCODE
END AS COMPCODE,

CASE 
	WHEN LEN(LTRIM(TCOMPANY.COMPCITY))>0 THEN TCOMPANY.COMPCITY
	WHEN LEN(LTRIM(TCOMPANY.COMCITY))>0 THEN TCOMPANY.COMCITY
	ELSE 'Undefined'
END AS COMPCITY,

CASE 
	WHEN LEN(LTRIM(TCOMPANY.COMPADDR))>0 THEN TCOMPANY.COMPADDR
	WHEN LEN(LTRIM(TCOMPANY.COMADDR))>0 THEN TCOMPANY.COMADDR
	ELSE 'Undefined'
END AS COMPADDR,

CASE LEN(LTRIM(TCOMPANY.COMCLASS))
WHEN 0 THEN 'Undef'
ELSE TCOMPANY.COMCLASS
END AS COMCLASS ,

CASE LEN(LTRIM(TCOMPANY.COMTURNCLS))
WHEN 0 THEN 'Undf'
ELSE TCOMPANY.COMTURNCLS
END AS COMTURNCLS ,

CASE TCOMPANY.COMCALL
WHEN 1 THEN 'Yes'
ELSE 'No'
END AS COMCALL,

CASE 
WHEN TCOMPANY.COMINACT IS NOT NULL AND ISDATE(TCOMPANY.COMINACT)=1 THEN TCOMPANY.COMINACT
ELSE '99999999'
END AS COMINACT


FROM (SELECT COMSERNO FROM #COMSERNO_TABLE) STORES
INNER JOIN TCOMPANY ON STORES.COMSERNO=TCOMPANY.COMSERNO




IF NOT EXISTS(SELECT * FROM OLAP_STORE WHERE COMSERNO='')
	INSERT INTO OLAP_STORE(COMSERNO , COMNAME)
		SELECT '' AS COMSERNO  , 'Undefined'  AS COMNAME

IF NOT EXISTS(SELECT * FROM OLAP_STORE WHERE COMSERNO='0')
	INSERT INTO OLAP_STORE(COMSERNO , COMNAME)
		SELECT '0' AS COMSERNO  , 'Undefined'  AS COMNAME



INSERT INTO OLAP_STORE_CORRUPT(COMSERNO , COMNAME)
	SELECT COMSERNO , 'Undefined' AS COMNAME FROM #COMSERNO_ALL_TABLE WHERE COMSERNO IS NOT NULL AND COMSERNO NOT IN (SELECT COMSERNO FROM #COMSERNO_TABLE)













INSERT INTO OLAP_SALESFORCE(SALMSERN , SALMNAME , PGRSERN )
	SELECT SALMSERN , SALMNAME , PGRSERN FROM TSALMAN
	WHERE SALMSERN IN (SELECT SALMSERN FROM #SALMSERN_TABLE)
-- !!
INSERT INTO OLAP_SALESFORCE(SALMSERN , SALMNAME , PGRSERN )
	SELECT SALMSERN , 'Undefined' AS SALMNAME , '0' AS PGRSERN FROM #SALMSERN_ALL_TABLE WHERE  NOT EXISTS (SELECT *  FROM #SALMSERN_TABLE WHERE #SALMSERN_TABLE.SALMSERN=#SALMSERN_ALL_TABLE.SALMSERN)


IF NOT EXISTS(SELECT * FROM OLAP_SALESFORCE WHERE SALMSERN='')
	INSERT INTO OLAP_SALESFORCE(SALMSERN , SALMNAME , PGRSERN  )
		VALUES( ''  , 'Undefined' , '')


IF NOT EXISTS(SELECT * FROM OLAP_SALESFORCE WHERE SALMSERN='0')
	INSERT INTO OLAP_SALESFORCE(SALMSERN , SALMNAME , PGRSERN  )
		VALUES( '0'  , 'Undefined' , '0')


IF NOT EXISTS(SELECT * FROM OLAP_SALESFORCE WHERE SALMSERN='-1')
	INSERT INTO OLAP_SALESFORCE(SALMSERN , SALMNAME , PGRSERN  )
		VALUES( '-1'  , 'Intersection' , '-1')




INSERT INTO OLAP_SALESFORCE_CORRUPT(SALMSERN , SALMNAME , PGRSERN )
	SELECT SALMSERN , 'Undefined' AS SALMNAME , '0' AS PGRSERN FROM #SALMSERN_ALL_TABLE WHERE  NOT EXISTS (SELECT *  FROM #SALMSERN_TABLE WHERE #SALMSERN_TABLE.SALMSERN=#SALMSERN_ALL_TABLE.SALMSERN)












--------- DIRECT Central Chain -----

INSERT INTO OLAP_CCH(COMSERNCCH)
SELECT DISTINCT ISNULL(COMSERNCCH,'')  AS COMSERNCCH  FROM
	(
	SELECT  TDELIVER.COMSERNCCH FROM TDELIVER
	UNION
	SELECT  TORDER.COMSERNCCH FROM TORDER
	UNION
	SELECT  TMSASLIP.COMSERNCCH FROM TMSASLIP
	) CCH


UPDATE OLAP_CCH
	SET CCHNAME=ISNULL((SELECT TOP 1 COMNAME FROM TCOMPANY WHERE TCOMPANY.COMSERNO=OLAP_CCH.COMSERNCCH ),CCHNAME)


UPDATE OLAP_CCH
SET TGRNAME=ISNULL(
(SELECT TOP 1 TCOMPANY.COMNAME 
	FROM LCOMCOM INNER JOIN TCOMPANY ON LCOMCOM.COMSERN1=TCOMPANY.COMSERNO 
	WHERE UPPER(LCOMCOM.LCOMATR2)='CENTRAL CHAIN' AND LCOMCOM.COMSERN2=OLAP_CCH.COMSERNCCH
	ORDER BY LCOMCOM.LCOMSTART DESC)
, TGRNAME)




--------- DIRECT Chain -----

INSERT INTO OLAP_CHN(COMSERNCHN)
SELECT DISTINCT ISNULL(COMSERNCHN,'')  AS COMSERNCHN  FROM
	(
	SELECT  TDELIVER.COMSERNCHN FROM TDELIVER
	UNION
	SELECT  TORDER.COMSERNCHN FROM TORDER
	UNION
	SELECT  TMSASLIP.COMSERNCHN FROM TMSASLIP
	) CHN


UPDATE OLAP_CHN
	SET CHNNAME=ISNULL((SELECT TOP 1 COMNAME FROM TCOMPANY WHERE TCOMPANY.COMSERNO=OLAP_CHN.COMSERNCHN),CHNNAME)








/********************** CENTRAL CHAIN **********************/

--central chain through cch->ret
UPDATE OLAP_STORE
SET CCHNAME=ISNULL(
(SELECT TOP 1 TCOMPANY.COMNAME 
	FROM LCOMCOM INNER JOIN TCOMPANY ON LCOMCOM.COMSERN1=TCOMPANY.COMSERNO 
	WHERE UPPER(LCOMCOM.LCOMATR1)='CENTRAL CHAIN' AND LCOMCOM.COMSERN2=OLAP_STORE.COMSERNO
	ORDER BY LCOMCOM.LCOMSTART DESC)
, CCHNAME)


--central chain through cch->chn->ret
UPDATE OLAP_STORE
SET CCHNAME=ISNULL(
(SELECT TOP 1 CCH.COMNAME 
	FROM
	(SELECT COMSERN1 AS CHNSERN , COMSERN2 AS COMSERNO , LCOMSTART  FROM LCOMCOM WHERE UPPER(LCOMCOM.LCOMATR1)='CHAIN' ) CHN_TBL
	INNER JOIN 
	(SELECT COMSERN1 AS CCHSERN , COMSERN2 AS CHNSERN , LCOMSTART FROM LCOMCOM WHERE UPPER(LCOMCOM.LCOMATR1)='CENTRAL CHAIN'  AND UPPER(LCOMCOM.LCOMATR2)='CHAIN'  ) CCH_TBL
	ON CHN_TBL.CHNSERN=CCH_TBL.CHNSERN
	INNER JOIN TCOMPANY CCH ON CCH_TBL.CCHSERN=CCH.COMSERNO
	WHERE CHN_TBL.COMSERNO=OLAP_STORE.COMSERNO
	ORDER BY CCH_TBL.LCOMSTART DESC , CHN_TBL.LCOMSTART DESC)
, CCHNAME)



-- trading group through tgr->cch->ret
UPDATE OLAP_STORE
SET TGRNAME=ISNULL(
(SELECT TOP 1 TGR.COMNAME 
	FROM
	(SELECT COMSERN1 AS CCHSERN , COMSERN2 AS COMSERNO , LCOMSTART FROM LCOMCOM WHERE UPPER(LCOMCOM.LCOMATR1)='CENTRAL CHAIN'  ) CCH_TBL
	INNER JOIN 
	(SELECT COMSERN1 AS TGRSERN , COMSERN2 AS CCHSERN , LCOMSTART FROM LCOMCOM WHERE  UPPER(LCOMCOM.LCOMATR2)='CENTRAL CHAIN'  ) TGR_TBL
	ON TGR_TBL.CCHSERN=CCH_TBL.CCHSERN
	INNER JOIN TCOMPANY TGR ON TGR_TBL.TGRSERN=TGR.COMSERNO
	WHERE CCH_TBL.COMSERNO=OLAP_STORE.COMSERNO
	ORDER BY TGR_TBL.LCOMSTART DESC,  CCH_TBL.LCOMSTART DESC )
, TGRNAME)


-- trading group through tgr->cch->chn->ret
UPDATE OLAP_STORE
SET TGRNAME=ISNULL(
(SELECT TOP 1 TGR.COMNAME 
	FROM
	(SELECT COMSERN1 AS CHNSERN , COMSERN2 AS COMSERNO , LCOMSTART  FROM LCOMCOM WHERE UPPER(LCOMCOM.LCOMATR1)='CHAIN' ) CHN_TBL
	INNER JOIN 
	(SELECT COMSERN1 AS CCHSERN , COMSERN2 AS CHNSERN , LCOMSTART FROM LCOMCOM WHERE UPPER(LCOMCOM.LCOMATR1)='CENTRAL CHAIN'  AND UPPER(LCOMCOM.LCOMATR2)='CHAIN'  ) CCH_TBL
	ON CHN_TBL.CHNSERN=CCH_TBL.CHNSERN
	INNER JOIN 
	(SELECT COMSERN1 AS TGRSERN , COMSERN2 AS CCHSERN , LCOMSTART FROM LCOMCOM WHERE  UPPER(LCOMCOM.LCOMATR2)='CENTRAL CHAIN'  ) TGR_TBL
	ON TGR_TBL.CCHSERN=CCH_TBL.CCHSERN
	INNER JOIN TCOMPANY TGR ON TGR_TBL.TGRSERN=TGR.COMSERNO
	WHERE CHN_TBL.COMSERNO=OLAP_STORE.COMSERNO
	ORDER BY TGR_TBL.LCOMSTART DESC,  CCH_TBL.LCOMSTART DESC , CHN_TBL.LCOMSTART DESC)
, TGRNAME)

/*******************************************************************/





/**************************** CHAIN ******************************/

UPDATE OLAP_STORE
SET CHNNAME=ISNULL(
(SELECT TOP 1 TCOMPANY.COMNAME 
	FROM LCOMCOM INNER JOIN TCOMPANY ON LCOMCOM.COMSERN1=TCOMPANY.COMSERNO 
	WHERE UPPER(LCOMCOM.LCOMATR1)='CHAIN' AND LCOMCOM.COMSERN2=OLAP_STORE.COMSERNO
	ORDER BY LCOMCOM.LCOMSTART DESC)
, CHNNAME)


-- chains that appear as stores will have their names as chain names ---
UPDATE OLAP_STORE
SET OLAP_STORE.CHNNAME=CHAINS.COMNAME
FROM
( SELECT DISTINCT COMSERNO , COMNAME FROM TCOMPANY WHERE COMSERNO IN (SELECT COMSERN1 FROM LCOMCOM WHERE UPPER(LCOMATR1)='CHAIN') ) CHAINS
WHERE OLAP_STORE.COMSERNO=CHAINS.COMSERNO
/*******************************************************************/



/**************************** COMTYNAME ******************************/

UPDATE OLAP_STORE
SET OLAP_STORE.COMTYNAME=ISNULL(
(SELECT TOP 1 COMTYNAME FROM TCOMTYPE WHERE TCOMTYPE.COMSERNO=OLAP_STORE.COMSERNO ORDER BY DATESTAMP DESC)
,COMTYNAME)

/*******************************************************************/





/**************************** COMTEXT1-5 ******************************/

IF EXISTS(SELECT * FROM TCOMPANY WHERE COMTEXT1 IS NOT NULL AND LEN(RTRIM(LTRIM(COMTEXT1)))>0 AND COMSERNO IN (SELECT COMSERNO FROM #COMSERNO_TABLE))
	BEGIN
		EXECUTE ('UPDATE OLAP_STORE
			SET OLAP_STORE.STOREGRP@#@COMTEXT1=TCOMPANY.COMTEXT1 FROM TCOMPANY 
			WHERE OLAP_STORE.COMSERNO=TCOMPANY.COMSERNO AND TCOMPANY.COMTEXT1 IS NOT NULL AND LEN(RTRIM(LTRIM(TCOMPANY.COMTEXT1)))>0')
	END

IF EXISTS(SELECT * FROM TCOMPANY WHERE COMTEXT2 IS NOT NULL AND LEN(RTRIM(LTRIM(COMTEXT2)))>0 AND COMSERNO IN (SELECT COMSERNO FROM #COMSERNO_TABLE))
	BEGIN
		EXECUTE ('UPDATE OLAP_STORE 
			SET OLAP_STORE.STOREGRP@#@COMTEXT2=TCOMPANY.COMTEXT2 FROM TCOMPANY 
			WHERE OLAP_STORE.COMSERNO=TCOMPANY.COMSERNO AND TCOMPANY.COMTEXT2 IS NOT NULL AND LEN(RTRIM(LTRIM(TCOMPANY.COMTEXT2)))>0')
	END

IF EXISTS(SELECT * FROM TCOMPANY WHERE COMTEXT3 IS NOT NULL AND LEN(RTRIM(LTRIM(COMTEXT3)))>0 AND COMSERNO IN (SELECT COMSERNO FROM #COMSERNO_TABLE))
	BEGIN
		EXECUTE ('UPDATE OLAP_STORE 
			SET OLAP_STORE.STOREGRP@#@COMTEXT3=TCOMPANY.COMTEXT3 FROM TCOMPANY 
			WHERE OLAP_STORE.COMSERNO=TCOMPANY.COMSERNO AND TCOMPANY.COMTEXT3 IS NOT NULL AND LEN(RTRIM(LTRIM(TCOMPANY.COMTEXT3)))>0')
	END

IF EXISTS(SELECT * FROM TCOMPANY WHERE COMTEXT4 IS NOT NULL AND LEN(RTRIM(LTRIM(COMTEXT4)))>0 AND COMSERNO IN (SELECT COMSERNO FROM #COMSERNO_TABLE))
	BEGIN
		EXECUTE ('UPDATE OLAP_STORE 
			SET OLAP_STORE.STOREGRP@#@COMTEXT4=TCOMPANY.COMTEXT4 FROM TCOMPANY 
			WHERE OLAP_STORE.COMSERNO=TCOMPANY.COMSERNO AND TCOMPANY.COMTEXT4 IS NOT NULL AND LEN(RTRIM(LTRIM(TCOMPANY.COMTEXT4)))>0')
	END

IF EXISTS(SELECT * FROM TCOMPANY WHERE COMTEXT5 IS NOT NULL AND LEN(RTRIM(LTRIM(COMTEXT5)))>0 AND COMSERNO IN (SELECT COMSERNO FROM #COMSERNO_TABLE))
	BEGIN
		EXECUTE ('UPDATE OLAP_STORE 

			SET OLAP_STORE.STOREGRP@#@COMTEXT5=TCOMPANY.COMTEXT5 FROM TCOMPANY 

			WHERE OLAP_STORE.COMSERNO=TCOMPANY.COMSERNO AND TCOMPANY.COMTEXT5 IS NOT NULL AND LEN(RTRIM(LTRIM(TCOMPANY.COMTEXT5)))>0')
	END

/****************************************************************************/





DROP TABLE #COMSERNO_TABLE

DROP TABLE #SALMSERN_TABLE


DROP TABLE #COMSERNO_ALL_TABLE

DROP TABLE #SALMSERN_ALL_TABLE














CREATE TABLE #NEW_STORE_GROUPS (STORE_GROUP_NAME varchar(255)  , DIM_TYPE varchar(30))
/*
INSERT INTO #NEW_STORE_GROUPS SELECT STORE_GROUP_NAME , 'Store Salesforce' as DIM_TYPE  FROM v_select_salesman_groups
INSERT INTO #NEW_STORE_GROUPS SELECT STORE_GROUP_NAME , 'Salesforce' as DIM_TYPE  FROM v_select_salesman_groups
*/
INSERT INTO #NEW_STORE_GROUPS SELECT STORE_GROUP_NAME , 'Store' as DIM_TYPE  FROM v_select_store_groups




INSERT INTO OLAP_UPD_DIM ( DIM_NAME , DIM_TYPE , UPD_FLAG )
SELECT STORE_GROUP_NAME , DIM_TYPE ,  'D' AS UPD_FLAG  FROM #OLD_STORE_GROUPS TEMP_STORE_GROUPS
WHERE  STORE_GROUP_NAME NOT IN 
	( SELECT STORE_GROUP_NAME FROM #NEW_STORE_GROUPS ) 
AND NOT EXISTS(SELECT * FROM OLAP_UPD_DIM WHERE DIM_NAME=TEMP_STORE_GROUPS.STORE_GROUP_NAME AND UPD_FLAG='I')


/*
DELETE OLAP_UPD_DIM 
WHERE DIM_UPD_ID IN 
(SELECT DIM_UPD_ID
FROM  ( SELECT * FROM OLAP_UPD_DIM WHERE OLAP_UPD_DIM.UPD_FLAG='I' AND DIM_TYPE='Store Salesforce' ) OLAP_UPD_DIM INNER JOIN (SELECT STORE_GROUP_NAME  FROM #OLD_STORE_GROUPS
				WHERE  STORE_GROUP_NAME NOT IN 
					( SELECT STORE_GROUP_NAME FROM #NEW_STORE_GROUPS ) ) TEMP_STORE_GROUPS
ON OLAP_UPD_DIM.DIM_NAME=TEMP_STORE_GROUPS.STORE_GROUP_NAME
)

DELETE OLAP_UPD_DIM 
WHERE DIM_UPD_ID IN 
(SELECT DIM_UPD_ID
FROM  ( SELECT * FROM OLAP_UPD_DIM WHERE OLAP_UPD_DIM.UPD_FLAG='I' AND DIM_TYPE='Salesforce' ) OLAP_UPD_DIM INNER JOIN (SELECT STORE_GROUP_NAME  FROM #OLD_STORE_GROUPS
				WHERE  STORE_GROUP_NAME NOT IN 
					( SELECT STORE_GROUP_NAME FROM #NEW_STORE_GROUPS ) ) TEMP_STORE_GROUPS
ON OLAP_UPD_DIM.DIM_NAME=TEMP_STORE_GROUPS.STORE_GROUP_NAME
)
*/

DELETE OLAP_UPD_DIM 
WHERE DIM_UPD_ID IN 
(SELECT DIM_UPD_ID
FROM  ( SELECT * FROM OLAP_UPD_DIM WHERE OLAP_UPD_DIM.UPD_FLAG='I' AND DIM_TYPE='Store' ) OLAP_UPD_DIM INNER JOIN (SELECT STORE_GROUP_NAME  FROM #OLD_STORE_GROUPS
				WHERE  STORE_GROUP_NAME NOT IN 
					( SELECT STORE_GROUP_NAME FROM #NEW_STORE_GROUPS ) ) TEMP_STORE_GROUPS
ON OLAP_UPD_DIM.DIM_NAME=TEMP_STORE_GROUPS.STORE_GROUP_NAME
)





INSERT INTO OLAP_UPD_DIM ( DIM_NAME , DIM_TYPE , UPD_FLAG )
SELECT STORE_GROUP_NAME , DIM_TYPE ,  'I' AS UPD_FLAG   FROM #NEW_STORE_GROUPS TEMP_STORE_GROUPS
WHERE  STORE_GROUP_NAME NOT IN 
	( SELECT STORE_GROUP_NAME FROM #OLD_STORE_GROUPS ) 
AND NOT EXISTS(SELECT * FROM OLAP_UPD_DIM WHERE DIM_NAME=TEMP_STORE_GROUPS.STORE_GROUP_NAME AND UPD_FLAG='D')






DELETE OLAP_UPD_DIM 
WHERE DIM_UPD_ID IN 
(SELECT DIM_UPD_ID
FROM   ( SELECT * FROM OLAP_UPD_DIM WHERE OLAP_UPD_DIM.UPD_FLAG='D'  AND DIM_TYPE='Store') OLAP_UPD_DIM  INNER JOIN  (SELECT STORE_GROUP_NAME  FROM #NEW_STORE_GROUPS
				WHERE  STORE_GROUP_NAME NOT IN 
					( SELECT STORE_GROUP_NAME FROM #OLD_STORE_GROUPS ) ) TEMP_STORE_GROUPS
ON OLAP_UPD_DIM.DIM_NAME=TEMP_STORE_GROUPS.STORE_GROUP_NAME
)



--COMMIT TRAN











---------------------------------------------- OLAP_STOREACT ------------------------------------------------------------------



/***********************************/
if exists (select * from dbo.sysobjects where id = object_id(N'[spp].[OLAP_STOREACT]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
drop table [spp].[OLAP_STOREACT]
/***********************************/


/***********************************/
CREATE TABLE [spp].[OLAP_STOREACT] (
	[COMSERNO] [varchar] (15)  NOT NULL 
) ON [PRIMARY]
/***********************************/















------------------------------- SALESFORCE_HIERARCHY------------------------------------------------------------------

/***********************************/
if exists (select * from dbo.sysobjects where id = object_id(N'[spp].[OLAP_SALESFORCE_HIERARCHY]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
drop table [spp].[OLAP_SALESFORCE_HIERARCHY]
/***********************************/

/***********************************/
CREATE TABLE [spp].[OLAP_SALESFORCE_HIERARCHY] (
	[SALMSERN] [varchar] (15)  NOT NULL ,
	[SALMNAME] [varchar] (30)  NOT NULL ,
	[SALMGRP] [varchar] (30)  NOT NULL ,
	[DUMMY_LINK_HIERARCHY]  int  NOT NULL  IDENTITY(1,1)
) ON [PRIMARY]
/***********************************/


/***********************************/
if exists (select * from dbo.sysobjects where id = object_id(N'[spp].[OLAP_STORE_SALESFORCE_HIERARCHY]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
drop table [spp].[OLAP_STORE_SALESFORCE_HIERARCHY]
/***********************************/

/***********************************/
CREATE TABLE [spp].[OLAP_STORE_SALESFORCE_HIERARCHY] (
	[SALMSERN] [varchar] (15)  NOT NULL ,
	[SALMNAME] [varchar] (30)  NOT NULL ,
	[SALMGRP] [varchar] (30)  NOT NULL ,
	[COMSERNO] [varchar] (15) NOT NULL,
	[COMNAME] [varchar] (50) NULL,
	[DUMMY_LINK_HIERARCHY]  int  NOT NULL  IDENTITY(1,1)
) ON [PRIMARY]
/***********************************/

--- STORE SALESFOTRCE
INSERT INTO OLAP_STORE_SALESFORCE_HIERARCHY(SALMSERN , SALMNAME , COMSERNO, COMNAME,  SALMGRP )
SELECT DISTINCT TSALMAN.SALMSERN , TSALMAN.SALMNAME , 
	ISNULL(TSALMAN.COMSERNO,'Undefined'), ISNULL(TSALMAN.COMNAME,'Undefined'), 
	ISNULL(LGRPUSER.UGRPNAME, 'Undefined')  FROM LGRPUSER
	RIGHT OUTER JOIN 
	(
	SELECT DISTINCT OLAP_STORE.COMSERNO , OLAP_STORE.COMNAME, TSALMAN.SALMSERN , TSALMAN.SALMNAME 
		FROM LSALCOM INNER JOIN TSALMAN ON LSALCOM.SALMSERN=TSALMAN.SALMSERN
		INNER JOIN OLAP_STORE ON LSALCOM.COMSERNO=OLAP_STORE.COMSERNO
		-- WHERE (CASE ISNULL(LSCEND,'') WHEN '' THEN '99999999' ELSE LSCEND END)>=CONVERT(varchar(8) , GetDate() , 112)  -- commented out because of verion incompatibility
	) TSALMAN
	ON LGRPUSER.USERSERN=TSALMAN.SALMSERN
	WHERE TSALMAN.SALMSERN IN (SELECT SALMSERN FROM OLAP_SALESFORCE)


SET IDENTITY_INSERT OLAP_STORE_SALESFORCE_HIERARCHY  ON

-- undefined comserno must exists in olap_store
INSERT INTO OLAP_STORE_SALESFORCE_HIERARCHY(SALMSERN , SALMNAME , COMSERNO, COMNAME, SALMGRP ,  DUMMY_LINK_HIERARCHY )
	VALUES('0' , 'Undefined', '0', 'Undefined' , 'Undefined' , 0  )

SET IDENTITY_INSERT OLAP_STORE_SALESFORCE_HIERARCHY  OFF

-- undefined comserno must exists in olap_store
INSERT INTO OLAP_STORE_SALESFORCE_HIERARCHY(SALMSERN , SALMNAME , COMSERNO, COMNAME, SALMGRP  )
VALUES('-1' , 'Intersection', '0', 'Undefined' , 'Undefined'  )



---SALESFORCE

SET IDENTITY_INSERT OLAP_SALESFORCE_HIERARCHY  ON

INSERT INTO OLAP_SALESFORCE_HIERARCHY(SALMSERN , SALMNAME , SALMGRP ,  DUMMY_LINK_HIERARCHY )
	SELECT SALMSERN, SALMNAME, SALMGRP , MIN(DUMMY_LINK_HIERARCHY)
		FROM OLAP_STORE_SALESFORCE_HIERARCHY
		GROUP BY SALMSERN, SALMNAME, SALMGRP

SET IDENTITY_INSERT OLAP_SALESFORCE_HIERARCHY  OFF





-- INDEXES

CREATE CLUSTERED INDEX IX_OLAP_SALESFORCE_HIERARCHY_DUMMY_LINK
ON spp.OLAP_SALESFORCE_HIERARCHY(DUMMY_LINK_HIERARCHY)


CREATE NONCLUSTERED INDEX IX_OLAP_SALESFORCE_HIERARCHY_SALMSERN
ON spp.OLAP_SALESFORCE_HIERARCHY(SALMSERN)


CREATE CLUSTERED INDEX IX_OLAP_STORE_SALESFORCE_HIERARCHY_DUMMY_LINK
ON spp.OLAP_STORE_SALESFORCE_HIERARCHY(DUMMY_LINK_HIERARCHY)


CREATE NONCLUSTERED INDEX IX_OLAP_STORE_SALESFORCE_HIERARCHY_SALMSERN
ON spp.OLAP_STORE_SALESFORCE_HIERARCHY(SALMSERN, COMSERNO)

------------------------------------------------------------------------------------------------------------------------------
GO
setuser
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS OFF 
GO

setuser N'spp'
GO






CREATE PROCEDURE spp.proc_fill_OLAP_SURVEY
AS

SET NOCOUNT ON

/***********************************/
if exists (select * from dbo.sysobjects where id = object_id(N'[spp].[OLAP_SURVEY]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
drop table [spp].[OLAP_SURVEY]
/***********************************/


/* SELECT INTO */
select 
IDENTITY(int,1,1) AS SURVEY_KEY ,
SALMSERN,
COMSERNO,
SAMCHDATE,
ANSWER,
QUESTION,
ANSWER_MEASURE
INTO spp.OLAP_SURVEY
from 
(
select  tsamerch.samchsern + tquest.questsern as SURVEY_KEY , tsamerch.salmsern , tsamerch.comserno , tsamerch.samchdate , 
CAST(1 as real) AS ANSWER_MEASURE ,
question , answer
from spp.tsamerch tsamerch
inner join spp.tqanswer tqanswer on tsamerch.samchsern=tqanswer.samchsern
inner join spp.tquest tquest on tqanswer.questsern=tquest.questsern
where tquest.ANSWFORM!='2'
UNION
select  tsamerch.samchsern + tquest.questsern as SURVEY_KEY ,  tsamerch.salmsern , tsamerch.comserno , tsamerch.samchdate , 
CASE 
	WHEN LTRIM(RTRIM(tqanswer.answer))='-' THEN 0 -- STUPID SQL SERVER BUG!!!
	WHEN  ISNUMERIC(tqanswer.answer)=1 THEN CAST(REPLACE(tqanswer.answer , ',' , '.') as real)
	ELSE 0
END AS ANSWER_MEASURE ,
question , 'Numeric' as answer
from spp.tsamerch tsamerch
inner join spp.tqanswer tqanswer on tsamerch.samchsern=tqanswer.samchsern
inner join spp.tquest tquest on tqanswer.questsern=tquest.questsern
where tquest.ANSWFORM='2' 
) tbl



GO
setuser
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

setuser N'spp'
GO







CREATE PROCEDURE [spp].[proc_fill_OLAP_TARGET] AS
SET NOCOUNT ON 
/***********************************/
if exists (select * from dbo.sysobjects where id = object_id(N'[spp].[OLAP_TTARENTR_PRODGRP]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
drop table [spp].[OLAP_TTARENTR_PRODGRP]
/***********************************/
/***********************************/
if exists (select * from dbo.sysobjects where id = object_id(N'[spp].[OLAP_TTARENTR_PRODUCT]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
drop table [spp].[OLAP_TTARENTR_PRODUCT]
/***********************************/
/***********************************/
CREATE TABLE [spp].[OLAP_TTARENTR_PRODGRP] (
	[TARGSERN] [varchar] (15) ,
	[SALMSERN] [varchar] (15) ,
	[COMSERNO] [varchar] (15) ,
	[PRODSERN] [varchar] (15) ,
	[DATE] [varchar] (8) ,
	[TARGEVOLUM] float ,
	[TARGEMONEY] float ,
	[TARGENUM1] float ,
	[TARGENUM2] float ,
	[TARGENUM3] float ,
	[TARGENUM4] float ,
	[TARGMONEY1] float ,
	[TARGMONEY2] float ,
	[TARGMONEY3] float ,
	[TARGMONEY4] float ,
) ON [PRIMARY]
/***********************************/
/***********************************/
CREATE TABLE [spp].[OLAP_TTARENTR_PRODUCT] (
	[TARGSERN] [varchar] (15) ,
	[SALMSERN] [varchar] (15) ,
	[COMSERNO] [varchar] (15) ,
	[PRODSERN] [varchar] (15) ,
	[DATE] [varchar] (8) ,
	[TARGEVOLUM] float ,
	[TARGEMONEY] float ,
	[TARGENUM1] float ,
	[TARGENUM2] float ,
	[TARGENUM3] float ,
	[TARGENUM4] float ,
	[TARGMONEY1] float ,
	[TARGMONEY2] float ,
	[TARGMONEY3] float ,
	[TARGMONEY4] float ,
) ON [PRIMARY]
/***********************************/
INSERT INTO 
OLAP_TTARENTR_PRODGRP
(
TARGSERN,
SALMSERN,
COMSERNO,
PRODSERN,
DATE,
TARGEVOLUM,
TARGEMONEY,
TARGENUM1,
TARGENUM2,
TARGENUM3,
TARGENUM4,
TARGMONEY1,
TARGMONEY2,
TARGMONEY3,
TARGMONEY4
)
SELECT 
TARGSERN,
SALMSERN,
COMSERNO,
PRODSERN,
OLAP_DATE.DATE,
TARGEVOLUM/WRKDAYS AS TARGEVOLUM,
TARGEMONEY/WRKDAYS AS TARGEMONEY,
TARGENUM1/WRKDAYS AS TARGENUM1,
TARGENUM2/WRKDAYS AS TARGENUM2,
TARGENUM3/WRKDAYS AS TARGENUM3,
TARGENUM4/WRKDAYS AS TARGENUM4,
TARGMONEY1/WRKDAYS AS TARGMONEY1,
TARGMONEY2/WRKDAYS AS TARGMONEY2,
TARGMONEY3/WRKDAYS AS TARGMONEY3,
TARGMONEY4/WRKDAYS AS TARGMONEY4
FROM
(
SELECT  * FROM 
(
SELECT
TARGSERN,
SALMSERN,
COMSERNO,
PRODSERN,
TARGETIME,
TARGEVOLUM,
TARGEMONEY,
TARGENUM1,
TARGENUM2,
TARGENUM3,
TARGENUM4,
TARGMONEY1,
TARGMONEY2,
TARGMONEY3,
TARGMONEY4,
TARGTIMEUN,
(SELECT SUM(WRKDAY) FROM spp.OLAP_DATE  OLAP_DATE
WHERE 
(TARGTIMEUN=2 AND TARGETIME<=OLAP_DATE.WEEK AND TARGETIME>=OLAP_DATE.WEEK ) 
OR
(TARGTIMEUN=3 AND TARGETIME<=OLAP_DATE.MONTH AND TARGETIME>=OLAP_DATE.MONTH ) 
OR
(TARGTIMEUN=4 AND TARGETIME<=OLAP_DATE.YEAR AND TARGETIME>=OLAP_DATE.YEAR ) 
OR
(TARGTIMEUN=5 AND TARGETIME<=OLAP_DATE.QUARTER AND TARGETIME>=OLAP_DATE.QUARTER) 
OR
(TARGTIMEUN=6 AND TARGETIME<=OLAP_DATE.SALENUM AND TARGETIME>=OLAP_DATE.SALENUM) 
) AS WRKDAYS
FROM spp.TTARENTR  TTARENTR
WHERE COMSERNO<>'*' AND PRODSERN<>'*'   AND TARGEPRODF=1
) TTARENTR_COM_PROD
UNION 
SELECT  * FROM 
(
SELECT
TARGSERN,
SALMSERN,
'0' AS COMSERNO,
PRODSERN,
TARGETIME,
TARGEVOLUM,
TARGEMONEY,
TARGENUM1,
TARGENUM2,
TARGENUM3,
TARGENUM4,
TARGMONEY1,
TARGMONEY2,
TARGMONEY3,
TARGMONEY4,
TARGTIMEUN,
(SELECT SUM(WRKDAY) FROM spp.OLAP_DATE OLAP_DATE
WHERE 
(TARGTIMEUN=2 AND TARGETIME<=OLAP_DATE.WEEK AND TARGETIME>=OLAP_DATE.WEEK ) 
OR
(TARGTIMEUN=3 AND TARGETIME<=OLAP_DATE.MONTH AND TARGETIME>=OLAP_DATE.MONTH ) 
OR
(TARGTIMEUN=4 AND TARGETIME<=OLAP_DATE.YEAR AND TARGETIME>=OLAP_DATE.YEAR ) 
OR
(TARGTIMEUN=5 AND TARGETIME<=OLAP_DATE.QUARTER AND TARGETIME>=OLAP_DATE.QUARTER) 
OR
(TARGTIMEUN=6 AND TARGETIME<=OLAP_DATE.SALENUM AND TARGETIME>=OLAP_DATE.SALENUM) 
) AS WRKDAYS
FROM spp.TTARENTR  TTARENTR
WHERE COMSERNO='*' AND PRODSERN<>'*'   AND TARGEPRODF=1
) TTARENTR_PROD
) TTARENTR
INNER JOIN spp.OLAP_DATE OLAP_DATE ON 
(
TARGETIME<=(
CASE TARGTIMEUN
	WHEN '2' THEN OLAP_DATE.WEEK 
	WHEN '3' THEN OLAP_DATE.MONTH
	WHEN '4' THEN OLAP_DATE.YEAR
	WHEN '5' THEN OLAP_DATE.QUARTER
	WHEN '6' THEN OLAP_DATE.SALENUM
END
)
AND 
TARGETIME>=(
CASE TARGTIMEUN
	WHEN '2' THEN OLAP_DATE.WEEK 
	WHEN '3' THEN OLAP_DATE.MONTH
	WHEN '4' THEN OLAP_DATE.YEAR
	WHEN '5' THEN OLAP_DATE.QUARTER
	WHEN '6' THEN OLAP_DATE.SALENUM
END)
AND WRKDAY=1
)


















INSERT INTO 
OLAP_TTARENTR_PRODUCT
(
TARGSERN,
SALMSERN,
COMSERNO,
PRODSERN,
DATE,
TARGEVOLUM,
TARGEMONEY,
TARGENUM1,
TARGENUM2,
TARGENUM3,
TARGENUM4,
TARGMONEY1,
TARGMONEY2,
TARGMONEY3,
TARGMONEY4
)
SELECT 
TARGSERN,
SALMSERN,
COMSERNO,
PRODSERN,
OLAP_DATE.DATE,
TARGEVOLUM/WRKDAYS AS TARGEVOLUM,
TARGEMONEY/WRKDAYS AS TARGEMONEY,
TARGENUM1/WRKDAYS AS TARGENUM1,
TARGENUM2/WRKDAYS AS TARGENUM2,
TARGENUM3/WRKDAYS AS TARGENUM3,
TARGENUM4/WRKDAYS AS TARGENUM4,
TARGMONEY1/WRKDAYS AS TARGMONEY1,
TARGMONEY2/WRKDAYS AS TARGMONEY2,
TARGMONEY3/WRKDAYS AS TARGMONEY3,
TARGMONEY4/WRKDAYS AS TARGMONEY4
FROM
(
SELECT * FROM 
(
SELECT 
TTARENTR_COM.TARGSERN,
TTARENTR_COM.SALMSERN,
TTARENTR_COM.COMSERNO,
'0' AS PRODSERN,
TTARENTR_COM.TARGETIME,
TTARENTR_COM.TARGEVOLUM-ISNULL(TTARENTR_COM_PROD.TARGEVOLUM, 0 )  AS TARGEVOLUM,
TTARENTR_COM.TARGEMONEY-ISNULL(TTARENTR_COM_PROD.TARGEMONEY, 0 )   AS TARGEMONEY,
TTARENTR_COM.TARGENUM1-ISNULL(TTARENTR_COM_PROD.TARGENUM1, 0 )   AS TARGENUM1,
TTARENTR_COM.TARGENUM2-ISNULL(TTARENTR_COM_PROD.TARGENUM2, 0 )   AS TARGENUM2,
TTARENTR_COM.TARGENUM3-ISNULL(TTARENTR_COM_PROD.TARGENUM3, 0 )   AS TARGENUM3,
TTARENTR_COM.TARGENUM4-ISNULL(TTARENTR_COM_PROD.TARGENUM4, 0 )   AS TARGENUM4,
TTARENTR_COM.TARGMONEY1-ISNULL(TTARENTR_COM_PROD.TARGMONEY1, 0 )   AS TARGMONEY1,
TTARENTR_COM.TARGMONEY2-ISNULL(TTARENTR_COM_PROD.TARGMONEY2, 0 )   AS TARGMONEY2,
TTARENTR_COM.TARGMONEY3-ISNULL(TTARENTR_COM_PROD.TARGMONEY3, 0 )   AS TARGMONEY3,
TTARENTR_COM.TARGMONEY4-ISNULL(TTARENTR_COM_PROD.TARGMONEY4, 0 )   AS TARGMONEY4,
TTARENTR_COM.TARGTIMEUN,
(SELECT SUM(WRKDAY) FROM spp.OLAP_DATE  OLAP_DATE
WHERE 
(TARGTIMEUN=2 AND TTARENTR_COM.TARGETIME<=OLAP_DATE.WEEK AND TTARENTR_COM.TARGETIME>=OLAP_DATE.WEEK ) 
OR
(TARGTIMEUN=3 AND TTARENTR_COM.TARGETIME<=OLAP_DATE.MONTH AND TTARENTR_COM.TARGETIME>=OLAP_DATE.MONTH ) 
OR
(TARGTIMEUN=4 AND TTARENTR_COM.TARGETIME<=OLAP_DATE.YEAR AND TTARENTR_COM.TARGETIME>=OLAP_DATE.YEAR ) 
OR
(TARGTIMEUN=5 AND TTARENTR_COM.TARGETIME<=OLAP_DATE.QUARTER AND TTARENTR_COM.TARGETIME>=OLAP_DATE.QUARTER) 
OR
(TARGTIMEUN=6 AND TTARENTR_COM.TARGETIME<=OLAP_DATE.SALENUM AND TTARENTR_COM.TARGETIME>=OLAP_DATE.SALENUM) 
) AS WRKDAYS
FROM
(SELECT * FROM spp.TTARENTR TTARENTR WHERE COMSERNO<>'*' AND PRODSERN='*' ) TTARENTR_COM
LEFT OUTER JOIN
(
SELECT
TARGSERN,
SALMSERN,
COMSERNO,
TARGETIME,
SUM(TARGEVOLUM) AS TARGEVOLUM,
SUM(TARGEMONEY) AS TARGEMONEY,
SUM(TARGENUM1) AS TARGENUM1,
SUM(TARGENUM2) AS TARGENUM2,
SUM(TARGENUM3) AS TARGENUM3,
SUM(TARGENUM4) AS TARGENUM4,
SUM(TARGMONEY1) AS TARGMONEY1,
SUM(TARGMONEY2) AS TARGMONEY2,
SUM(TARGMONEY3) AS TARGMONEY3,
SUM(TARGMONEY4) AS TARGMONEY4
FROM spp.TTARENTR  TTARENTR
WHERE COMSERNO<>'*' AND PRODSERN<>'*' 
GROUP BY
TARGSERN,
SALMSERN,
COMSERNO,
TARGETIME 
) TTARENTR_COM_PROD
ON
TTARENTR_COM_PROD.TARGSERN=TTARENTR_COM.TARGSERN AND 
TTARENTR_COM_PROD.SALMSERN=TTARENTR_COM.SALMSERN AND 
TTARENTR_COM_PROD.COMSERNO=TTARENTR_COM.COMSERNO AND 
TTARENTR_COM_PROD.TARGETIME=TTARENTR_COM.TARGETIME 
) TTARENTR_COM
UNION
SELECT  * FROM 
(
SELECT
TARGSERN,
SALMSERN,
COMSERNO,
PRODSERN,
TARGETIME,
TARGEVOLUM,
TARGEMONEY,
TARGENUM1,
TARGENUM2,
TARGENUM3,
TARGENUM4,
TARGMONEY1,
TARGMONEY2,
TARGMONEY3,
TARGMONEY4,
TARGTIMEUN,
(SELECT SUM(WRKDAY) FROM spp.OLAP_DATE  OLAP_DATE
WHERE 
(TARGTIMEUN=2 AND TARGETIME<=OLAP_DATE.WEEK AND TARGETIME>=OLAP_DATE.WEEK ) 
OR
(TARGTIMEUN=3 AND TARGETIME<=OLAP_DATE.MONTH AND TARGETIME>=OLAP_DATE.MONTH ) 
OR
(TARGTIMEUN=4 AND TARGETIME<=OLAP_DATE.YEAR AND TARGETIME>=OLAP_DATE.YEAR ) 
OR
(TARGTIMEUN=5 AND TARGETIME<=OLAP_DATE.QUARTER AND TARGETIME>=OLAP_DATE.QUARTER) 
OR
(TARGTIMEUN=6 AND TARGETIME<=OLAP_DATE.SALENUM AND TARGETIME>=OLAP_DATE.SALENUM) 
) AS WRKDAYS
FROM spp.TTARENTR  TTARENTR
WHERE COMSERNO<>'*' AND PRODSERN<>'*'    AND TARGEPRODF=0
) TTARENTR_COM_PROD
UNION 
SELECT  * FROM 
(
SELECT
TARGSERN,
SALMSERN,
'0' AS COMSERNO,
PRODSERN,
TARGETIME,
TARGEVOLUM,
TARGEMONEY,
TARGENUM1,
TARGENUM2,
TARGENUM3,
TARGENUM4,
TARGMONEY1,
TARGMONEY2,
TARGMONEY3,
TARGMONEY4,
TARGTIMEUN,
(SELECT SUM(WRKDAY) FROM spp.OLAP_DATE  OLAP_DATE
WHERE 
(TARGTIMEUN=2 AND TARGETIME<=OLAP_DATE.WEEK AND TARGETIME>=OLAP_DATE.WEEK ) 
OR
(TARGTIMEUN=3 AND TARGETIME<=OLAP_DATE.MONTH AND TARGETIME>=OLAP_DATE.MONTH ) 
OR
(TARGTIMEUN=4 AND TARGETIME<=OLAP_DATE.YEAR AND TARGETIME>=OLAP_DATE.YEAR ) 
OR
(TARGTIMEUN=5 AND TARGETIME<=OLAP_DATE.QUARTER AND TARGETIME>=OLAP_DATE.QUARTER) 
OR
(TARGTIMEUN=6 AND TARGETIME<=OLAP_DATE.SALENUM AND TARGETIME>=OLAP_DATE.SALENUM) 
) AS WRKDAYS
FROM spp.TTARENTR  TTARENTR
WHERE COMSERNO='*' AND PRODSERN<>'*'    AND TARGEPRODF=0
) TTARENTR_PROD
) TTARENTR
INNER JOIN spp.OLAP_DATE OLAP_DATE ON 
(
TARGETIME<=(
CASE TARGTIMEUN
	WHEN '2' THEN OLAP_DATE.WEEK 
	WHEN '3' THEN OLAP_DATE.MONTH
	WHEN '4' THEN OLAP_DATE.YEAR
	WHEN '5' THEN OLAP_DATE.QUARTER
	WHEN '6' THEN OLAP_DATE.SALENUM
END
)
AND 
TARGETIME>=(
CASE TARGTIMEUN
	WHEN '2' THEN OLAP_DATE.WEEK 
	WHEN '3' THEN OLAP_DATE.MONTH
	WHEN '4' THEN OLAP_DATE.YEAR
	WHEN '5' THEN OLAP_DATE.QUARTER
	WHEN '6' THEN OLAP_DATE.SALENUM
END)
AND WRKDAY=1
)


SET NOCOUNT OFF




GO
setuser
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS OFF 
GO

setuser N'spp'
GO





CREATE PROCEDURE [spp].[proc_fill_OLAP_WHOLESALER] AS

SET NOCOUNT ON

/***********************************/
if exists (select * from dbo.sysobjects where id = object_id(N'[spp].[OLAP_WHOLESALER]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
drop table [spp].[OLAP_WHOLESALER]
/***********************************/

/***********************************/
CREATE TABLE [spp].[OLAP_WHOLESALER] (
	[COMSERNWHS] [varchar] (15)  NOT NULL PRIMARY KEY ,
	[COMNAME] [varchar] (50)   NULL DEFAULT 'Unknown' 
) ON [PRIMARY]
/***********************************/


INSERT INTO OLAP_WHOLESALER(COMSERNWHS)
SELECT DISTINCT ISNULL(COMSERNWHS,'')  AS COMSERNWHS  FROM
	(
	SELECT  TDELIVER.COMSERNWHS FROM TDELIVER
	UNION
	SELECT  TORDER.COMSERNWHS FROM TORDER
	UNION
	SELECT  TMSASLIP.COMSERNWHS FROM TMSASLIP
	) WHOLESALER


IF NOT EXISTS(SELECT TOP 1 1 FROM OLAP_WHOLESALER)
	INSERT INTO OLAP_WHOLESALER(COMSERNWHS, COMNAME)
	VALUES ('0', 'Undefined')

UPDATE OLAP_WHOLESALER
	SET OLAP_WHOLESALER.COMNAME=TCOMPANY.COMNAME
	FROM OLAP_WHOLESALER , TCOMPANY
	WHERE OLAP_WHOLESALER.COMSERNWHS=TCOMPANY.COMSERNO



GO
setuser
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

setuser N'spp'
GO




CREATE PROCEDURE [spp].[proc_insert_LOG] 
@message1 varchar(512)='',
@message2 varchar(512)='',
@message3 varchar(512)='',
@message4 varchar(512)=''
AS

set nocount on

insert into spp.OLAP_LOG(message , [timestamp])
	values( left(@message1 + @message2 + @message3 + @message4 , 512) , GetDate() )



GO
setuser
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

setuser N'spp'
GO









CREATE  procedure spp.proc_process_main
@i_force_load_selection bit = 0 
as


DECLARE @prev_time datetime
DECLARE @message varchar(512)

SET DATEFIRST 1

-- FORCE SELECTION PROCESS ON SATURDAY 
IF  DATEPART(dw , GETDATE() )=6
	SET @i_force_load_selection=1

SET @prev_time=GETDATE()

---------------------------
EXEC proc_fill_OLAP_DATE	-- DATE MUST BE DONE  BEFORE STORE
---------------------------

set @message= '- filling DATE took ' + CAST(DATEDIFF(ss, @prev_time , getdate() ) as varchar(25)) + ' sec.'
exec proc_insert_LOG @message
SET @prev_time=GETDATE()

---------------------------
EXEC proc_fill_OLAP_PRODUCT	-- PRODUCT MUST BE DONE  BEFORE STORE (SALESFORCE IS WITHIN STORE)
---------------------------

set @message=  '- filling PRODUCT took ' + CAST(DATEDIFF(ss, @prev_time , getdate() ) as varchar(25)) + ' sec.'
exec proc_insert_LOG @message
SET @prev_time=GETDATE()

---------------------------
EXEC proc_fill_OLAP_STORE
---------------------------

set @message=  '- filling STORE took ' + CAST(DATEDIFF(ss, @prev_time , getdate() ) as varchar(25)) + ' sec.'
exec proc_insert_LOG @message
SET @prev_time=GETDATE()

---------------------------
EXEC proc_fill_OLAP_LCOMPGR	-- MUST BE DONE AFTER PRODUCT AND STORE
---------------------------

set @message=  '- filling OLAP_LCOMPGR took ' + CAST(DATEDIFF(ss, @prev_time , getdate() ) as varchar(25)) + ' sec.'
exec proc_insert_LOG @message
SET @prev_time=GETDATE()

---------------------------
EXEC proc_fill_OLAP_WHOLESALER
---------------------------

set @message=  '- filling WHOLESALER took ' + CAST(DATEDIFF(ss, @prev_time , getdate() ) as varchar(25)) + ' sec.'
exec proc_insert_LOG @message
SET @prev_time=GETDATE()



---------------------------
EXEC proc_fill_OLAP_FIXTURE
---------------------------

set @message=  '- filling FIXTURE took ' + CAST(DATEDIFF(ss, @prev_time , getdate() ) as varchar(25)) + ' sec.'
exec proc_insert_LOG @message
SET @prev_time=GETDATE()

---------------------------
EXEC proc_fill_OLAP_TARGET
---------------------------

set @message=  '- filling TARGET took ' + CAST(DATEDIFF(ss, @prev_time , getdate() ) as varchar(25)) + ' sec.'
exec proc_insert_LOG @message
SET @prev_time=GETDATE()

---------------------------
EXEC proc_fill_OLAP_SALESCALL
---------------------------

set @message=  '- filling SALESCALL took ' + CAST(DATEDIFF(ss, @prev_time , getdate() ) as varchar(25)) + ' sec.'
exec proc_insert_LOG @message
SET @prev_time=GETDATE()

---------------------------
EXEC proc_fill_OLAP_SURVEY
---------------------------

set @message=  '- filling SURVEY took ' + CAST(DATEDIFF(ss, @prev_time , getdate() ) as varchar(25)) + ' sec.'
exec proc_insert_LOG @message
SET @prev_time=GETDATE()






---------------------------

-- PROCESS IF FORCED OR IF OLAP_LPROPROD EMPTY
IF @i_force_load_selection=1 OR NOT EXISTS (SELECT TOP 1 1 FROM OLAP_LPROPROD)
	BEGIN

		EXEC proc_fill_OLAP_LPROPROD

		EXEC proc_fill_OLAP_SELECTION

		----------------------------------------------------------------

		if exists (select * from dbo.sysobjects where id = object_id(N'[spp].[OLAP_ORDDISTR_EXP]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
		drop table [spp].[OLAP_ORDDISTR_EXP]
		
		if exists (select * from dbo.sysobjects where id = object_id(N'[spp].[OLAP_ORDDISTR_NOTEXP]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
		drop table [spp].[OLAP_ORDDISTR_NOTEXP]
		
		if exists (select * from dbo.sysobjects where id = object_id(N'[spp].[OLAP_ORDDISTR_TMP]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
		drop table [spp].[OLAP_ORDDISTR_TMP]
		
		if exists (select * from dbo.sysobjects where id = object_id(N'[spp].[OLAP_ORDDISTR_TMP2]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
		drop table [spp].[OLAP_ORDDISTR_TMP2]
		
		CREATE TABLE [spp].[OLAP_ORDDISTR_EXP] (
			[COMSERNO] [char] (15) NOT NULL ,
			[PRODSERN] [char] (15) NOT NULL ,
			[ORDDDATE] [char] (8) NOT NULL ,
			[PREV_INDISTR_CUM_SUM] [smallint] NOT NULL ,
			[PREV_INSEL_CUM_SUM] [smallint] NOT NULL ,
			[PREV_INBSEL_CUM_SUM] [smallint] NOT NULL ,
			[CUR_INDISTR_CUM_SUM] [smallint] NOT NULL ,
			[CUR_INSEL_CUM_SUM] [smallint] NOT NULL ,
			[CUR_INBSEL_CUM_SUM] [smallint] NOT NULL ,
			[INDISTR_CUM] [smallint] NOT NULL ,
			[INSELDISTR_CUM] [smallint] NOT NULL ,
			[INBSELDISTR_CUM] [smallint] NOT NULL 
		) ON [PRIMARY]

		
		CREATE TABLE [spp].[OLAP_ORDDISTR_NOTEXP] (
			[COMSERNO] [char] (15) NOT NULL ,
			[PRODSERN] [char] (15) NOT NULL ,
			[ORDDDATE] [char] (8) NOT NULL ,
			[INSEL_CUM] [smallint] NOT NULL ,
			[INBSEL_CUM] [smallint] NOT NULL ,
			[INDISTR_CUM] [smallint] NOT NULL ,
			[INSELDISTR_CUM] [smallint] NOT NULL ,
			[INBSELDISTR_CUM] [smallint] NOT NULL ,
			[PRODEXPAND] [tinyint] NOT NULL ,
			[PRODEXPAND_INTERSECT] [tinyint] NOT NULL 
		) ON [PRIMARY]

		
		CREATE TABLE [spp].[OLAP_ORDDISTR_TMP] (
			[COMSERNO] [char] (15) NOT NULL ,
			[PRODSERN] [char] (15) NOT NULL ,
			[ORDDDATE] [char] (8) NOT NULL ,
			[RANGESTART_DATE] [char] (8) NOT NULL ,
			[OUTOFSTOCK_DATE] [char] (8) NOT NULL ,
			[WRKDAYS_IN_RANGE] [int] NOT NULL ,
			[ORDDMONTH] [char] (6) NOT NULL ,
			[WRKDAY_SERNO] [int] NOT NULL ,
			[ORDEVOL] [float] NOT NULL 
		) ON [PRIMARY]

		
		CREATE TABLE [spp].[OLAP_ORDDISTR_TMP2] (
			[COMSERNO] [char] (15) NOT NULL ,
			[PRODSERN] [char] (15) NOT NULL ,
			[ORDDDATE] [char] (8) NOT NULL ,
			[PREV_ORDDDATE] [char] (8) NOT NULL ,
			[INDISTR] [smallint] NOT NULL ,
			[INBSEL] [bit] NOT NULL ,
			[INSEL] [bit] NOT NULL 
		) ON [PRIMARY]

		
		 CREATE  CLUSTERED  INDEX [IX_OLAP_ORDDISTR_EXP_DATE] ON [spp].[OLAP_ORDDISTR_EXP]([ORDDDATE]) ON [PRIMARY]

		
		 CREATE  CLUSTERED  INDEX [IX_OLAP_ORDDISTR_NOTEXP] ON [spp].[OLAP_ORDDISTR_NOTEXP]([COMSERNO], [PRODSERN], [ORDDDATE]) ON [PRIMARY]

		
		 CREATE  UNIQUE  CLUSTERED  INDEX [IX_OLAP_ORDDISTR_TMP] ON [spp].[OLAP_ORDDISTR_TMP]([COMSERNO], [PRODSERN], [ORDDDATE]) ON [PRIMARY]

		
		 CREATE  UNIQUE  CLUSTERED  INDEX [IX_OLAP_ORDDISTR_TMP2] ON [spp].[OLAP_ORDDISTR_TMP2]([COMSERNO], [PRODSERN], [ORDDDATE]) ON [PRIMARY]


		-----------------------------------------------------------------
		
		----------------------------------------------------------------
		
		if exists (select * from dbo.sysobjects where id = object_id(N'[spp].[OLAP_DELDISTR_EXP]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
		drop table [spp].[OLAP_DELDISTR_EXP]
		
		
		if exists (select * from dbo.sysobjects where id = object_id(N'[spp].[OLAP_DELDISTR_NOTEXP]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
		drop table [spp].[OLAP_DELDISTR_NOTEXP]
		
		
		if exists (select * from dbo.sysobjects where id = object_id(N'[spp].[OLAP_DELDISTR_TMP]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
		drop table [spp].[OLAP_DELDISTR_TMP]
		
		
		if exists (select * from dbo.sysobjects where id = object_id(N'[spp].[OLAP_DELDISTR_TMP2]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
		drop table [spp].[OLAP_DELDISTR_TMP2]
		
		
		CREATE TABLE [spp].[OLAP_DELDISTR_EXP] (
			[COMSERNO] [char] (15) NOT NULL ,
			[PRODSERN] [char] (15) NOT NULL ,
			[DELDATE] [char] (8) NOT NULL ,
			[PREV_INDISTR_CUM_SUM] [smallint] NOT NULL ,
			[PREV_INSEL_CUM_SUM] [smallint] NOT NULL ,
			[PREV_INBSEL_CUM_SUM] [smallint] NOT NULL ,
			[CUR_INDISTR_CUM_SUM] [smallint] NOT NULL ,
			[CUR_INSEL_CUM_SUM] [smallint] NOT NULL ,
			[CUR_INBSEL_CUM_SUM] [smallint] NOT NULL ,
			[INDISTR_CUM] [smallint] NOT NULL ,
			[INSELDISTR_CUM] [smallint] NOT NULL ,
			[INBSELDISTR_CUM] [smallint] NOT NULL 
		) ON [PRIMARY]
		
		
		CREATE TABLE [spp].[OLAP_DELDISTR_NOTEXP] (
			[COMSERNO] [char] (15) NOT NULL ,
			[PRODSERN] [char] (15) NOT NULL ,
			[DELDATE] [char] (8) NOT NULL ,
			[INSEL_CUM] [smallint] NOT NULL ,
			[INBSEL_CUM] [smallint] NOT NULL ,
			[INDISTR_CUM] [smallint] NOT NULL ,
			[INSELDISTR_CUM] [smallint] NOT NULL ,
			[INBSELDISTR_CUM] [smallint] NOT NULL ,
			[PRODEXPAND] [tinyint] NOT NULL ,
			[PRODEXPAND_INTERSECT] [tinyint] NOT NULL 
		) ON [PRIMARY]
		
		
		CREATE TABLE [spp].[OLAP_DELDISTR_TMP] (
			[COMSERNO] [char] (15) NOT NULL ,
			[PRODSERN] [char] (15) NOT NULL ,
			[DELDATE] [char] (8) NOT NULL ,
			[RANGESTART_DATE] [char] (8) NOT NULL ,
			[OUTOFSTOCK_DATE] [char] (8) NOT NULL ,
			[WRKDAYS_IN_RANGE] [int] NOT NULL ,
			[DELDMONTH] [char] (6) NOT NULL ,
			[WRKDAY_SERNO] [int] NOT NULL ,
			[DELEACTVOL] [float] NOT NULL 
		) ON [PRIMARY]
		
		
		CREATE TABLE [spp].[OLAP_DELDISTR_TMP2] (
			[COMSERNO] [char] (15) NOT NULL ,
			[PRODSERN] [char] (15) NOT NULL ,
			[DELDATE] [char] (8) NOT NULL ,
			[PREV_DELDATE] [char] (8) NOT NULL ,
			[INDISTR] [smallint] NOT NULL ,
			[INBSEL] [bit] NOT NULL ,
			[INSEL] [bit] NOT NULL 
		) ON [PRIMARY]
		
		
		 CREATE  CLUSTERED  INDEX [IX_OLAP_DELDISTR_EXP_DATE] ON [spp].[OLAP_DELDISTR_EXP]([DELDATE]) ON [PRIMARY]
		
		
		 CREATE  CLUSTERED  INDEX [IX_OLAP_DELDISTR_NOTEXP] ON [spp].[OLAP_DELDISTR_NOTEXP]([COMSERNO], [PRODSERN], [DELDATE]) ON [PRIMARY]
		
		
		 CREATE  UNIQUE  CLUSTERED  INDEX [IX_OLAP_DELDISTR_TMP] ON [spp].[OLAP_DELDISTR_TMP]([COMSERNO], [PRODSERN], [DELDATE]) ON [PRIMARY]
		
		
		 CREATE  UNIQUE  CLUSTERED  INDEX [IX_OLAP_DELDISTR_TMP2] ON [spp].[OLAP_DELDISTR_TMP2]([COMSERNO], [PRODSERN], [DELDATE]) ON [PRIMARY]


		-----------------------------------------------------------------



		----------------------------------------------------------------
		
		if exists (select * from dbo.sysobjects where id = object_id(N'[spp].[OLAP_DPM_EXP]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
		drop table [spp].[OLAP_DPM_EXP]
		
		
		if exists (select * from dbo.sysobjects where id = object_id(N'[spp].[OLAP_DPM_NOTEXP]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
		drop table [spp].[OLAP_DPM_NOTEXP]
		
		
		if exists (select * from dbo.sysobjects where id = object_id(N'[spp].[OLAP_DPM_TMP]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
		drop table [spp].[OLAP_DPM_TMP]
		
		
		CREATE TABLE [spp].[OLAP_DPM_EXP] (
			[comserno] [char] (15) NOT NULL ,
			[prodsern] [char] (15) NOT NULL ,
			[dpmhdate] [char] (8) NOT NULL ,
			[prev_dpmecover_cum_sum] [smallint] NOT NULL ,
			[prev_dpmeinsel_cum_sum] [smallint] NOT NULL ,
			[prev_dpmeinbsel_cum_sum] [smallint] NOT NULL ,
			[cur_dpmecover_cum_sum] [smallint] NOT NULL ,
			[cur_dpmeinsel_cum_sum] [smallint] NOT NULL ,
			[cur_dpmeinbsel_cum_sum] [smallint] NOT NULL ,
			[dpmecover_cum] [smallint] NOT NULL ,
			[dpmeselcover_cum] [smallint] NOT NULL ,
			[dpmebselcover_cum] [smallint] NOT NULL ,
			[dpmmeasured_cum] [smallint] NOT NULL ,
			[dpmbselmeasured_cum] [smallint] NOT NULL ,
			[dpmefacing_cum] [real] NOT NULL ,
			[dpmechan_cum] [real] NOT NULL ,
			[dpmesalesp_cum] [real] NOT NULL ,
			[dpmeavestp_cum] [real] NOT NULL ,
			[dpmeprice_net] [real] NOT NULL ,
			[dpmeprice_gross] [real] NOT NULL ,
			[dpmcount] [tinyint] NOT NULL 
		) ON [PRIMARY]
		
		
		CREATE TABLE [spp].[OLAP_DPM_NOTEXP] (
			[comserno] [char] (15) NOT NULL ,
			[prodsern] [char] (15) NOT NULL ,
			[dpmhdate] [char] (8) NOT NULL ,
			[dpmeinsel_cum] [smallint] NOT NULL ,
			[dpmeinbsel_cum] [smallint] NOT NULL ,
			[dpmefacing_cum] [real] NOT NULL ,
			[dpmechan_cum] [real] NOT NULL ,
			[dpmesalesp_cum] [real] NOT NULL ,
			[dpmeavestp_cum] [real] NOT NULL ,
			[dpmeprice_net] [real] NOT NULL ,
			[dpmeprice_gross] [real] NOT NULL ,
			[dpmecover_cum] [smallint] NOT NULL ,
			[dpmeselcover_cum] [smallint] NOT NULL ,
			[dpmebselcover_cum] [smallint] NOT NULL ,
			[dpmmeasured_cum] [smallint] NOT NULL ,
			[dpmbselmeasured_cum] [smallint] NOT NULL ,
			[dpmcount] [tinyint] NOT NULL ,
			[prodexpand] [tinyint] NOT NULL ,
			[prodexpand_intersect] [tinyint] NOT NULL 
		) ON [PRIMARY]
		
		
		CREATE TABLE [spp].[OLAP_DPM_TMP] (
			[comserno] [char] (15) NOT NULL ,
			[prodsern] [char] (15) NOT NULL ,
			[dpmhdate] [char] (8) NOT NULL ,
			[dpmecover] [bit] NOT NULL ,
			[dpmefacing] [real] NOT NULL ,
			[dpmechan] [real] NOT NULL ,
			[dpmesalesp] [real] NOT NULL ,
			[dpmeavestp] [real] NOT NULL ,
			[dpmeprice_net] [real] NOT NULL ,
			[dpmeprice_gross] [real] NOT NULL ,
			[dpmeinsel] [bit] NOT NULL ,
			[dpmeinbsel] [bit] NOT NULL ,
			[sel_placeholder] [bit] NOT NULL ,
			[prev_dpmhdate] [char] (8) NOT NULL 
		) ON [PRIMARY]
		
		
		 CREATE  CLUSTERED  INDEX [ix_OLAP_DPM_NOTEXP] ON [spp].[OLAP_DPM_NOTEXP]([comserno], [prodsern], [dpmhdate]) ON [PRIMARY]
		
		
		 CREATE  UNIQUE  CLUSTERED  INDEX [ix_OLAP_DPM_TMP] ON [spp].[OLAP_DPM_TMP]([comserno], [prodsern], [dpmhdate]) ON [PRIMARY]
		

		-----------------------------------------------------------------


	END
ELSE
IF EXISTS (select * from dbo.sysobjects where id = object_id(N'[spp].[OLAP_SELRANGE]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) 
	AND EXISTS (select * from dbo.sysobjects where id = object_id(N'[spp].[OLAP_LPROPROD]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) 
	BEGIN
		IF NOT EXISTS(SELECT * FROM OLAP_SELRANGE) 
			OR NOT EXISTS(SELECT * FROM OLAP_LPROPROD)
			BEGIN
				EXEC proc_fill_OLAP_LPROPROD -- !!! BEFORE SELECTION_DIMS
				EXEC proc_fill_OLAP_SELECTION_DIMS
			END
	END
ELSE
	BEGIN
		EXEC proc_fill_OLAP_LPROPROD -- !!! BEFORE SELECTION_DIMS
		EXEC proc_fill_OLAP_SELECTION_DIMS
	END



set @message=  '- OLAP_SELECTION  took ' + CAST(DATEDIFF(ss, @prev_time , getdate() ) as varchar(25)) + ' sec.'
exec proc_insert_LOG @message
SET @prev_time=GETDATE()






---------------------------
EXEC proc_fill_OLAP_DPM
---------------------------

set @message=  '- OLAP_DPM took ' + CAST(DATEDIFF(ss, @prev_time , getdate() ) as varchar(25)) + ' sec.'
exec proc_insert_LOG @message
SET @prev_time=GETDATE()




---------------------------
EXEC proc_fill_OLAP_ORDDISTR
---------------------------

set @message=  '- OLAP_ORDDISTR took ' + CAST(DATEDIFF(ss, @prev_time , getdate() ) as varchar(25)) + ' sec.'
exec proc_insert_LOG @message
SET @prev_time=GETDATE()



---------------------------
EXEC proc_fill_OLAP_DELDISTR
---------------------------

set @message=  '- OLAP_DELDISTR took ' + CAST(DATEDIFF(ss, @prev_time , getdate() ) as varchar(25)) + ' sec.'
exec proc_insert_LOG @message
SET @prev_time=GETDATE()

GO
setuser
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO





